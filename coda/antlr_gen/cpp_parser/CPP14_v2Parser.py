# Generated from C:/Users/yasein/PycharmProjects/CodeAnalayserByGraph\CPP14_v2.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0098")
        buf.write("\u09d7\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\3\2\5")
        buf.write("\2\u0194\n\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5")
        buf.write("\3\u01a0\n\3\3\4\3\4\5\4\u01a4\n\4\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\5\5\u01af\n\5\3\6\3\6\5\6\u01b3\n\6\3")
        buf.write("\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7")
        buf.write("\u01c2\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u01c9\n\7\3\7\3\7\3")
        buf.write("\7\7\7\u01ce\n\7\f\7\16\7\u01d1\13\7\3\b\3\b\5\b\u01d5")
        buf.write("\n\b\3\b\3\b\3\t\3\t\5\t\u01db\n\t\3\t\3\t\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\n\5\n\u01e5\n\n\3\13\3\13\5\13\u01e9\n\13\3")
        buf.write("\f\3\f\3\f\5\f\u01ee\n\f\3\f\3\f\3\f\3\f\5\f\u01f4\n\f")
        buf.write("\7\f\u01f6\n\f\f\f\16\f\u01f9\13\f\3\r\3\r\5\r\u01fd\n")
        buf.write("\r\3\16\3\16\3\16\3\16\5\16\u0203\n\16\3\17\3\17\3\17")
        buf.write("\3\17\3\17\5\17\u020a\n\17\3\20\3\20\3\20\3\20\5\20\u0210")
        buf.write("\n\20\3\20\5\20\u0213\n\20\3\20\5\20\u0216\n\20\3\20\5")
        buf.write("\20\u0219\n\20\3\21\3\21\3\21\3\21\3\21\5\21\u0220\n\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\5\21\u0227\n\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\5\21\u025b\n\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21")
        buf.write("\u026a\n\21\3\21\3\21\3\21\3\21\5\21\u0270\n\21\3\21\3")
        buf.write("\21\3\21\3\21\5\21\u0276\n\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\7\21\u0283\n\21\f\21\16")
        buf.write("\21\u0286\13\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25\5\25")
        buf.write("\u028f\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\5\25\u029e\n\25\3\25\3\25\3\25")
        buf.write("\3\25\5\25\u02a4\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\5\26\u02c2\n\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\5\27\u02cc\n\27\3\30\5\30\u02cf\n\30\3\30\3\30\5\30")
        buf.write("\u02d3\n\30\3\30\3\30\5\30\u02d7\n\30\3\30\5\30\u02da")
        buf.write("\n\30\3\30\3\30\5\30\u02de\n\30\3\30\3\30\3\30\3\30\5")
        buf.write("\30\u02e4\n\30\5\30\u02e6\n\30\3\31\3\31\3\31\3\31\3\32")
        buf.write("\3\32\5\32\u02ee\n\32\3\33\3\33\5\33\u02f2\n\33\3\33\5")
        buf.write("\33\u02f5\n\33\3\34\3\34\3\34\3\34\3\34\5\34\u02fc\n\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\5\34\u0303\n\34\7\34\u0305\n")
        buf.write("\34\f\34\16\34\u0308\13\34\3\35\3\35\5\35\u030c\n\35\3")
        buf.write("\35\3\35\5\35\u0310\n\35\3\36\5\36\u0313\n\36\3\36\3\36")
        buf.write("\3\36\5\36\u0318\n\36\3\36\3\36\3\36\3\36\5\36\u031e\n")
        buf.write("\36\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \5 \u032b")
        buf.write("\n \3!\3!\3!\3!\3!\3!\3!\3!\3!\7!\u0336\n!\f!\16!\u0339")
        buf.write("\13!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\7")
        buf.write("\"\u0347\n\"\f\"\16\"\u034a\13\"\3#\3#\3#\3#\3#\3#\3#")
        buf.write("\3#\3#\7#\u0355\n#\f#\16#\u0358\13#\3$\3$\3$\3$\3$\3$")
        buf.write("\3$\7$\u0361\n$\f$\16$\u0364\13$\3%\3%\5%\u0368\n%\3&")
        buf.write("\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\7&\u0379\n")
        buf.write("&\f&\16&\u037c\13&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\7\'\u0387\n\'\f\'\16\'\u038a\13\'\3(\3(\3(\3(\3(\3(\7")
        buf.write("(\u0392\n(\f(\16(\u0395\13(\3)\3)\3)\3)\3)\3)\7)\u039d")
        buf.write("\n)\f)\16)\u03a0\13)\3*\3*\3*\3*\3*\3*\7*\u03a8\n*\f*")
        buf.write("\16*\u03ab\13*\3+\3+\3+\3+\3+\3+\3+\3+\3+\7+\u03b6\n+")
        buf.write("\f+\16+\u03b9\13+\3,\3,\3,\3,\3,\3,\3,\3,\3,\7,\u03c4")
        buf.write("\n,\f,\16,\u03c7\13,\3-\3-\3-\3-\3-\3-\3-\5-\u03d0\n-")
        buf.write("\3.\3.\3.\3.\3.\3.\5.\u03d8\n.\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\5/\u03e5\n/\3\60\3\60\3\60\3\60\3\60\3\60\7")
        buf.write("\60\u03ed\n\60\f\60\16\60\u03f0\13\60\3\61\3\61\3\62\3")
        buf.write("\62\5\62\u03f6\n\62\3\62\3\62\5\62\u03fa\n\62\3\62\3\62")
        buf.write("\5\62\u03fe\n\62\3\62\3\62\5\62\u0402\n\62\3\62\3\62\5")
        buf.write("\62\u0406\n\62\3\62\3\62\3\62\5\62\u040b\n\62\3\62\5\62")
        buf.write("\u040e\n\62\3\63\5\63\u0411\n\63\3\63\3\63\3\63\3\63\5")
        buf.write("\63\u0417\n\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u041f")
        buf.write("\n\63\3\63\3\63\3\63\5\63\u0424\n\63\3\64\5\64\u0427\n")
        buf.write("\64\3\64\3\64\3\65\3\65\5\65\u042d\n\65\3\65\3\65\3\66")
        buf.write("\3\66\3\66\3\66\3\66\7\66\u0436\n\66\f\66\16\66\u0439")
        buf.write("\13\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3")
        buf.write("\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\5\67\u044f\n\67\38\38\58\u0453\n8\38\38\38\38\38\38\5")
        buf.write("8\u045b\n8\38\38\38\38\58\u0461\n8\39\39\39\39\39\39\3")
        buf.write("9\39\39\39\39\39\39\39\39\39\39\39\59\u0475\n9\39\39\5")
        buf.write("9\u0479\n9\39\39\39\39\39\39\39\39\39\39\39\59\u0486\n")
        buf.write("9\3:\3:\5:\u048a\n:\3;\5;\u048d\n;\3;\3;\3;\3<\3<\5<\u0494")
        buf.write("\n<\3=\3=\3=\3=\3=\3=\5=\u049c\n=\3=\3=\3=\3=\3=\3=\3")
        buf.write("=\3=\5=\u04a6\n=\3>\3>\3?\3?\3?\3?\3?\7?\u04af\n?\f?\16")
        buf.write("?\u04b2\13?\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u04bd\n@\3A")
        buf.write("\3A\3A\3A\3A\3A\3A\3A\5A\u04c7\nA\3B\3B\3B\5B\u04cc\n")
        buf.write("B\3B\3B\3B\3B\3C\5C\u04d3\nC\3C\5C\u04d6\nC\3C\3C\3C\5")
        buf.write("C\u04db\nC\3C\3C\3C\5C\u04e0\nC\3D\3D\3D\3D\3D\3D\3D\3")
        buf.write("D\3E\3E\3F\3F\3F\3G\3G\3G\3G\3G\3G\5G\u04f5\nG\3H\3H\5")
        buf.write("H\u04f9\nH\3H\3H\3H\5H\u04fe\nH\3I\3I\3I\3I\3I\5I\u0505")
        buf.write("\nI\3J\3J\3J\5J\u050a\nJ\3K\3K\3L\3L\3L\5L\u0511\nL\3")
        buf.write("M\3M\3M\3M\5M\u0517\nM\3N\3N\5N\u051b\nN\3N\3N\3N\5N\u0520")
        buf.write("\nN\3O\3O\5O\u0524\nO\3O\3O\3O\5O\u0529\nO\3P\5P\u052c")
        buf.write("\nP\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3")
        buf.write("P\3P\3P\3P\5P\u0542\nP\3Q\3Q\3Q\3Q\5Q\u0548\nQ\3R\3R\3")
        buf.write("R\3R\3R\3R\3R\3R\3R\5R\u0553\nR\3S\3S\5S\u0557\nS\3S\5")
        buf.write("S\u055a\nS\3S\3S\3S\3S\3S\3S\3S\3S\5S\u0564\nS\3S\3S\3")
        buf.write("S\3S\5S\u056a\nS\3S\5S\u056d\nS\3T\3T\3U\3U\3U\5U\u0574")
        buf.write("\nU\3U\3U\3U\3U\3U\3U\3U\3U\5U\u057e\nU\3V\3V\5V\u0582")
        buf.write("\nV\3V\5V\u0585\nV\3V\5V\u0588\nV\3V\3V\5V\u058c\nV\3")
        buf.write("V\3V\3V\5V\u0591\nV\5V\u0593\nV\3W\3W\5W\u0597\nW\3W\3")
        buf.write("W\5W\u059b\nW\3W\3W\3X\3X\3X\3X\3X\5X\u05a4\nX\3Y\3Y\3")
        buf.write("Y\3Z\3Z\3Z\3Z\3Z\3Z\7Z\u05af\nZ\fZ\16Z\u05b2\13Z\3[\3")
        buf.write("[\3[\3[\3[\5[\u05b9\n[\3\\\3\\\3]\3]\5]\u05bf\n]\3^\3")
        buf.write("^\3_\3_\5_\u05c5\n_\3`\3`\5`\u05c9\n`\3a\5a\u05cc\na\3")
        buf.write("a\3a\3a\3a\3a\3a\3b\5b\u05d5\nb\3b\3b\3b\3b\3b\3b\3c\5")
        buf.write("c\u05de\nc\3c\3c\3c\3c\3c\3d\5d\u05e6\nd\3e\3e\3f\3f\3")
        buf.write("f\3f\3f\3f\3g\5g\u05f1\ng\3g\3g\3h\3h\5h\u05f7\nh\3h\3")
        buf.write("h\3h\3h\3h\3h\3h\3h\3h\5h\u0602\nh\3i\5i\u0605\ni\3i\3")
        buf.write("i\3i\5i\u060a\ni\3i\3i\3i\3j\3j\3j\3j\3j\3j\3k\3k\3k\3")
        buf.write("k\5k\u0619\nk\3k\3k\3k\3k\5k\u061f\nk\3l\3l\3l\3l\3l\7")
        buf.write("l\u0626\nl\fl\16l\u0629\13l\3m\3m\3m\3m\3m\3m\3m\5m\u0632")
        buf.write("\nm\3n\3n\3n\3n\5n\u0638\nn\3n\3n\3n\3n\3n\3n\5n\u0640")
        buf.write("\nn\3n\3n\5n\u0644\nn\3o\3o\5o\u0648\no\3o\3o\3o\5o\u064d")
        buf.write("\no\3o\3o\3o\5o\u0652\no\3o\3o\3o\3o\3o\7o\u0659\no\f")
        buf.write("o\16o\u065c\13o\3p\3p\5p\u0660\np\3q\3q\5q\u0664\nq\3")
        buf.write("r\3r\3r\3r\3s\3s\3t\3t\3t\3t\3u\3u\5u\u0672\nu\3u\3u\7")
        buf.write("u\u0676\nu\fu\16u\u0679\13u\3v\3v\3v\3v\3v\3v\3v\3v\3")
        buf.write("v\3v\3v\3v\3v\6v\u0688\nv\rv\16v\u0689\5v\u068c\nv\3w")
        buf.write("\3w\3w\3w\3w\3w\7w\u0694\nw\fw\16w\u0697\13w\3x\3x\5x")
        buf.write("\u069b\nx\3y\3y\3y\3y\3y\5y\u06a2\ny\3z\3z\3z\3z\5z\u06a8")
        buf.write("\nz\3{\3{\3{\5{\u06ad\n{\3{\3{\3{\3{\5{\u06b3\n{\3{\3")
        buf.write("{\3{\3{\3{\5{\u06ba\n{\3{\3{\5{\u06be\n{\7{\u06c0\n{\f")
        buf.write("{\16{\u06c3\13{\3|\3|\3|\3|\5|\u06c9\n|\3|\5|\u06cc\n")
        buf.write("|\3|\5|\u06cf\n|\3|\5|\u06d2\n|\3}\3}\3}\5}\u06d7\n}\3")
        buf.write("~\3~\5~\u06db\n~\3~\5~\u06de\n~\3~\3~\5~\u06e2\n~\3~\3")
        buf.write("~\5~\u06e6\n~\3~\3~\3~\5~\u06eb\n~\3~\5~\u06ee\n~\5~\u06f0")
        buf.write("\n~\3\177\3\177\5\177\u06f4\n\177\3\u0080\3\u0080\5\u0080")
        buf.write("\u06f8\n\u0080\3\u0081\3\u0081\5\u0081\u06fc\n\u0081\3")
        buf.write("\u0082\5\u0082\u06ff\n\u0082\3\u0082\3\u0082\3\u0083\3")
        buf.write("\u0083\5\u0083\u0705\n\u0083\3\u0084\3\u0084\5\u0084\u0709")
        buf.write("\n\u0084\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u070f")
        buf.write("\n\u0084\3\u0085\3\u0085\3\u0085\5\u0085\u0714\n\u0085")
        buf.write("\5\u0085\u0716\n\u0085\3\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\5\u0086\u071c\n\u0086\3\u0086\3\u0086\5\u0086\u0720\n")
        buf.write("\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0726\n")
        buf.write("\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086")
        buf.write("\u072d\n\u0086\3\u0086\3\u0086\5\u0086\u0731\n\u0086\7")
        buf.write("\u0086\u0733\n\u0086\f\u0086\16\u0086\u0736\13\u0086\3")
        buf.write("\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u073c\n\u0087\3")
        buf.write("\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\5\u0088\u0746\n\u0088\3\u0088\3\u0088\5\u0088")
        buf.write("\u074a\n\u0088\7\u0088\u074c\n\u0088\f\u0088\16\u0088")
        buf.write("\u074f\13\u0088\3\u0089\5\u0089\u0752\n\u0089\3\u0089")
        buf.write("\5\u0089\u0755\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\5\u0089\u075b\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\7\u008a\u0763\n\u008a\f\u008a\16\u008a")
        buf.write("\u0766\13\u008a\3\u008b\5\u008b\u0769\n\u008b\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\5\u008b\u076f\n\u008b\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0777")
        buf.write("\n\u008b\3\u008b\3\u008b\5\u008b\u077b\n\u008b\3\u008b")
        buf.write("\5\u008b\u077e\n\u008b\3\u008b\3\u008b\5\u008b\u0782\n")
        buf.write("\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0787\n\u008b\3")
        buf.write("\u008c\5\u008c\u078a\n\u008c\3\u008c\5\u008c\u078d\n\u008c")
        buf.write("\3\u008c\3\u008c\5\u008c\u0791\n\u008c\3\u008c\3\u008c")
        buf.write("\3\u008d\5\u008d\u0796\n\u008d\3\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u07a0")
        buf.write("\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e")
        buf.write("\u07a7\n\u008e\3\u008f\3\u008f\3\u008f\5\u008f\u07ac\n")
        buf.write("\u008f\3\u0090\3\u0090\5\u0090\u07b0\n\u0090\3\u0091\3")
        buf.write("\u0091\3\u0091\5\u0091\u07b5\n\u0091\3\u0091\3\u0091\3")
        buf.write("\u0091\3\u0091\5\u0091\u07bb\n\u0091\7\u0091\u07bd\n\u0091")
        buf.write("\f\u0091\16\u0091\u07c0\13\u0091\3\u0092\3\u0092\3\u0092")
        buf.write("\5\u0092\u07c5\n\u0092\3\u0092\3\u0092\3\u0092\3\u0092")
        buf.write("\5\u0092\u07cb\n\u0092\3\u0093\3\u0093\5\u0093\u07cf\n")
        buf.write("\u0093\3\u0094\3\u0094\3\u0094\5\u0094\u07d4\n\u0094\3")
        buf.write("\u0094\3\u0094\3\u0095\3\u0095\5\u0095\u07da\n\u0095\3")
        buf.write("\u0095\3\u0095\5\u0095\u07de\n\u0095\3\u0095\5\u0095\u07e1")
        buf.write("\n\u0095\3\u0095\3\u0095\5\u0095\u07e5\n\u0095\3\u0095")
        buf.write("\5\u0095\u07e8\n\u0095\5\u0095\u07ea\n\u0095\3\u0096\5")
        buf.write("\u0096\u07ed\n\u0096\3\u0096\3\u0096\3\u0097\3\u0097\3")
        buf.write("\u0098\3\u0098\3\u0098\5\u0098\u07f6\n\u0098\3\u0099\3")
        buf.write("\u0099\5\u0099\u07fa\n\u0099\3\u0099\3\u0099\3\u0099\5")
        buf.write("\u0099\u07ff\n\u0099\5\u0099\u0801\n\u0099\3\u009a\5\u009a")
        buf.write("\u0804\n\u009a\3\u009a\5\u009a\u0807\n\u009a\3\u009a\5")
        buf.write("\u009a\u080a\n\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3")
        buf.write("\u009a\3\u009a\3\u009a\5\u009a\u0813\n\u009a\3\u009b\3")
        buf.write("\u009b\3\u009b\3\u009b\3\u009b\3\u009b\7\u009b\u081b\n")
        buf.write("\u009b\f\u009b\16\u009b\u081e\13\u009b\3\u009c\3\u009c")
        buf.write("\5\u009c\u0822\n\u009c\3\u009c\5\u009c\u0825\n\u009c\3")
        buf.write("\u009c\3\u009c\5\u009c\u0829\n\u009c\3\u009c\5\u009c\u082c")
        buf.write("\n\u009c\3\u009c\5\u009c\u082f\n\u009c\3\u009c\3\u009c")
        buf.write("\5\u009c\u0833\n\u009c\3\u009d\3\u009d\3\u009d\3\u009d")
        buf.write("\3\u009d\7\u009d\u083a\n\u009d\f\u009d\16\u009d\u083d")
        buf.write("\13\u009d\3\u009e\3\u009e\5\u009e\u0841\n\u009e\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1")
        buf.write("\3\u00a1\5\u00a1\u084c\n\u00a1\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\3\u00a1\5\u00a1\u0852\n\u00a1\7\u00a1\u0854\n\u00a1\f")
        buf.write("\u00a1\16\u00a1\u0857\13\u00a1\3\u00a2\5\u00a2\u085a\n")
        buf.write("\u00a2\3\u00a2\3\u00a2\5\u00a2\u085e\n\u00a2\3\u00a2\3")
        buf.write("\u00a2\5\u00a2\u0862\n\u00a2\3\u00a2\3\u00a2\5\u00a2\u0866")
        buf.write("\n\u00a2\3\u00a2\3\u00a2\5\u00a2\u086a\n\u00a2\3\u00a2")
        buf.write("\3\u00a2\5\u00a2\u086e\n\u00a2\3\u00a3\5\u00a3\u0871\n")
        buf.write("\u00a3\3\u00a3\3\u00a3\5\u00a3\u0875\n\u00a3\3\u00a4\3")
        buf.write("\u00a4\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u087c\n\u00a5\3")
        buf.write("\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7\5\u00a7\u0883\n")
        buf.write("\u00a7\3\u00a8\3\u00a8\5\u00a8\u0887\n\u00a8\3\u00a9\3")
        buf.write("\u00a9\3\u00a9\3\u00aa\3\u00aa\5\u00aa\u088e\n\u00aa\3")
        buf.write("\u00aa\3\u00aa\5\u00aa\u0892\n\u00aa\3\u00aa\3\u00aa\3")
        buf.write("\u00aa\5\u00aa\u0897\n\u00aa\3\u00ab\3\u00ab\3\u00ab\5")
        buf.write("\u00ab\u089c\n\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3")
        buf.write("\u00ab\5\u00ab\u08a3\n\u00ab\3\u00ac\3\u00ac\5\u00ac\u08a7")
        buf.write("\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\5\u00ae\u08b1\n\u00ae\3\u00af\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00af\3\u00af\3\u00b0\3\u00b0\3\u00b0")
        buf.write("\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u08bf\n\u00b0\f\u00b0")
        buf.write("\16\u00b0\u08c2\13\u00b0\3\u00b1\3\u00b1\5\u00b1\u08c6")
        buf.write("\n\u00b1\3\u00b2\3\u00b2\5\u00b2\u08ca\n\u00b2\3\u00b2")
        buf.write("\5\u00b2\u08cd\n\u00b2\3\u00b2\3\u00b2\5\u00b2\u08d1\n")
        buf.write("\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u08d7\n")
        buf.write("\u00b2\3\u00b2\5\u00b2\u08da\n\u00b2\3\u00b2\3\u00b2\5")
        buf.write("\u00b2\u08de\n\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3")
        buf.write("\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u08e8\n\u00b2\3")
        buf.write("\u00b2\5\u00b2\u08eb\n\u00b2\3\u00b2\3\u00b2\3\u00b2\3")
        buf.write("\u00b2\3\u00b2\3\u00b2\5\u00b2\u08f3\n\u00b2\3\u00b2\3")
        buf.write("\u00b2\3\u00b2\5\u00b2\u08f8\n\u00b2\3\u00b3\3\u00b3\3")
        buf.write("\u00b3\5\u00b3\u08fd\n\u00b3\3\u00b3\3\u00b3\3\u00b4\3")
        buf.write("\u00b4\3\u00b4\3\u00b4\5\u00b4\u0905\n\u00b4\3\u00b4\3")
        buf.write("\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u090c\n\u00b4\3")
        buf.write("\u00b4\3\u00b4\5\u00b4\u0910\n\u00b4\3\u00b5\3\u00b5\3")
        buf.write("\u00b6\3\u00b6\3\u00b6\5\u00b6\u0917\n\u00b6\3\u00b6\3")
        buf.write("\u00b6\3\u00b6\3\u00b6\5\u00b6\u091d\n\u00b6\7\u00b6\u091f")
        buf.write("\n\u00b6\f\u00b6\16\u00b6\u0922\13\u00b6\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\5\u00b7\u0927\n\u00b7\3\u00b8\3\u00b8\3\u00b8")
        buf.write("\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0930\n\u00b8")
        buf.write("\3\u00b8\3\u00b8\5\u00b8\u0934\n\u00b8\3\u00b9\5\u00b9")
        buf.write("\u0937\n\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba")
        buf.write("\3\u00ba\3\u00ba\3\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write("\3\u00bc\3\u00bc\5\u00bc\u0947\n\u00bc\3\u00bc\3\u00bc")
        buf.write("\3\u00bc\3\u00bd\3\u00bd\5\u00bd\u094e\n\u00bd\3\u00be")
        buf.write("\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00bf\5\u00bf")
        buf.write("\u0957\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf")
        buf.write("\u095d\n\u00bf\3\u00bf\3\u00bf\5\u00bf\u0961\n\u00bf\3")
        buf.write("\u00bf\5\u00bf\u0964\n\u00bf\3\u00c0\3\u00c0\5\u00c0\u0968")
        buf.write("\n\u00c0\3\u00c1\3\u00c1\5\u00c1\u096c\n\u00c1\3\u00c2")
        buf.write("\3\u00c2\3\u00c2\5\u00c2\u0971\n\u00c2\3\u00c2\3\u00c2")
        buf.write("\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0978\n\u00c3\3\u00c3")
        buf.write("\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u097e\n\u00c3\7\u00c3")
        buf.write("\u0980\n\u00c3\f\u00c3\16\u00c3\u0983\13\u00c3\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u098b")
        buf.write("\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u09c0\n\u00c5\3\u00c6")
        buf.write("\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6")
        buf.write("\u09c9\n\u00c6\3\u00c7\3\u00c7\5\u00c7\u09cd\n\u00c7\3")
        buf.write("\u00c8\3\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9")
        buf.write("\u09d5\n\u00c9\3\u00c9\2$\f\26 \66@BDFJLNPRTV^j|\u00b2")
        buf.write("\u00d6\u00dc\u00e8\u00ec\u00f4\u010a\u010e\u0112\u0120")
        buf.write("\u0134\u0138\u0140\u015e\u016a\u0184\u00ca\2\4\6\b\n\f")
        buf.write("\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@")
        buf.write("BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0")
        buf.write("\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2")
        buf.write("\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104")
        buf.write("\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116")
        buf.write("\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128")
        buf.write("\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a")
        buf.write("\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c")
        buf.write("\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e")
        buf.write("\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170")
        buf.write("\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182")
        buf.write("\u0184\u0186\u0188\u018a\u018c\u018e\u0190\2\3\3\2V[\2")
        buf.write("\u0b17\2\u0193\3\2\2\2\4\u019f\3\2\2\2\6\u01a3\3\2\2\2")
        buf.write("\b\u01ae\3\2\2\2\n\u01b0\3\2\2\2\f\u01c1\3\2\2\2\16\u01d2")
        buf.write("\3\2\2\2\20\u01d8\3\2\2\2\22\u01e4\3\2\2\2\24\u01e8\3")
        buf.write("\2\2\2\26\u01ea\3\2\2\2\30\u01fc\3\2\2\2\32\u0202\3\2")
        buf.write("\2\2\34\u0209\3\2\2\2\36\u020b\3\2\2\2 \u025a\3\2\2\2")
        buf.write("\"\u0287\3\2\2\2$\u0289\3\2\2\2&\u028b\3\2\2\2(\u02a3")
        buf.write("\3\2\2\2*\u02c1\3\2\2\2,\u02cb\3\2\2\2.\u02e5\3\2\2\2")
        buf.write("\60\u02e7\3\2\2\2\62\u02eb\3\2\2\2\64\u02f4\3\2\2\2\66")
        buf.write("\u02f6\3\2\2\28\u030f\3\2\2\2:\u031d\3\2\2\2<\u031f\3")
        buf.write("\2\2\2>\u032a\3\2\2\2@\u032c\3\2\2\2B\u033a\3\2\2\2D\u034b")
        buf.write("\3\2\2\2F\u0359\3\2\2\2H\u0367\3\2\2\2J\u0369\3\2\2\2")
        buf.write("L\u037d\3\2\2\2N\u038b\3\2\2\2P\u0396\3\2\2\2R\u03a1\3")
        buf.write("\2\2\2T\u03ac\3\2\2\2V\u03ba\3\2\2\2X\u03cf\3\2\2\2Z\u03d7")
        buf.write("\3\2\2\2\\\u03e4\3\2\2\2^\u03e6\3\2\2\2`\u03f1\3\2\2\2")
        buf.write("b\u040d\3\2\2\2d\u0423\3\2\2\2f\u0426\3\2\2\2h\u042a\3")
        buf.write("\2\2\2j\u0430\3\2\2\2l\u044e\3\2\2\2n\u0460\3\2\2\2p\u0485")
        buf.write("\3\2\2\2r\u0489\3\2\2\2t\u048c\3\2\2\2v\u0493\3\2\2\2")
        buf.write("x\u04a5\3\2\2\2z\u04a7\3\2\2\2|\u04a9\3\2\2\2~\u04bc\3")
        buf.write("\2\2\2\u0080\u04c6\3\2\2\2\u0082\u04c8\3\2\2\2\u0084\u04df")
        buf.write("\3\2\2\2\u0086\u04e1\3\2\2\2\u0088\u04e9\3\2\2\2\u008a")
        buf.write("\u04eb\3\2\2\2\u008c\u04f4\3\2\2\2\u008e\u04fd\3\2\2\2")
        buf.write("\u0090\u0504\3\2\2\2\u0092\u0509\3\2\2\2\u0094\u050b\3")
        buf.write("\2\2\2\u0096\u0510\3\2\2\2\u0098\u0516\3\2\2\2\u009a\u051f")
        buf.write("\3\2\2\2\u009c\u0528\3\2\2\2\u009e\u0541\3\2\2\2\u00a0")
        buf.write("\u0547\3\2\2\2\u00a2\u0552\3\2\2\2\u00a4\u056c\3\2\2\2")
        buf.write("\u00a6\u056e\3\2\2\2\u00a8\u057d\3\2\2\2\u00aa\u0592\3")
        buf.write("\2\2\2\u00ac\u0594\3\2\2\2\u00ae\u05a3\3\2\2\2\u00b0\u05a5")
        buf.write("\3\2\2\2\u00b2\u05a8\3\2\2\2\u00b4\u05b8\3\2\2\2\u00b6")
        buf.write("\u05ba\3\2\2\2\u00b8\u05be\3\2\2\2\u00ba\u05c0\3\2\2\2")
        buf.write("\u00bc\u05c4\3\2\2\2\u00be\u05c8\3\2\2\2\u00c0\u05cb\3")
        buf.write("\2\2\2\u00c2\u05d4\3\2\2\2\u00c4\u05dd\3\2\2\2\u00c6\u05e5")
        buf.write("\3\2\2\2\u00c8\u05e7\3\2\2\2\u00ca\u05e9\3\2\2\2\u00cc")
        buf.write("\u05f0\3\2\2\2\u00ce\u0601\3\2\2\2\u00d0\u0604\3\2\2\2")
        buf.write("\u00d2\u060e\3\2\2\2\u00d4\u061e\3\2\2\2\u00d6\u0620\3")
        buf.write("\2\2\2\u00d8\u0631\3\2\2\2\u00da\u0643\3\2\2\2\u00dc\u064c")
        buf.write("\3\2\2\2\u00de\u065d\3\2\2\2\u00e0\u0663\3\2\2\2\u00e2")
        buf.write("\u0665\3\2\2\2\u00e4\u0669\3\2\2\2\u00e6\u066b\3\2\2\2")
        buf.write("\u00e8\u066f\3\2\2\2\u00ea\u068b\3\2\2\2\u00ec\u068d\3")
        buf.write("\2\2\2\u00ee\u0698\3\2\2\2\u00f0\u06a1\3\2\2\2\u00f2\u06a7")
        buf.write("\3\2\2\2\u00f4\u06b2\3\2\2\2\u00f6\u06c4\3\2\2\2\u00f8")
        buf.write("\u06d3\3\2\2\2\u00fa\u06ef\3\2\2\2\u00fc\u06f1\3\2\2\2")
        buf.write("\u00fe\u06f7\3\2\2\2\u0100\u06fb\3\2\2\2\u0102\u06fe\3")
        buf.write("\2\2\2\u0104\u0702\3\2\2\2\u0106\u070e\3\2\2\2\u0108\u0715")
        buf.write("\3\2\2\2\u010a\u0725\3\2\2\2\u010c\u073b\3\2\2\2\u010e")
        buf.write("\u073d\3\2\2\2\u0110\u075a\3\2\2\2\u0112\u075c\3\2\2\2")
        buf.write("\u0114\u0786\3\2\2\2\u0116\u0789\3\2\2\2\u0118\u079f\3")
        buf.write("\2\2\2\u011a\u07a6\3\2\2\2\u011c\u07ab\3\2\2\2\u011e\u07af")
        buf.write("\3\2\2\2\u0120\u07b1\3\2\2\2\u0122\u07ca\3\2\2\2\u0124")
        buf.write("\u07ce\3\2\2\2\u0126\u07d0\3\2\2\2\u0128\u07e9\3\2\2\2")
        buf.write("\u012a\u07ec\3\2\2\2\u012c\u07f0\3\2\2\2\u012e\u07f5\3")
        buf.write("\2\2\2\u0130\u0800\3\2\2\2\u0132\u0812\3\2\2\2\u0134\u0814")
        buf.write("\3\2\2\2\u0136\u0832\3\2\2\2\u0138\u0834\3\2\2\2\u013a")
        buf.write("\u0840\3\2\2\2\u013c\u0842\3\2\2\2\u013e\u0845\3\2\2\2")
        buf.write("\u0140\u0848\3\2\2\2\u0142\u086d\3\2\2\2\u0144\u0874\3")
        buf.write("\2\2\2\u0146\u0876\3\2\2\2\u0148\u087b\3\2\2\2\u014a\u087d")
        buf.write("\3\2\2\2\u014c\u0880\3\2\2\2\u014e\u0884\3\2\2\2\u0150")
        buf.write("\u0888\3\2\2\2\u0152\u0896\3\2\2\2\u0154\u08a2\3\2\2\2")
        buf.write("\u0156\u08a6\3\2\2\2\u0158\u08a8\3\2\2\2\u015a\u08b0\3")
        buf.write("\2\2\2\u015c\u08b2\3\2\2\2\u015e\u08b8\3\2\2\2\u0160\u08c5")
        buf.write("\3\2\2\2\u0162\u08f7\3\2\2\2\u0164\u08f9\3\2\2\2\u0166")
        buf.write("\u090f\3\2\2\2\u0168\u0911\3\2\2\2\u016a\u0913\3\2\2\2")
        buf.write("\u016c\u0926\3\2\2\2\u016e\u0933\3\2\2\2\u0170\u0936\3")
        buf.write("\2\2\2\u0172\u093b\3\2\2\2\u0174\u0940\3\2\2\2\u0176\u0944")
        buf.write("\3\2\2\2\u0178\u094b\3\2\2\2\u017a\u094f\3\2\2\2\u017c")
        buf.write("\u0963\3\2\2\2\u017e\u0965\3\2\2\2\u0180\u096b\3\2\2\2")
        buf.write("\u0182\u096d\3\2\2\2\u0184\u0974\3\2\2\2\u0186\u098a\3")
        buf.write("\2\2\2\u0188\u09bf\3\2\2\2\u018a\u09c8\3\2\2\2\u018c\u09cc")
        buf.write("\3\2\2\2\u018e\u09ce\3\2\2\2\u0190\u09d4\3\2\2\2\u0192")
        buf.write("\u0194\5|?\2\u0193\u0192\3\2\2\2\u0193\u0194\3\2\2\2\u0194")
        buf.write("\u0195\3\2\2\2\u0195\u0196\7\2\2\3\u0196\3\3\2\2\2\u0197")
        buf.write("\u01a0\5\u018a\u00c6\2\u0198\u01a0\7F\2\2\u0199\u019a")
        buf.write("\7V\2\2\u019a\u019b\5^\60\2\u019b\u019c\7W\2\2\u019c\u01a0")
        buf.write("\3\2\2\2\u019d\u01a0\5\6\4\2\u019e\u01a0\5\16\b\2\u019f")
        buf.write("\u0197\3\2\2\2\u019f\u0198\3\2\2\2\u019f\u0199\3\2\2\2")
        buf.write("\u019f\u019d\3\2\2\2\u019f\u019e\3\2\2\2\u01a0\5\3\2\2")
        buf.write("\2\u01a1\u01a4\5\b\5\2\u01a2\u01a4\5\n\6\2\u01a3\u01a1")
        buf.write("\3\2\2\2\u01a3\u01a2\3\2\2\2\u01a4\7\3\2\2\2\u01a5\u01af")
        buf.write("\7\u0087\2\2\u01a6\u01af\5\u0158\u00ad\2\u01a7\u01af\5")
        buf.write("\u014a\u00a6\2\u01a8\u01af\5\u015a\u00ae\2\u01a9\u01aa")
        buf.write("\7d\2\2\u01aa\u01af\5\u0124\u0093\2\u01ab\u01ac\7d\2\2")
        buf.write("\u01ac\u01af\5\u00a2R\2\u01ad\u01af\5\u0166\u00b4\2\u01ae")
        buf.write("\u01a5\3\2\2\2\u01ae\u01a6\3\2\2\2\u01ae\u01a7\3\2\2\2")
        buf.write("\u01ae\u01a8\3\2\2\2\u01ae\u01a9\3\2\2\2\u01ae\u01ab\3")
        buf.write("\2\2\2\u01ae\u01ad\3\2\2\2\u01af\t\3\2\2\2\u01b0\u01b2")
        buf.write("\5\f\7\2\u01b1\u01b3\7E\2\2\u01b2\u01b1\3\2\2\2\u01b2")
        buf.write("\u01b3\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\u01b5\5\b\5\2")
        buf.write("\u01b5\13\3\2\2\2\u01b6\u01b7\b\7\1\2\u01b7\u01c2\7\u0082")
        buf.write("\2\2\u01b8\u01b9\5\u00a0Q\2\u01b9\u01ba\7\u0082\2\2\u01ba")
        buf.write("\u01c2\3\2\2\2\u01bb\u01bc\5\u00b8]\2\u01bc\u01bd\7\u0082")
        buf.write("\2\2\u01bd\u01c2\3\2\2\2\u01be\u01bf\5\u00a2R\2\u01bf")
        buf.write("\u01c0\7\u0082\2\2\u01c0\u01c2\3\2\2\2\u01c1\u01b6\3\2")
        buf.write("\2\2\u01c1\u01b8\3\2\2\2\u01c1\u01bb\3\2\2\2\u01c1\u01be")
        buf.write("\3\2\2\2\u01c2\u01cf\3\2\2\2\u01c3\u01c4\f\4\2\2\u01c4")
        buf.write("\u01c5\7\u0087\2\2\u01c5\u01ce\7\u0082\2\2\u01c6\u01c8")
        buf.write("\f\3\2\2\u01c7\u01c9\7E\2\2\u01c8\u01c7\3\2\2\2\u01c8")
        buf.write("\u01c9\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cb\5\u0164")
        buf.write("\u00b3\2\u01cb\u01cc\7\u0082\2\2\u01cc\u01ce\3\2\2\2\u01cd")
        buf.write("\u01c3\3\2\2\2\u01cd\u01c6\3\2\2\2\u01ce\u01d1\3\2\2\2")
        buf.write("\u01cf\u01cd\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\r\3\2\2")
        buf.write("\2\u01d1\u01cf\3\2\2\2\u01d2\u01d4\5\20\t\2\u01d3\u01d5")
        buf.write("\5\36\20\2\u01d4\u01d3\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5")
        buf.write("\u01d6\3\2\2\2\u01d6\u01d7\5h\65\2\u01d7\17\3\2\2\2\u01d8")
        buf.write("\u01da\7X\2\2\u01d9\u01db\5\22\n\2\u01da\u01d9\3\2\2\2")
        buf.write("\u01da\u01db\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc\u01dd\7")
        buf.write("Y\2\2\u01dd\21\3\2\2\2\u01de\u01e5\5\24\13\2\u01df\u01e5")
        buf.write("\5\26\f\2\u01e0\u01e1\5\24\13\2\u01e1\u01e2\7}\2\2\u01e2")
        buf.write("\u01e3\5\26\f\2\u01e3\u01e5\3\2\2\2\u01e4\u01de\3\2\2")
        buf.write("\2\u01e4\u01df\3\2\2\2\u01e4\u01e0\3\2\2\2\u01e5\23\3")
        buf.write("\2\2\2\u01e6\u01e9\7b\2\2\u01e7\u01e9\7f\2\2\u01e8\u01e6")
        buf.write("\3\2\2\2\u01e8\u01e7\3\2\2\2\u01e9\25\3\2\2\2\u01ea\u01eb")
        buf.write("\b\f\1\2\u01eb\u01ed\5\30\r\2\u01ec\u01ee\7\u0086\2\2")
        buf.write("\u01ed\u01ec\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\u01f7\3")
        buf.write("\2\2\2\u01ef\u01f0\f\3\2\2\u01f0\u01f1\7}\2\2\u01f1\u01f3")
        buf.write("\5\30\r\2\u01f2\u01f4\7\u0086\2\2\u01f3\u01f2\3\2\2\2")
        buf.write("\u01f3\u01f4\3\2\2\2\u01f4\u01f6\3\2\2\2\u01f5\u01ef\3")
        buf.write("\2\2\2\u01f6\u01f9\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f7\u01f8")
        buf.write("\3\2\2\2\u01f8\27\3\2\2\2\u01f9\u01f7\3\2\2\2\u01fa\u01fd")
        buf.write("\5\32\16\2\u01fb\u01fd\5\34\17\2\u01fc\u01fa\3\2\2\2\u01fc")
        buf.write("\u01fb\3\2\2\2\u01fd\31\3\2\2\2\u01fe\u0203\7\u0087\2")
        buf.write("\2\u01ff\u0200\7b\2\2\u0200\u0203\7\u0087\2\2\u0201\u0203")
        buf.write("\7F\2\2\u0202\u01fe\3\2\2\2\u0202\u01ff\3\2\2\2\u0202")
        buf.write("\u0201\3\2\2\2\u0203\33\3\2\2\2\u0204\u0205\7\u0087\2")
        buf.write("\2\u0205\u020a\5\u011a\u008e\2\u0206\u0207\7b\2\2\u0207")
        buf.write("\u0208\7\u0087\2\2\u0208\u020a\5\u011a\u008e\2\u0209\u0204")
        buf.write("\3\2\2\2\u0209\u0206\3\2\2\2\u020a\35\3\2\2\2\u020b\u020c")
        buf.write("\7V\2\2\u020c\u020d\5\u0110\u0089\2\u020d\u020f\7W\2\2")
        buf.write("\u020e\u0210\7\60\2\2\u020f\u020e\3\2\2\2\u020f\u0210")
        buf.write("\3\2\2\2\u0210\u0212\3\2\2\2\u0211\u0213\5\u0180\u00c1")
        buf.write("\2\u0212\u0211\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0215")
        buf.write("\3\2\2\2\u0214\u0216\5\u00d6l\2\u0215\u0214\3\2\2\2\u0215")
        buf.write("\u0216\3\2\2\2\u0216\u0218\3\2\2\2\u0217\u0219\5\u00f8")
        buf.write("}\2\u0218\u0217\3\2\2\2\u0218\u0219\3\2\2\2\u0219\37\3")
        buf.write("\2\2\2\u021a\u021b\b\21\1\2\u021b\u025b\5\4\3\2\u021c")
        buf.write("\u021d\5\u009eP\2\u021d\u021f\7V\2\2\u021e\u0220\5&\24")
        buf.write("\2\u021f\u021e\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0221")
        buf.write("\3\2\2\2\u0221\u0222\7W\2\2\u0222\u025b\3\2\2\2\u0223")
        buf.write("\u0224\5\u016e\u00b8\2\u0224\u0226\7V\2\2\u0225\u0227")
        buf.write("\5&\24\2\u0226\u0225\3\2\2\2\u0226\u0227\3\2\2\2\u0227")
        buf.write("\u0228\3\2\2\2\u0228\u0229\7W\2\2\u0229\u025b\3\2\2\2")
        buf.write("\u022a\u022b\5\u009eP\2\u022b\u022c\5\u0122\u0092\2\u022c")
        buf.write("\u025b\3\2\2\2\u022d\u022e\5\u016e\u00b8\2\u022e\u022f")
        buf.write("\5\u0122\u0092\2\u022f\u025b\3\2\2\2\u0230\u0231\7 \2")
        buf.write("\2\u0231\u0232\7g\2\2\u0232\u0233\5\u0104\u0083\2\u0233")
        buf.write("\u0234\7h\2\2\u0234\u0235\7V\2\2\u0235\u0236\5^\60\2\u0236")
        buf.write("\u0237\7W\2\2\u0237\u025b\3\2\2\2\u0238\u0239\7B\2\2\u0239")
        buf.write("\u023a\7g\2\2\u023a\u023b\5\u0104\u0083\2\u023b\u023c")
        buf.write("\7h\2\2\u023c\u023d\7V\2\2\u023d\u023e\5^\60\2\u023e\u023f")
        buf.write("\7W\2\2\u023f\u025b\3\2\2\2\u0240\u0241\7;\2\2\u0241\u0242")
        buf.write("\7g\2\2\u0242\u0243\5\u0104\u0083\2\u0243\u0244\7h\2\2")
        buf.write("\u0244\u0245\7V\2\2\u0245\u0246\5^\60\2\u0246\u0247\7")
        buf.write("W\2\2\u0247\u025b\3\2\2\2\u0248\u0249\7\31\2\2\u0249\u024a")
        buf.write("\7g\2\2\u024a\u024b\5\u0104\u0083\2\u024b\u024c\7h\2\2")
        buf.write("\u024c\u024d\7V\2\2\u024d\u024e\5^\60\2\u024e\u024f\7")
        buf.write("W\2\2\u024f\u025b\3\2\2\2\u0250\u0251\5$\23\2\u0251\u0252")
        buf.write("\7V\2\2\u0252\u0253\5^\60\2\u0253\u0254\7W\2\2\u0254\u025b")
        buf.write("\3\2\2\2\u0255\u0256\5$\23\2\u0256\u0257\7V\2\2\u0257")
        buf.write("\u0258\5\u0104\u0083\2\u0258\u0259\7W\2\2\u0259\u025b")
        buf.write("\3\2\2\2\u025a\u021a\3\2\2\2\u025a\u021c\3\2\2\2\u025a")
        buf.write("\u0223\3\2\2\2\u025a\u022a\3\2\2\2\u025a\u022d\3\2\2\2")
        buf.write("\u025a\u0230\3\2\2\2\u025a\u0238\3\2\2\2\u025a\u0240\3")
        buf.write("\2\2\2\u025a\u0248\3\2\2\2\u025a\u0250\3\2\2\2\u025a\u0255")
        buf.write("\3\2\2\2\u025b\u0284\3\2\2\2\u025c\u025d\f\25\2\2\u025d")
        buf.write("\u025e\7X\2\2\u025e\u025f\5^\60\2\u025f\u0260\7Y\2\2\u0260")
        buf.write("\u0283\3\2\2\2\u0261\u0262\f\24\2\2\u0262\u0263\7X\2\2")
        buf.write("\u0263\u0264\5\u0122\u0092\2\u0264\u0265\7Y\2\2\u0265")
        buf.write("\u0283\3\2\2\2\u0266\u0267\f\23\2\2\u0267\u0269\7V\2\2")
        buf.write("\u0268\u026a\5&\24\2\u0269\u0268\3\2\2\2\u0269\u026a\3")
        buf.write("\2\2\2\u026a\u026b\3\2\2\2\u026b\u0283\7W\2\2\u026c\u026d")
        buf.write("\f\16\2\2\u026d\u026f\7\u0084\2\2\u026e\u0270\7E\2\2\u026f")
        buf.write("\u026e\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0271\3\2\2\2")
        buf.write("\u0271\u0283\5\6\4\2\u0272\u0273\f\r\2\2\u0273\u0275\7")
        buf.write("\177\2\2\u0274\u0276\7E\2\2\u0275\u0274\3\2\2\2\u0275")
        buf.write("\u0276\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u0283\5\6\4\2")
        buf.write("\u0278\u0279\f\f\2\2\u0279\u027a\7\u0084\2\2\u027a\u0283")
        buf.write("\5(\25\2\u027b\u027c\f\13\2\2\u027c\u027d\7\177\2\2\u027d")
        buf.write("\u0283\5(\25\2\u027e\u027f\f\n\2\2\u027f\u0283\7{\2\2")
        buf.write("\u0280\u0281\f\t\2\2\u0281\u0283\7|\2\2\u0282\u025c\3")
        buf.write("\2\2\2\u0282\u0261\3\2\2\2\u0282\u0266\3\2\2\2\u0282\u026c")
        buf.write("\3\2\2\2\u0282\u0272\3\2\2\2\u0282\u0278\3\2\2\2\u0282")
        buf.write("\u027b\3\2\2\2\u0282\u027e\3\2\2\2\u0282\u0280\3\2\2\2")
        buf.write("\u0283\u0286\3\2\2\2\u0284\u0282\3\2\2\2\u0284\u0285\3")
        buf.write("\2\2\2\u0285!\3\2\2\2\u0286\u0284\3\2\2\2\u0287\u0288")
        buf.write("\7L\2\2\u0288#\3\2\2\2\u0289\u028a\7L\2\2\u028a%\3\2\2")
        buf.write("\2\u028b\u028c\5\u0120\u0091\2\u028c\'\3\2\2\2\u028d\u028f")
        buf.write("\5\f\7\2\u028e\u028d\3\2\2\2\u028e\u028f\3\2\2\2\u028f")
        buf.write("\u0290\3\2\2\2\u0290\u0291\5\u00a0Q\2\u0291\u0292\7\u0082")
        buf.write("\2\2\u0292\u0293\7d\2\2\u0293\u0294\5\u00a0Q\2\u0294\u02a4")
        buf.write("\3\2\2\2\u0295\u0296\5\f\7\2\u0296\u0297\7E\2\2\u0297")
        buf.write("\u0298\5\u0164\u00b3\2\u0298\u0299\7\u0082\2\2\u0299\u029a")
        buf.write("\7d\2\2\u029a\u029b\5\u00a0Q\2\u029b\u02a4\3\2\2\2\u029c")
        buf.write("\u029e\5\f\7\2\u029d\u029c\3\2\2\2\u029d\u029e\3\2\2\2")
        buf.write("\u029e\u029f\3\2\2\2\u029f\u02a0\7d\2\2\u02a0\u02a4\5")
        buf.write("\u00a0Q\2\u02a1\u02a2\7d\2\2\u02a2\u02a4\5\u00a2R\2\u02a3")
        buf.write("\u028e\3\2\2\2\u02a3\u0295\3\2\2\2\u02a3\u029d\3\2\2\2")
        buf.write("\u02a3\u02a1\3\2\2\2\u02a4)\3\2\2\2\u02a5\u02c2\5 \21")
        buf.write("\2\u02a6\u02a7\7{\2\2\u02a7\u02c2\5> \2\u02a8\u02a9\7")
        buf.write("|\2\2\u02a9\u02c2\5> \2\u02aa\u02ab\5,\27\2\u02ab\u02ac")
        buf.write("\5> \2\u02ac\u02c2\3\2\2\2\u02ad\u02ae\7?\2\2\u02ae\u02c2")
        buf.write("\5*\26\2\u02af\u02b0\7?\2\2\u02b0\u02b1\7V\2\2\u02b1\u02b2")
        buf.write("\5\u0104\u0083\2\u02b2\u02b3\7W\2\2\u02b3\u02c2\3\2\2")
        buf.write("\2\u02b4\u02b5\7?\2\2\u02b5\u02b6\7\u0086\2\2\u02b6\u02b7")
        buf.write("\7V\2\2\u02b7\u02b8\7\u0087\2\2\u02b8\u02c2\7W\2\2\u02b9")
        buf.write("\u02ba\7\f\2\2\u02ba\u02bb\7V\2\2\u02bb\u02bc\5\u0104")
        buf.write("\u0083\2\u02bc\u02bd\7W\2\2\u02bd\u02c2\3\2\2\2\u02be")
        buf.write("\u02c2\5<\37\2\u02bf\u02c2\5.\30\2\u02c0\u02c2\5:\36\2")
        buf.write("\u02c1\u02a5\3\2\2\2\u02c1\u02a6\3\2\2\2\u02c1\u02a8\3")
        buf.write("\2\2\2\u02c1\u02aa\3\2\2\2\u02c1\u02ad\3\2\2\2\u02c1\u02af")
        buf.write("\3\2\2\2\u02c1\u02b4\3\2\2\2\u02c1\u02b9\3\2\2\2\u02c1")
        buf.write("\u02be\3\2\2\2\u02c1\u02bf\3\2\2\2\u02c1\u02c0\3\2\2\2")
        buf.write("\u02c2+\3\2\2\2\u02c3\u02cc\7c\2\2\u02c4\u02cc\7^\2\2")
        buf.write("\u02c5\u02cc\7b\2\2\u02c6\u02cc\7\\\2\2\u02c7\u02cc\7")
        buf.write("\3\2\2\u02c8\u02cc\7d\2\2\u02c9\u02cc\7]\2\2\u02ca\u02cc")
        buf.write("\7\4\2\2\u02cb\u02c3\3\2\2\2\u02cb\u02c4\3\2\2\2\u02cb")
        buf.write("\u02c5\3\2\2\2\u02cb\u02c6\3\2\2\2\u02cb\u02c7\3\2\2\2")
        buf.write("\u02cb\u02c8\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cb\u02ca\3")
        buf.write("\2\2\2\u02cc-\3\2\2\2\u02cd\u02cf\7\u0082\2\2\u02ce\u02cd")
        buf.write("\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0")
        buf.write("\u02d2\7\62\2\2\u02d1\u02d3\5\60\31\2\u02d2\u02d1\3\2")
        buf.write("\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4\u02d6")
        buf.write("\5\62\32\2\u02d5\u02d7\58\35\2\u02d6\u02d5\3\2\2\2\u02d6")
        buf.write("\u02d7\3\2\2\2\u02d7\u02e6\3\2\2\2\u02d8\u02da\7\u0082")
        buf.write("\2\2\u02d9\u02d8\3\2\2\2\u02d9\u02da\3\2\2\2\u02da\u02db")
        buf.write("\3\2\2\2\u02db\u02dd\7\62\2\2\u02dc\u02de\5\60\31\2\u02dd")
        buf.write("\u02dc\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\u02df\3\2\2\2")
        buf.write("\u02df\u02e0\7V\2\2\u02e0\u02e1\5\u0104\u0083\2\u02e1")
        buf.write("\u02e3\7W\2\2\u02e2\u02e4\58\35\2\u02e3\u02e2\3\2\2\2")
        buf.write("\u02e3\u02e4\3\2\2\2\u02e4\u02e6\3\2\2\2\u02e5\u02ce\3")
        buf.write("\2\2\2\u02e5\u02d9\3\2\2\2\u02e6/\3\2\2\2\u02e7\u02e8")
        buf.write("\7V\2\2\u02e8\u02e9\5&\24\2\u02e9\u02ea\7W\2\2\u02ea\61")
        buf.write("\3\2\2\2\u02eb\u02ed\5\u009aN\2\u02ec\u02ee\5\64\33\2")
        buf.write("\u02ed\u02ec\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee\63\3\2")
        buf.write("\2\2\u02ef\u02f1\5\u00fa~\2\u02f0\u02f2\5\64\33\2\u02f1")
        buf.write("\u02f0\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f5\3\2\2\2")
        buf.write("\u02f3\u02f5\5\66\34\2\u02f4\u02ef\3\2\2\2\u02f4\u02f3")
        buf.write("\3\2\2\2\u02f5\65\3\2\2\2\u02f6\u02f7\b\34\1\2\u02f7\u02f8")
        buf.write("\7X\2\2\u02f8\u02f9\5^\60\2\u02f9\u02fb\7Y\2\2\u02fa\u02fc")
        buf.write("\5\u00d6l\2\u02fb\u02fa\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc")
        buf.write("\u0306\3\2\2\2\u02fd\u02fe\f\3\2\2\u02fe\u02ff\7X\2\2")
        buf.write("\u02ff\u0300\5`\61\2\u0300\u0302\7Y\2\2\u0301\u0303\5")
        buf.write("\u00d6l\2\u0302\u0301\3\2\2\2\u0302\u0303\3\2\2\2\u0303")
        buf.write("\u0305\3\2\2\2\u0304\u02fd\3\2\2\2\u0305\u0308\3\2\2\2")
        buf.write("\u0306\u0304\3\2\2\2\u0306\u0307\3\2\2\2\u0307\67\3\2")
        buf.write("\2\2\u0308\u0306\3\2\2\2\u0309\u030b\7V\2\2\u030a\u030c")
        buf.write("\5&\24\2\u030b\u030a\3\2\2\2\u030b\u030c\3\2\2\2\u030c")
        buf.write("\u030d\3\2\2\2\u030d\u0310\7W\2\2\u030e\u0310\5\u0122")
        buf.write("\u0092\2\u030f\u0309\3\2\2\2\u030f\u030e\3\2\2\2\u0310")
        buf.write("9\3\2\2\2\u0311\u0313\7\u0082\2\2\u0312\u0311\3\2\2\2")
        buf.write("\u0312\u0313\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0315\7")
        buf.write("\35\2\2\u0315\u031e\5> \2\u0316\u0318\7\u0082\2\2\u0317")
        buf.write("\u0316\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u0319\3\2\2\2")
        buf.write("\u0319\u031a\7\35\2\2\u031a\u031b\7X\2\2\u031b\u031c\7")
        buf.write("Y\2\2\u031c\u031e\5> \2\u031d\u0312\3\2\2\2\u031d\u0317")
        buf.write("\3\2\2\2\u031e;\3\2\2\2\u031f\u0320\7\63\2\2\u0320\u0321")
        buf.write("\7V\2\2\u0321\u0322\5^\60\2\u0322\u0323\7W\2\2\u0323=")
        buf.write("\3\2\2\2\u0324\u032b\5*\26\2\u0325\u0326\7V\2\2\u0326")
        buf.write("\u0327\5\u0104\u0083\2\u0327\u0328\7W\2\2\u0328\u0329")
        buf.write("\5> \2\u0329\u032b\3\2\2\2\u032a\u0324\3\2\2\2\u032a\u0325")
        buf.write("\3\2\2\2\u032b?\3\2\2\2\u032c\u032d\b!\1\2\u032d\u032e")
        buf.write("\5> \2\u032e\u0337\3\2\2\2\u032f\u0330\f\4\2\2\u0330\u0331")
        buf.write("\7\u0085\2\2\u0331\u0336\5> \2\u0332\u0333\f\3\2\2\u0333")
        buf.write("\u0334\7~\2\2\u0334\u0336\5> \2\u0335\u032f\3\2\2\2\u0335")
        buf.write("\u0332\3\2\2\2\u0336\u0339\3\2\2\2\u0337\u0335\3\2\2\2")
        buf.write("\u0337\u0338\3\2\2\2\u0338A\3\2\2\2\u0339\u0337\3\2\2")
        buf.write("\2\u033a\u033b\b\"\1\2\u033b\u033c\5@!\2\u033c\u0348\3")
        buf.write("\2\2\2\u033d\u033e\f\5\2\2\u033e\u033f\7^\2\2\u033f\u0347")
        buf.write("\5@!\2\u0340\u0341\f\4\2\2\u0341\u0342\7_\2\2\u0342\u0347")
        buf.write("\5@!\2\u0343\u0344\f\3\2\2\u0344\u0345\7`\2\2\u0345\u0347")
        buf.write("\5@!\2\u0346\u033d\3\2\2\2\u0346\u0340\3\2\2\2\u0346\u0343")
        buf.write("\3\2\2\2\u0347\u034a\3\2\2\2\u0348\u0346\3\2\2\2\u0348")
        buf.write("\u0349\3\2\2\2\u0349C\3\2\2\2\u034a\u0348\3\2\2\2\u034b")
        buf.write("\u034c\b#\1\2\u034c\u034d\5B\"\2\u034d\u0356\3\2\2\2\u034e")
        buf.write("\u034f\f\4\2\2\u034f\u0350\7\\\2\2\u0350\u0355\5B\"\2")
        buf.write("\u0351\u0352\f\3\2\2\u0352\u0353\7]\2\2\u0353\u0355\5")
        buf.write("B\"\2\u0354\u034e\3\2\2\2\u0354\u0351\3\2\2\2\u0355\u0358")
        buf.write("\3\2\2\2\u0356\u0354\3\2\2\2\u0356\u0357\3\2\2\2\u0357")
        buf.write("E\3\2\2\2\u0358\u0356\3\2\2\2\u0359\u035a\b$\1\2\u035a")
        buf.write("\u035b\5D#\2\u035b\u0362\3\2\2\2\u035c\u035d\f\3\2\2\u035d")
        buf.write("\u035e\5H%\2\u035e\u035f\5D#\2\u035f\u0361\3\2\2\2\u0360")
        buf.write("\u035c\3\2\2\2\u0361\u0364\3\2\2\2\u0362\u0360\3\2\2\2")
        buf.write("\u0362\u0363\3\2\2\2\u0363G\3\2\2\2\u0364\u0362\3\2\2")
        buf.write("\2\u0365\u0368\7r\2\2\u0366\u0368\7q\2\2\u0367\u0365\3")
        buf.write("\2\2\2\u0367\u0366\3\2\2\2\u0368I\3\2\2\2\u0369\u036a")
        buf.write("\b&\1\2\u036a\u036b\5F$\2\u036b\u037a\3\2\2\2\u036c\u036d")
        buf.write("\f\6\2\2\u036d\u036e\7g\2\2\u036e\u0379\5F$\2\u036f\u0370")
        buf.write("\f\5\2\2\u0370\u0371\7h\2\2\u0371\u0379\5F$\2\u0372\u0373")
        buf.write("\f\4\2\2\u0373\u0374\7w\2\2\u0374\u0379\5F$\2\u0375\u0376")
        buf.write("\f\3\2\2\u0376\u0377\7x\2\2\u0377\u0379\5F$\2\u0378\u036c")
        buf.write("\3\2\2\2\u0378\u036f\3\2\2\2\u0378\u0372\3\2\2\2\u0378")
        buf.write("\u0375\3\2\2\2\u0379\u037c\3\2\2\2\u037a\u0378\3\2\2\2")
        buf.write("\u037a\u037b\3\2\2\2\u037bK\3\2\2\2\u037c\u037a\3\2\2")
        buf.write("\2\u037d\u037e\b\'\1\2\u037e\u037f\5J&\2\u037f\u0388\3")
        buf.write("\2\2\2\u0380\u0381\f\4\2\2\u0381\u0382\7u\2\2\u0382\u0387")
        buf.write("\5J&\2\u0383\u0384\f\3\2\2\u0384\u0385\7v\2\2\u0385\u0387")
        buf.write("\5J&\2\u0386\u0380\3\2\2\2\u0386\u0383\3\2\2\2\u0387\u038a")
        buf.write("\3\2\2\2\u0388\u0386\3\2\2\2\u0388\u0389\3\2\2\2\u0389")
        buf.write("M\3\2\2\2\u038a\u0388\3\2\2\2\u038b\u038c\b(\1\2\u038c")
        buf.write("\u038d\5L\'\2\u038d\u0393\3\2\2\2\u038e\u038f\f\3\2\2")
        buf.write("\u038f\u0390\7b\2\2\u0390\u0392\5L\'\2\u0391\u038e\3\2")
        buf.write("\2\2\u0392\u0395\3\2\2\2\u0393\u0391\3\2\2\2\u0393\u0394")
        buf.write("\3\2\2\2\u0394O\3\2\2\2\u0395\u0393\3\2\2\2\u0396\u0397")
        buf.write("\b)\1\2\u0397\u0398\5N(\2\u0398\u039e\3\2\2\2\u0399\u039a")
        buf.write("\f\3\2\2\u039a\u039b\7a\2\2\u039b\u039d\5N(\2\u039c\u0399")
        buf.write("\3\2\2\2\u039d\u03a0\3\2\2\2\u039e\u039c\3\2\2\2\u039e")
        buf.write("\u039f\3\2\2\2\u039fQ\3\2\2\2\u03a0\u039e\3\2\2\2\u03a1")
        buf.write("\u03a2\b*\1\2\u03a2\u03a3\5P)\2\u03a3\u03a9\3\2\2\2\u03a4")
        buf.write("\u03a5\f\3\2\2\u03a5\u03a6\7c\2\2\u03a6\u03a8\5P)\2\u03a7")
        buf.write("\u03a4\3\2\2\2\u03a8\u03ab\3\2\2\2\u03a9\u03a7\3\2\2\2")
        buf.write("\u03a9\u03aa\3\2\2\2\u03aaS\3\2\2\2\u03ab\u03a9\3\2\2")
        buf.write("\2\u03ac\u03ad\b+\1\2\u03ad\u03ae\5R*\2\u03ae\u03b7\3")
        buf.write("\2\2\2\u03af\u03b0\f\4\2\2\u03b0\u03b1\7\5\2\2\u03b1\u03b6")
        buf.write("\5R*\2\u03b2\u03b3\f\3\2\2\u03b3\u03b4\7\6\2\2\u03b4\u03b6")
        buf.write("\5R*\2\u03b5\u03af\3\2\2\2\u03b5\u03b2\3\2\2\2\u03b6\u03b9")
        buf.write("\3\2\2\2\u03b7\u03b5\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8")
        buf.write("U\3\2\2\2\u03b9\u03b7\3\2\2\2\u03ba\u03bb\b,\1\2\u03bb")
        buf.write("\u03bc\5T+\2\u03bc\u03c5\3\2\2\2\u03bd\u03be\f\4\2\2\u03be")
        buf.write("\u03bf\7\7\2\2\u03bf\u03c4\5T+\2\u03c0\u03c1\f\3\2\2\u03c1")
        buf.write("\u03c2\7\b\2\2\u03c2\u03c4\5T+\2\u03c3\u03bd\3\2\2\2\u03c3")
        buf.write("\u03c0\3\2\2\2\u03c4\u03c7\3\2\2\2\u03c5\u03c3\3\2\2\2")
        buf.write("\u03c5\u03c6\3\2\2\2\u03c6W\3\2\2\2\u03c7\u03c5\3\2\2")
        buf.write("\2\u03c8\u03d0\5V,\2\u03c9\u03ca\5V,\2\u03ca\u03cb\7\u0080")
        buf.write("\2\2\u03cb\u03cc\5^\60\2\u03cc\u03cd\7\u0081\2\2\u03cd")
        buf.write("\u03ce\5Z.\2\u03ce\u03d0\3\2\2\2\u03cf\u03c8\3\2\2\2\u03cf")
        buf.write("\u03c9\3\2\2\2\u03d0Y\3\2\2\2\u03d1\u03d8\5X-\2\u03d2")
        buf.write("\u03d3\5V,\2\u03d3\u03d4\5\\/\2\u03d4\u03d5\5\u011e\u0090")
        buf.write("\2\u03d5\u03d8\3\2\2\2\u03d6\u03d8\5\u017e\u00c0\2\u03d7")
        buf.write("\u03d1\3\2\2\2\u03d7\u03d2\3\2\2\2\u03d7\u03d6\3\2\2\2")
        buf.write("\u03d8[\3\2\2\2\u03d9\u03e5\7f\2\2\u03da\u03e5\7k\2\2")
        buf.write("\u03db\u03e5\7l\2\2\u03dc\u03e5\7m\2\2\u03dd\u03e5\7i")
        buf.write("\2\2\u03de\u03e5\7j\2\2\u03df\u03e5\7t\2\2\u03e0\u03e5")
        buf.write("\7s\2\2\u03e1\u03e5\7o\2\2\u03e2\u03e5\7n\2\2\u03e3\u03e5")
        buf.write("\7p\2\2\u03e4\u03d9\3\2\2\2\u03e4\u03da\3\2\2\2\u03e4")
        buf.write("\u03db\3\2\2\2\u03e4\u03dc\3\2\2\2\u03e4\u03dd\3\2\2\2")
        buf.write("\u03e4\u03de\3\2\2\2\u03e4\u03df\3\2\2\2\u03e4\u03e0\3")
        buf.write("\2\2\2\u03e4\u03e1\3\2\2\2\u03e4\u03e2\3\2\2\2\u03e4\u03e3")
        buf.write("\3\2\2\2\u03e5]\3\2\2\2\u03e6\u03e7\b\60\1\2\u03e7\u03e8")
        buf.write("\5Z.\2\u03e8\u03ee\3\2\2\2\u03e9\u03ea\f\3\2\2\u03ea\u03eb")
        buf.write("\7}\2\2\u03eb\u03ed\5Z.\2\u03ec\u03e9\3\2\2\2\u03ed\u03f0")
        buf.write("\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef")
        buf.write("_\3\2\2\2\u03f0\u03ee\3\2\2\2\u03f1\u03f2\5X-\2\u03f2")
        buf.write("a\3\2\2\2\u03f3\u040e\5d\63\2\u03f4\u03f6\5\u00d6l\2\u03f5")
        buf.write("\u03f4\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f7\3\2\2\2")
        buf.write("\u03f7\u040e\5f\64\2\u03f8\u03fa\5\u00d6l\2\u03f9\u03f8")
        buf.write("\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb")
        buf.write("\u040e\5h\65\2\u03fc\u03fe\5\u00d6l\2\u03fd\u03fc\3\2")
        buf.write("\2\2\u03fd\u03fe\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u040e")
        buf.write("\5l\67\2\u0400\u0402\5\u00d6l\2\u0401\u0400\3\2\2\2\u0401")
        buf.write("\u0402\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u040e\5p9\2\u0404")
        buf.write("\u0406\5\u00d6l\2\u0405\u0404\3\2\2\2\u0405\u0406\3\2")
        buf.write("\2\2\u0406\u0407\3\2\2\2\u0407\u040e\5x=\2\u0408\u040e")
        buf.write("\5z>\2\u0409\u040b\5\u00d6l\2\u040a\u0409\3\2\2\2\u040a")
        buf.write("\u040b\3\2\2\2\u040b\u040c\3\2\2\2\u040c\u040e\5\u0174")
        buf.write("\u00bb\2\u040d\u03f3\3\2\2\2\u040d\u03f5\3\2\2\2\u040d")
        buf.write("\u03f9\3\2\2\2\u040d\u03fd\3\2\2\2\u040d\u0401\3\2\2\2")
        buf.write("\u040d\u0405\3\2\2\2\u040d\u0408\3\2\2\2\u040d\u040a\3")
        buf.write("\2\2\2\u040ec\3\2\2\2\u040f\u0411\5\u00d6l\2\u0410\u040f")
        buf.write("\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0412\3\2\2\2\u0412")
        buf.write("\u0413\7\u0087\2\2\u0413\u0414\7\u0081\2\2\u0414\u0424")
        buf.write("\5b\62\2\u0415\u0417\5\u00d6l\2\u0416\u0415\3\2\2\2\u0416")
        buf.write("\u0417\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u0419\7\21\2")
        buf.write("\2\u0419\u041a\5`\61\2\u041a\u041b\7\u0081\2\2\u041b\u041c")
        buf.write("\5b\62\2\u041c\u0424\3\2\2\2\u041d\u041f\5\u00d6l\2\u041e")
        buf.write("\u041d\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0420\3\2\2\2")
        buf.write("\u0420\u0421\7\34\2\2\u0421\u0422\7\u0081\2\2\u0422\u0424")
        buf.write("\5b\62\2\u0423\u0410\3\2\2\2\u0423\u0416\3\2\2\2\u0423")
        buf.write("\u041e\3\2\2\2\u0424e\3\2\2\2\u0425\u0427\5^\60\2\u0426")
        buf.write("\u0425\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u0428\3\2\2\2")
        buf.write("\u0428\u0429\7\u0083\2\2\u0429g\3\2\2\2\u042a\u042c\7")
        buf.write("Z\2\2\u042b\u042d\5j\66\2\u042c\u042b\3\2\2\2\u042c\u042d")
        buf.write("\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u042f\7[\2\2\u042f")
        buf.write("i\3\2\2\2\u0430\u0431\b\66\1\2\u0431\u0432\5b\62\2\u0432")
        buf.write("\u0437\3\2\2\2\u0433\u0434\f\3\2\2\u0434\u0436\5b\62\2")
        buf.write("\u0435\u0433\3\2\2\2\u0436\u0439\3\2\2\2\u0437\u0435\3")
        buf.write("\2\2\2\u0437\u0438\3\2\2\2\u0438k\3\2\2\2\u0439\u0437")
        buf.write("\3\2\2\2\u043a\u043b\7,\2\2\u043b\u043c\7V\2\2\u043c\u043d")
        buf.write("\5n8\2\u043d\u043e\7W\2\2\u043e\u043f\5b\62\2\u043f\u044f")
        buf.write("\3\2\2\2\u0440\u0441\7,\2\2\u0441\u0442\7V\2\2\u0442\u0443")
        buf.write("\5n8\2\u0443\u0444\7W\2\2\u0444\u0445\5b\62\2\u0445\u0446")
        buf.write("\7!\2\2\u0446\u0447\5b\62\2\u0447\u044f\3\2\2\2\u0448")
        buf.write("\u0449\7D\2\2\u0449\u044a\7V\2\2\u044a\u044b\5n8\2\u044b")
        buf.write("\u044c\7W\2\2\u044c\u044d\5b\62\2\u044d\u044f\3\2\2\2")
        buf.write("\u044e\u043a\3\2\2\2\u044e\u0440\3\2\2\2\u044e\u0448\3")
        buf.write("\2\2\2\u044fm\3\2\2\2\u0450\u0461\5^\60\2\u0451\u0453")
        buf.write("\5\u00d6l\2\u0452\u0451\3\2\2\2\u0452\u0453\3\2\2\2\u0453")
        buf.write("\u0454\3\2\2\2\u0454\u0455\5\u008eH\2\u0455\u0456\5\u00f0")
        buf.write("y\2\u0456\u0457\7f\2\2\u0457\u0458\5\u011e\u0090\2\u0458")
        buf.write("\u0461\3\2\2\2\u0459\u045b\5\u00d6l\2\u045a\u0459\3\2")
        buf.write("\2\2\u045a\u045b\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u045d")
        buf.write("\5\u008eH\2\u045d\u045e\5\u00f0y\2\u045e\u045f\5\u0122")
        buf.write("\u0092\2\u045f\u0461\3\2\2\2\u0460\u0450\3\2\2\2\u0460")
        buf.write("\u0452\3\2\2\2\u0460\u045a\3\2\2\2\u0461o\3\2\2\2\u0462")
        buf.write("\u0463\7U\2\2\u0463\u0464\7V\2\2\u0464\u0465\5n8\2\u0465")
        buf.write("\u0466\7W\2\2\u0466\u0467\5b\62\2\u0467\u0486\3\2\2\2")
        buf.write("\u0468\u0469\7\36\2\2\u0469\u046a\5b\62\2\u046a\u046b")
        buf.write("\7U\2\2\u046b\u046c\7V\2\2\u046c\u046d\5^\60\2\u046d\u046e")
        buf.write("\7W\2\2\u046e\u046f\7\u0083\2\2\u046f\u0486\3\2\2\2\u0470")
        buf.write("\u0471\7)\2\2\u0471\u0472\7V\2\2\u0472\u0474\5r:\2\u0473")
        buf.write("\u0475\5n8\2\u0474\u0473\3\2\2\2\u0474\u0475\3\2\2\2\u0475")
        buf.write("\u0476\3\2\2\2\u0476\u0478\7\u0083\2\2\u0477\u0479\5^")
        buf.write("\60\2\u0478\u0477\3\2\2\2\u0478\u0479\3\2\2\2\u0479\u047a")
        buf.write("\3\2\2\2\u047a\u047b\7W\2\2\u047b\u047c\5b\62\2\u047c")
        buf.write("\u0486\3\2\2\2\u047d\u047e\7)\2\2\u047e\u047f\7V\2\2\u047f")
        buf.write("\u0480\5t;\2\u0480\u0481\7\u0081\2\2\u0481\u0482\5v<\2")
        buf.write("\u0482\u0483\7W\2\2\u0483\u0484\5b\62\2\u0484\u0486\3")
        buf.write("\2\2\2\u0485\u0462\3\2\2\2\u0485\u0468\3\2\2\2\u0485\u0470")
        buf.write("\3\2\2\2\u0485\u047d\3\2\2\2\u0486q\3\2\2\2\u0487\u048a")
        buf.write("\5f\64\2\u0488\u048a\5\u0084C\2\u0489\u0487\3\2\2\2\u0489")
        buf.write("\u0488\3\2\2\2\u048as\3\2\2\2\u048b\u048d\5\u00d6l\2\u048c")
        buf.write("\u048b\3\2\2\2\u048c\u048d\3\2\2\2\u048d\u048e\3\2\2\2")
        buf.write("\u048e\u048f\5\u008eH\2\u048f\u0490\5\u00f0y\2\u0490u")
        buf.write("\3\2\2\2\u0491\u0494\5^\60\2\u0492\u0494\5\u0122\u0092")
        buf.write("\2\u0493\u0491\3\2\2\2\u0493\u0492\3\2\2\2\u0494w\3\2")
        buf.write("\2\2\u0495\u0496\7\20\2\2\u0496\u04a6\7\u0083\2\2\u0497")
        buf.write("\u0498\7\32\2\2\u0498\u04a6\7\u0083\2\2\u0499\u049b\7")
        buf.write("<\2\2\u049a\u049c\5^\60\2\u049b\u049a\3\2\2\2\u049b\u049c")
        buf.write("\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u04a6\7\u0083\2\2\u049e")
        buf.write("\u049f\7<\2\2\u049f\u04a0\5\u0122\u0092\2\u04a0\u04a1")
        buf.write("\7\u0083\2\2\u04a1\u04a6\3\2\2\2\u04a2\u04a3\7+\2\2\u04a3")
        buf.write("\u04a4\7\u0087\2\2\u04a4\u04a6\7\u0083\2\2\u04a5\u0495")
        buf.write("\3\2\2\2\u04a5\u0497\3\2\2\2\u04a5\u0499\3\2\2\2\u04a5")
        buf.write("\u049e\3\2\2\2\u04a5\u04a2\3\2\2\2\u04a6y\3\2\2\2\u04a7")
        buf.write("\u04a8\5\u0080A\2\u04a8{\3\2\2\2\u04a9\u04aa\b?\1\2\u04aa")
        buf.write("\u04ab\5~@\2\u04ab\u04b0\3\2\2\2\u04ac\u04ad\f\3\2\2\u04ad")
        buf.write("\u04af\5~@\2\u04ae\u04ac\3\2\2\2\u04af\u04b2\3\2\2\2\u04b0")
        buf.write("\u04ae\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1}\3\2\2\2\u04b2")
        buf.write("\u04b0\3\2\2\2\u04b3\u04bd\5\u0080A\2\u04b4\u04bd\5\u0116")
        buf.write("\u008c\2\u04b5\u04bd\5\u015c\u00af\2\u04b6\u04bd\5\u0170")
        buf.write("\u00b9\2\u04b7\u04bd\5\u0172\u00ba\2\u04b8\u04bd\5\u00d4")
        buf.write("k\2\u04b9\u04bd\5\u00bc_\2\u04ba\u04bd\5\u0088E\2\u04bb")
        buf.write("\u04bd\5\u008aF\2\u04bc\u04b3\3\2\2\2\u04bc\u04b4\3\2")
        buf.write("\2\2\u04bc\u04b5\3\2\2\2\u04bc\u04b6\3\2\2\2\u04bc\u04b7")
        buf.write("\3\2\2\2\u04bc\u04b8\3\2\2\2\u04bc\u04b9\3\2\2\2\u04bc")
        buf.write("\u04ba\3\2\2\2\u04bc\u04bb\3\2\2\2\u04bd\177\3\2\2\2\u04be")
        buf.write("\u04c7\5\u0084C\2\u04bf\u04c7\5\u00d2j\2\u04c0\u04c7\5")
        buf.write("\u00caf\2\u04c1\u04c7\5\u00ceh\2\u04c2\u04c7\5\u00d0i")
        buf.write("\2\u04c3\u04c7\5\u0086D\2\u04c4\u04c7\5\u0082B\2\u04c5")
        buf.write("\u04c7\5\u00acW\2\u04c6\u04be\3\2\2\2\u04c6\u04bf\3\2")
        buf.write("\2\2\u04c6\u04c0\3\2\2\2\u04c6\u04c1\3\2\2\2\u04c6\u04c2")
        buf.write("\3\2\2\2\u04c6\u04c3\3\2\2\2\u04c6\u04c4\3\2\2\2\u04c6")
        buf.write("\u04c5\3\2\2\2\u04c7\u0081\3\2\2\2\u04c8\u04c9\7P\2\2")
        buf.write("\u04c9\u04cb\7\u0087\2\2\u04ca\u04cc\5\u00d6l\2\u04cb")
        buf.write("\u04ca\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u04cd\3\2\2\2")
        buf.write("\u04cd\u04ce\7f\2\2\u04ce\u04cf\5\u0104\u0083\2\u04cf")
        buf.write("\u04d0\7\u0083\2\2\u04d0\u0083\3\2\2\2\u04d1\u04d3\5\u008e")
        buf.write("H\2\u04d2\u04d1\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d5")
        buf.write("\3\2\2\2\u04d4\u04d6\5\u00ecw\2\u04d5\u04d4\3\2\2\2\u04d5")
        buf.write("\u04d6\3\2\2\2\u04d6\u04d7\3\2\2\2\u04d7\u04e0\7\u0083")
        buf.write("\2\2\u04d8\u04da\5\u00d6l\2\u04d9\u04db\5\u008eH\2\u04da")
        buf.write("\u04d9\3\2\2\2\u04da\u04db\3\2\2\2\u04db\u04dc\3\2\2\2")
        buf.write("\u04dc\u04dd\5\u00ecw\2\u04dd\u04de\7\u0083\2\2\u04de")
        buf.write("\u04e0\3\2\2\2\u04df\u04d2\3\2\2\2\u04df\u04d8\3\2\2\2")
        buf.write("\u04e0\u0085\3\2\2\2\u04e1\u04e2\7A\2\2\u04e2\u04e3\7")
        buf.write("V\2\2\u04e3\u04e4\5`\61\2\u04e4\u04e5\7}\2\2\u04e5\u04e6")
        buf.write("\7\u0090\2\2\u04e6\u04e7\7W\2\2\u04e7\u04e8\7\u0083\2")
        buf.write("\2\u04e8\u0087\3\2\2\2\u04e9\u04ea\7\u0083\2\2\u04ea\u0089")
        buf.write("\3\2\2\2\u04eb\u04ec\5\u00d6l\2\u04ec\u04ed\7\u0083\2")
        buf.write("\2\u04ed\u008b\3\2\2\2\u04ee\u04f5\5\u0090I\2\u04ef\u04f5")
        buf.write("\5\u0096L\2\u04f0\u04f5\5\u0092J\2\u04f1\u04f5\7*\2\2")
        buf.write("\u04f2\u04f5\7K\2\2\u04f3\u04f5\7\30\2\2\u04f4\u04ee\3")
        buf.write("\2\2\2\u04f4\u04ef\3\2\2\2\u04f4\u04f0\3\2\2\2\u04f4\u04f1")
        buf.write("\3\2\2\2\u04f4\u04f2\3\2\2\2\u04f4\u04f3\3\2\2\2\u04f5")
        buf.write("\u008d\3\2\2\2\u04f6\u04f8\5\u008cG\2\u04f7\u04f9\5\u00d6")
        buf.write("l\2\u04f8\u04f7\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9\u04fe")
        buf.write("\3\2\2\2\u04fa\u04fb\5\u008cG\2\u04fb\u04fc\5\u008eH\2")
        buf.write("\u04fc\u04fe\3\2\2\2\u04fd\u04f6\3\2\2\2\u04fd\u04fa\3")
        buf.write("\2\2\2\u04fe\u008f\3\2\2\2\u04ff\u0505\7:\2\2\u0500\u0505")
        buf.write("\7@\2\2\u0501\u0505\7G\2\2\u0502\u0505\7%\2\2\u0503\u0505")
        buf.write("\7\60\2\2\u0504\u04ff\3\2\2\2\u0504\u0500\3\2\2\2\u0504")
        buf.write("\u0501\3\2\2\2\u0504\u0502\3\2\2\2\u0504\u0503\3\2\2\2")
        buf.write("\u0505\u0091\3\2\2\2\u0506\u050a\7-\2\2\u0507\u050a\7")
        buf.write("Q\2\2\u0508\u050a\7#\2\2\u0509\u0506\3\2\2\2\u0509\u0507")
        buf.write("\3\2\2\2\u0509\u0508\3\2\2\2\u050a\u0093\3\2\2\2\u050b")
        buf.write("\u050c\7\u0087\2\2\u050c\u0095\3\2\2\2\u050d\u0511\5\u0098")
        buf.write("M\2\u050e\u0511\5\u0126\u0094\2\u050f\u0511\5\u00a8U\2")
        buf.write("\u0510\u050d\3\2\2\2\u0510\u050e\3\2\2\2\u0510\u050f\3")
        buf.write("\2\2\2\u0511\u0097\3\2\2\2\u0512\u0517\5\u009eP\2\u0513")
        buf.write("\u0517\5\u00a4S\2\u0514\u0517\5\u016e\u00b8\2\u0515\u0517")
        buf.write("\5\u00fe\u0080\2\u0516\u0512\3\2\2\2\u0516\u0513\3\2\2")
        buf.write("\2\u0516\u0514\3\2\2\2\u0516\u0515\3\2\2\2\u0517\u0099")
        buf.write("\3\2\2\2\u0518\u051a\5\u0096L\2\u0519\u051b\5\u00d6l\2")
        buf.write("\u051a\u0519\3\2\2\2\u051a\u051b\3\2\2\2\u051b\u0520\3")
        buf.write("\2\2\2\u051c\u051d\5\u0096L\2\u051d\u051e\5\u009aN\2\u051e")
        buf.write("\u0520\3\2\2\2\u051f\u0518\3\2\2\2\u051f\u051c\3\2\2\2")
        buf.write("\u0520\u009b\3\2\2\2\u0521\u0523\5\u0098M\2\u0522\u0524")
        buf.write("\5\u00d6l\2\u0523\u0522\3\2\2\2\u0523\u0524\3\2\2\2\u0524")
        buf.write("\u0529\3\2\2\2\u0525\u0526\5\u0098M\2\u0526\u0527\5\u009c")
        buf.write("O\2\u0527\u0529\3\2\2\2\u0528\u0521\3\2\2\2\u0528\u0525")
        buf.write("\3\2\2\2\u0529\u009d\3\2\2\2\u052a\u052c\5\f\7\2\u052b")
        buf.write("\u052a\3\2\2\2\u052b\u052c\3\2\2\2\u052c\u052d\3\2\2\2")
        buf.write("\u052d\u0542\5\u00a0Q\2\u052e\u052f\5\f\7\2\u052f\u0530")
        buf.write("\7E\2\2\u0530\u0531\5\u0164\u00b3\2\u0531\u0542\3\2\2")
        buf.write("\2\u0532\u0542\7\23\2\2\u0533\u0542\7\24\2\2\u0534\u0542")
        buf.write("\7\25\2\2\u0535\u0542\7T\2\2\u0536\u0542\7\17\2\2\u0537")
        buf.write("\u0542\7=\2\2\u0538\u0542\7.\2\2\u0539\u0542\7/\2\2\u053a")
        buf.write("\u0542\7>\2\2\u053b\u0542\7O\2\2\u053c\u0542\7(\2\2\u053d")
        buf.write("\u0542\7\37\2\2\u053e\u0542\7R\2\2\u053f\u0542\7\16\2")
        buf.write("\2\u0540\u0542\5\u00a2R\2\u0541\u052b\3\2\2\2\u0541\u052e")
        buf.write("\3\2\2\2\u0541\u0532\3\2\2\2\u0541\u0533\3\2\2\2\u0541")
        buf.write("\u0534\3\2\2\2\u0541\u0535\3\2\2\2\u0541\u0536\3\2\2\2")
        buf.write("\u0541\u0537\3\2\2\2\u0541\u0538\3\2\2\2\u0541\u0539\3")
        buf.write("\2\2\2\u0541\u053a\3\2\2\2\u0541\u053b\3\2\2\2\u0541\u053c")
        buf.write("\3\2\2\2\u0541\u053d\3\2\2\2\u0541\u053e\3\2\2\2\u0541")
        buf.write("\u053f\3\2\2\2\u0541\u0540\3\2\2\2\u0542\u009f\3\2\2\2")
        buf.write("\u0543\u0548\5\u0124\u0093\2\u0544\u0548\5\u00a6T\2\u0545")
        buf.write("\u0548\5\u0094K\2\u0546\u0548\5\u0164\u00b3\2\u0547\u0543")
        buf.write("\3\2\2\2\u0547\u0544\3\2\2\2\u0547\u0545\3\2\2\2\u0547")
        buf.write("\u0546\3\2\2\2\u0548\u00a1\3\2\2\2\u0549\u054a\7\33\2")
        buf.write("\2\u054a\u054b\7V\2\2\u054b\u054c\5^\60\2\u054c\u054d")
        buf.write("\7W\2\2\u054d\u0553\3\2\2\2\u054e\u054f\7\33\2\2\u054f")
        buf.write("\u0550\7V\2\2\u0550\u0551\7\16\2\2\u0551\u0553\7W\2\2")
        buf.write("\u0552\u0549\3\2\2\2\u0552\u054e\3\2\2\2\u0553\u00a3\3")
        buf.write("\2\2\2\u0554\u0556\5\u012e\u0098\2\u0555\u0557\5\u00d6")
        buf.write("l\2\u0556\u0555\3\2\2\2\u0556\u0557\3\2\2\2\u0557\u0559")
        buf.write("\3\2\2\2\u0558\u055a\5\f\7\2\u0559\u0558\3\2\2\2\u0559")
        buf.write("\u055a\3\2\2\2\u055a\u055b\3\2\2\2\u055b\u055c\7\u0087")
        buf.write("\2\2\u055c\u056d\3\2\2\2\u055d\u055e\5\u012e\u0098\2\u055e")
        buf.write("\u055f\5\u0164\u00b3\2\u055f\u056d\3\2\2\2\u0560\u0561")
        buf.write("\5\u012e\u0098\2\u0561\u0563\5\f\7\2\u0562\u0564\7E\2")
        buf.write("\2\u0563\u0562\3\2\2\2\u0563\u0564\3\2\2\2\u0564\u0565")
        buf.write("\3\2\2\2\u0565\u0566\5\u0164\u00b3\2\u0566\u056d\3\2\2")
        buf.write("\2\u0567\u0569\7\"\2\2\u0568\u056a\5\f\7\2\u0569\u0568")
        buf.write("\3\2\2\2\u0569\u056a\3\2\2\2\u056a\u056b\3\2\2\2\u056b")
        buf.write("\u056d\7\u0087\2\2\u056c\u0554\3\2\2\2\u056c\u055d\3\2")
        buf.write("\2\2\u056c\u0560\3\2\2\2\u056c\u0567\3\2\2\2\u056d\u00a5")
        buf.write("\3\2\2\2\u056e\u056f\7\u0087\2\2\u056f\u00a7\3\2\2\2\u0570")
        buf.write("\u0571\5\u00aaV\2\u0571\u0573\7Z\2\2\u0572\u0574\5\u00b2")
        buf.write("Z\2\u0573\u0572\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0575")
        buf.write("\3\2\2\2\u0575\u0576\7[\2\2\u0576\u057e\3\2\2\2\u0577")
        buf.write("\u0578\5\u00aaV\2\u0578\u0579\7Z\2\2\u0579\u057a\5\u00b2")
        buf.write("Z\2\u057a\u057b\7}\2\2\u057b\u057c\7[\2\2\u057c\u057e")
        buf.write("\3\2\2\2\u057d\u0570\3\2\2\2\u057d\u0577\3\2\2\2\u057e")
        buf.write("\u00a9\3\2\2\2\u057f\u0581\5\u00aeX\2\u0580\u0582\5\u00d6")
        buf.write("l\2\u0581\u0580\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0584")
        buf.write("\3\2\2\2\u0583\u0585\7\u0087\2\2\u0584\u0583\3\2\2\2\u0584")
        buf.write("\u0585\3\2\2\2\u0585\u0587\3\2\2\2\u0586\u0588\5\u00b0")
        buf.write("Y\2\u0587\u0586\3\2\2\2\u0587\u0588\3\2\2\2\u0588\u0593")
        buf.write("\3\2\2\2\u0589\u058b\5\u00aeX\2\u058a\u058c\5\u00d6l\2")
        buf.write("\u058b\u058a\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u058d\3")
        buf.write("\2\2\2\u058d\u058e\5\f\7\2\u058e\u0590\7\u0087\2\2\u058f")
        buf.write("\u0591\5\u00b0Y\2\u0590\u058f\3\2\2\2\u0590\u0591\3\2")
        buf.write("\2\2\u0591\u0593\3\2\2\2\u0592\u057f\3\2\2\2\u0592\u0589")
        buf.write("\3\2\2\2\u0593\u00ab\3\2\2\2\u0594\u0596\5\u00aeX\2\u0595")
        buf.write("\u0597\5\u00d6l\2\u0596\u0595\3\2\2\2\u0596\u0597\3\2")
        buf.write("\2\2\u0597\u0598\3\2\2\2\u0598\u059a\7\u0087\2\2\u0599")
        buf.write("\u059b\5\u00b0Y\2\u059a\u0599\3\2\2\2\u059a\u059b\3\2")
        buf.write("\2\2\u059b\u059c\3\2\2\2\u059c\u059d\7\u0083\2\2\u059d")
        buf.write("\u00ad\3\2\2\2\u059e\u05a4\7\"\2\2\u059f\u05a0\7\"\2\2")
        buf.write("\u05a0\u05a4\7\26\2\2\u05a1\u05a2\7\"\2\2\u05a2\u05a4")
        buf.write("\7C\2\2\u05a3\u059e\3\2\2\2\u05a3\u059f\3\2\2\2\u05a3")
        buf.write("\u05a1\3\2\2\2\u05a4\u00af\3\2\2\2\u05a5\u05a6\7\u0081")
        buf.write("\2\2\u05a6\u05a7\5\u009aN\2\u05a7\u00b1\3\2\2\2\u05a8")
        buf.write("\u05a9\bZ\1\2\u05a9\u05aa\5\u00b4[\2\u05aa\u05b0\3\2\2")
        buf.write("\2\u05ab\u05ac\f\3\2\2\u05ac\u05ad\7}\2\2\u05ad\u05af")
        buf.write("\5\u00b4[\2\u05ae\u05ab\3\2\2\2\u05af\u05b2\3\2\2\2\u05b0")
        buf.write("\u05ae\3\2\2\2\u05b0\u05b1\3\2\2\2\u05b1\u00b3\3\2\2\2")
        buf.write("\u05b2\u05b0\3\2\2\2\u05b3\u05b9\5\u00b6\\\2\u05b4\u05b5")
        buf.write("\5\u00b6\\\2\u05b5\u05b6\7f\2\2\u05b6\u05b7\5`\61\2\u05b7")
        buf.write("\u05b9\3\2\2\2\u05b8\u05b3\3\2\2\2\u05b8\u05b4\3\2\2\2")
        buf.write("\u05b9\u00b5\3\2\2\2\u05ba\u05bb\7\u0087\2\2\u05bb\u00b7")
        buf.write("\3\2\2\2\u05bc\u05bf\5\u00ba^\2\u05bd\u05bf\5\u00c8e\2")
        buf.write("\u05be\u05bc\3\2\2\2\u05be\u05bd\3\2\2\2\u05bf\u00b9\3")
        buf.write("\2\2\2\u05c0\u05c1\7\u0087\2\2\u05c1\u00bb\3\2\2\2\u05c2")
        buf.write("\u05c5\5\u00be`\2\u05c3\u05c5\5\u00c4c\2\u05c4\u05c2\3")
        buf.write("\2\2\2\u05c4\u05c3\3\2\2\2\u05c5\u00bd\3\2\2\2\u05c6\u05c9")
        buf.write("\5\u00c0a\2\u05c7\u05c9\5\u00c2b\2\u05c8\u05c6\3\2\2\2")
        buf.write("\u05c8\u05c7\3\2\2\2\u05c9\u00bf\3\2\2\2\u05ca\u05cc\7")
        buf.write("-\2\2\u05cb\u05ca\3\2\2\2\u05cb\u05cc\3\2\2\2\u05cc\u05cd")
        buf.write("\3\2\2\2\u05cd\u05ce\7\61\2\2\u05ce\u05cf\7\u0087\2\2")
        buf.write("\u05cf\u05d0\7Z\2\2\u05d0\u05d1\5\u00c6d\2\u05d1\u05d2")
        buf.write("\7[\2\2\u05d2\u00c1\3\2\2\2\u05d3\u05d5\7-\2\2\u05d4\u05d3")
        buf.write("\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6")
        buf.write("\u05d7\7\61\2\2\u05d7\u05d8\5\u00ba^\2\u05d8\u05d9\7Z")
        buf.write("\2\2\u05d9\u05da\5\u00c6d\2\u05da\u05db\7[\2\2\u05db\u00c3")
        buf.write("\3\2\2\2\u05dc\u05de\7-\2\2\u05dd\u05dc\3\2\2\2\u05dd")
        buf.write("\u05de\3\2\2\2\u05de\u05df\3\2\2\2\u05df\u05e0\7\61\2")
        buf.write("\2\u05e0\u05e1\7Z\2\2\u05e1\u05e2\5\u00c6d\2\u05e2\u05e3")
        buf.write("\7[\2\2\u05e3\u00c5\3\2\2\2\u05e4\u05e6\5|?\2\u05e5\u05e4")
        buf.write("\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6\u00c7\3\2\2\2\u05e7")
        buf.write("\u05e8\7\u0087\2\2\u05e8\u00c9\3\2\2\2\u05e9\u05ea\7\61")
        buf.write("\2\2\u05ea\u05eb\7\u0087\2\2\u05eb\u05ec\7f\2\2\u05ec")
        buf.write("\u05ed\5\u00ccg\2\u05ed\u05ee\7\u0083\2\2\u05ee\u00cb")
        buf.write("\3\2\2\2\u05ef\u05f1\5\f\7\2\u05f0\u05ef\3\2\2\2\u05f0")
        buf.write("\u05f1\3\2\2\2\u05f1\u05f2\3\2\2\2\u05f2\u05f3\5\u00b8")
        buf.write("]\2\u05f3\u00cd\3\2\2\2\u05f4\u05f6\7P\2\2\u05f5\u05f7")
        buf.write("\7M\2\2\u05f6\u05f5\3\2\2\2\u05f6\u05f7\3\2\2\2\u05f7")
        buf.write("\u05f8\3\2\2\2\u05f8\u05f9\5\f\7\2\u05f9\u05fa\5\b\5\2")
        buf.write("\u05fa\u05fb\7\u0083\2\2\u05fb\u0602\3\2\2\2\u05fc\u05fd")
        buf.write("\7P\2\2\u05fd\u05fe\7\u0082\2\2\u05fe\u05ff\5\b\5\2\u05ff")
        buf.write("\u0600\7\u0083\2\2\u0600\u0602\3\2\2\2\u0601\u05f4\3\2")
        buf.write("\2\2\u0601\u05fc\3\2\2\2\u0602\u00cf\3\2\2\2\u0603\u0605")
        buf.write("\5\u00d6l\2\u0604\u0603\3\2\2\2\u0604\u0605\3\2\2\2\u0605")
        buf.write("\u0606\3\2\2\2\u0606\u0607\7P\2\2\u0607\u0609\7\61\2\2")
        buf.write("\u0608\u060a\5\f\7\2\u0609\u0608\3\2\2\2\u0609\u060a\3")
        buf.write("\2\2\2\u060a\u060b\3\2\2\2\u060b\u060c\5\u00b8]\2\u060c")
        buf.write("\u060d\7\u0083\2\2\u060d\u00d1\3\2\2\2\u060e\u060f\7\r")
        buf.write("\2\2\u060f\u0610\7V\2\2\u0610\u0611\7\u0090\2\2\u0611")
        buf.write("\u0612\7W\2\2\u0612\u0613\7\u0083\2\2\u0613\u00d3\3\2")
        buf.write("\2\2\u0614\u0615\7%\2\2\u0615\u0616\7\u0090\2\2\u0616")
        buf.write("\u0618\7Z\2\2\u0617\u0619\5|?\2\u0618\u0617\3\2\2\2\u0618")
        buf.write("\u0619\3\2\2\2\u0619\u061a\3\2\2\2\u061a\u061f\7[\2\2")
        buf.write("\u061b\u061c\7%\2\2\u061c\u061d\7\u0090\2\2\u061d\u061f")
        buf.write("\5~@\2\u061e\u0614\3\2\2\2\u061e\u061b\3\2\2\2\u061f\u00d5")
        buf.write("\3\2\2\2\u0620\u0621\bl\1\2\u0621\u0622\5\u00d8m\2\u0622")
        buf.write("\u0627\3\2\2\2\u0623\u0624\f\3\2\2\u0624\u0626\5\u00d8")
        buf.write("m\2\u0625\u0623\3\2\2\2\u0626\u0629\3\2\2\2\u0627\u0625")
        buf.write("\3\2\2\2\u0627\u0628\3\2\2\2\u0628\u00d7\3\2\2\2\u0629")
        buf.write("\u0627\3\2\2\2\u062a\u062b\7X\2\2\u062b\u062c\7X\2\2\u062c")
        buf.write("\u062d\5\u00dco\2\u062d\u062e\7Y\2\2\u062e\u062f\7Y\2")
        buf.write("\2\u062f\u0632\3\2\2\2\u0630\u0632\5\u00dan\2\u0631\u062a")
        buf.write("\3\2\2\2\u0631\u0630\3\2\2\2\u0632\u00d9\3\2\2\2\u0633")
        buf.write("\u0634\7\13\2\2\u0634\u0635\7V\2\2\u0635\u0637\5\u0104")
        buf.write("\u0083\2\u0636\u0638\7\u0086\2\2\u0637\u0636\3\2\2\2\u0637")
        buf.write("\u0638\3\2\2\2\u0638\u0639\3\2\2\2\u0639\u063a\7W\2\2")
        buf.write("\u063a\u0644\3\2\2\2\u063b\u063c\7\13\2\2\u063c\u063d")
        buf.write("\7V\2\2\u063d\u063f\5`\61\2\u063e\u0640\7\u0086\2\2\u063f")
        buf.write("\u063e\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u0641\3\2\2\2")
        buf.write("\u0641\u0642\7W\2\2\u0642\u0644\3\2\2\2\u0643\u0633\3")
        buf.write("\2\2\2\u0643\u063b\3\2\2\2\u0644\u00db\3\2\2\2\u0645\u0647")
        buf.write("\bo\1\2\u0646\u0648\5\u00dep\2\u0647\u0646\3\2\2\2\u0647")
        buf.write("\u0648\3\2\2\2\u0648\u064d\3\2\2\2\u0649\u064a\5\u00de")
        buf.write("p\2\u064a\u064b\7\u0086\2\2\u064b\u064d\3\2\2\2\u064c")
        buf.write("\u0645\3\2\2\2\u064c\u0649\3\2\2\2\u064d\u065a\3\2\2\2")
        buf.write("\u064e\u064f\f\5\2\2\u064f\u0651\7}\2\2\u0650\u0652\5")
        buf.write("\u00dep\2\u0651\u0650\3\2\2\2\u0651\u0652\3\2\2\2\u0652")
        buf.write("\u0659\3\2\2\2\u0653\u0654\f\3\2\2\u0654\u0655\7}\2\2")
        buf.write("\u0655\u0656\5\u00dep\2\u0656\u0657\7\u0086\2\2\u0657")
        buf.write("\u0659\3\2\2\2\u0658\u064e\3\2\2\2\u0658\u0653\3\2\2\2")
        buf.write("\u0659\u065c\3\2\2\2\u065a\u0658\3\2\2\2\u065a\u065b\3")
        buf.write("\2\2\2\u065b\u00dd\3\2\2\2\u065c\u065a\3\2\2\2\u065d\u065f")
        buf.write("\5\u00e0q\2\u065e\u0660\5\u00e6t\2\u065f\u065e\3\2\2\2")
        buf.write("\u065f\u0660\3\2\2\2\u0660\u00df\3\2\2\2\u0661\u0664\7")
        buf.write("\u0087\2\2\u0662\u0664\5\u00e2r\2\u0663\u0661\3\2\2\2")
        buf.write("\u0663\u0662\3\2\2\2\u0664\u00e1\3\2\2\2\u0665\u0666\5")
        buf.write("\u00e4s\2\u0666\u0667\7\u0082\2\2\u0667\u0668\7\u0087")
        buf.write("\2\2\u0668\u00e3\3\2\2\2\u0669\u066a\7\u0087\2\2\u066a")
        buf.write("\u00e5\3\2\2\2\u066b\u066c\7V\2\2\u066c\u066d\5\u00e8")
        buf.write("u\2\u066d\u066e\7W\2\2\u066e\u00e7\3\2\2\2\u066f\u0671")
        buf.write("\bu\1\2\u0670\u0672\5\u00eav\2\u0671\u0670\3\2\2\2\u0671")
        buf.write("\u0672\3\2\2\2\u0672\u0677\3\2\2\2\u0673\u0674\f\3\2\2")
        buf.write("\u0674\u0676\5\u00eav\2\u0675\u0673\3\2\2\2\u0676\u0679")
        buf.write("\3\2\2\2\u0677\u0675\3\2\2\2\u0677\u0678\3\2\2\2\u0678")
        buf.write("\u00e9\3\2\2\2\u0679\u0677\3\2\2\2\u067a\u067b\7V\2\2")
        buf.write("\u067b\u067c\5\u00e8u\2\u067c\u067d\7W\2\2\u067d\u068c")
        buf.write("\3\2\2\2\u067e\u067f\7X\2\2\u067f\u0680\5\u00e8u\2\u0680")
        buf.write("\u0681\7Y\2\2\u0681\u068c\3\2\2\2\u0682\u0683\7Z\2\2\u0683")
        buf.write("\u0684\5\u00e8u\2\u0684\u0685\7[\2\2\u0685\u068c\3\2\2")
        buf.write("\2\u0686\u0688\n\2\2\2\u0687\u0686\3\2\2\2\u0688\u0689")
        buf.write("\3\2\2\2\u0689\u0687\3\2\2\2\u0689\u068a\3\2\2\2\u068a")
        buf.write("\u068c\3\2\2\2\u068b\u067a\3\2\2\2\u068b\u067e\3\2\2\2")
        buf.write("\u068b\u0682\3\2\2\2\u068b\u0687\3\2\2\2\u068c\u00eb\3")
        buf.write("\2\2\2\u068d\u068e\bw\1\2\u068e\u068f\5\u00eex\2\u068f")
        buf.write("\u0695\3\2\2\2\u0690\u0691\f\3\2\2\u0691\u0692\7}\2\2")
        buf.write("\u0692\u0694\5\u00eex\2\u0693\u0690\3\2\2\2\u0694\u0697")
        buf.write("\3\2\2\2\u0695\u0693\3\2\2\2\u0695\u0696\3\2\2\2\u0696")
        buf.write("\u00ed\3\2\2\2\u0697\u0695\3\2\2\2\u0698\u069a\5\u00f0")
        buf.write("y\2\u0699\u069b\5\u011a\u008e\2\u069a\u0699\3\2\2\2\u069a")
        buf.write("\u069b\3\2\2\2\u069b\u00ef\3\2\2\2\u069c\u06a2\5\u00f2")
        buf.write("z\2\u069d\u069e\5\u00f4{\2\u069e\u069f\5\u00f6|\2\u069f")
        buf.write("\u06a0\5\u00f8}\2\u06a0\u06a2\3\2\2\2\u06a1\u069c\3\2")
        buf.write("\2\2\u06a1\u069d\3\2\2\2\u06a2\u00f1\3\2\2\2\u06a3\u06a8")
        buf.write("\5\u00f4{\2\u06a4\u06a5\5\u00fa~\2\u06a5\u06a6\5\u00f2")
        buf.write("z\2\u06a6\u06a8\3\2\2\2\u06a7\u06a3\3\2\2\2\u06a7\u06a4")
        buf.write("\3\2\2\2\u06a8\u00f3\3\2\2\2\u06a9\u06aa\b{\1\2\u06aa")
        buf.write("\u06ac\5\u0102\u0082\2\u06ab\u06ad\5\u00d6l\2\u06ac\u06ab")
        buf.write("\3\2\2\2\u06ac\u06ad\3\2\2\2\u06ad\u06b3\3\2\2\2\u06ae")
        buf.write("\u06af\7V\2\2\u06af\u06b0\5\u00f2z\2\u06b0\u06b1\7W\2")
        buf.write("\2\u06b1\u06b3\3\2\2\2\u06b2\u06a9\3\2\2\2\u06b2\u06ae")
        buf.write("\3\2\2\2\u06b3\u06c1\3\2\2\2\u06b4\u06b5\f\5\2\2\u06b5")
        buf.write("\u06c0\5\u00f6|\2\u06b6\u06b7\f\4\2\2\u06b7\u06b9\7X\2")
        buf.write("\2\u06b8\u06ba\5`\61\2\u06b9\u06b8\3\2\2\2\u06b9\u06ba")
        buf.write("\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb\u06bd\7Y\2\2\u06bc")
        buf.write("\u06be\5\u00d6l\2\u06bd\u06bc\3\2\2\2\u06bd\u06be\3\2")
        buf.write("\2\2\u06be\u06c0\3\2\2\2\u06bf\u06b4\3\2\2\2\u06bf\u06b6")
        buf.write("\3\2\2\2\u06c0\u06c3\3\2\2\2\u06c1\u06bf\3\2\2\2\u06c1")
        buf.write("\u06c2\3\2\2\2\u06c2\u00f5\3\2\2\2\u06c3\u06c1\3\2\2\2")
        buf.write("\u06c4\u06c5\7V\2\2\u06c5\u06c6\5\u0110\u0089\2\u06c6")
        buf.write("\u06c8\7W\2\2\u06c7\u06c9\5\u00fc\177\2\u06c8\u06c7\3")
        buf.write("\2\2\2\u06c8\u06c9\3\2\2\2\u06c9\u06cb\3\2\2\2\u06ca\u06cc")
        buf.write("\5\u0100\u0081\2\u06cb\u06ca\3\2\2\2\u06cb\u06cc\3\2\2")
        buf.write("\2\u06cc\u06ce\3\2\2\2\u06cd\u06cf\5\u0180\u00c1\2\u06ce")
        buf.write("\u06cd\3\2\2\2\u06ce\u06cf\3\2\2\2\u06cf\u06d1\3\2\2\2")
        buf.write("\u06d0\u06d2\5\u00d6l\2\u06d1\u06d0\3\2\2\2\u06d1\u06d2")
        buf.write("\3\2\2\2\u06d2\u00f7\3\2\2\2\u06d3\u06d4\7\177\2\2\u06d4")
        buf.write("\u06d6\5\u009cO\2\u06d5\u06d7\5\u0106\u0084\2\u06d6\u06d5")
        buf.write("\3\2\2\2\u06d6\u06d7\3\2\2\2\u06d7\u00f9\3\2\2\2\u06d8")
        buf.write("\u06da\7^\2\2\u06d9\u06db\5\u00d6l\2\u06da\u06d9\3\2\2")
        buf.write("\2\u06da\u06db\3\2\2\2\u06db\u06dd\3\2\2\2\u06dc\u06de")
        buf.write("\5\u00fc\177\2\u06dd\u06dc\3\2\2\2\u06dd\u06de\3\2\2\2")
        buf.write("\u06de\u06f0\3\2\2\2\u06df\u06e1\7b\2\2\u06e0\u06e2\5")
        buf.write("\u00d6l\2\u06e1\u06e0\3\2\2\2\u06e1\u06e2\3\2\2\2\u06e2")
        buf.write("\u06f0\3\2\2\2\u06e3\u06e5\7\5\2\2\u06e4\u06e6\5\u00d6")
        buf.write("l\2\u06e5\u06e4\3\2\2\2\u06e5\u06e6\3\2\2\2\u06e6\u06f0")
        buf.write("\3\2\2\2\u06e7\u06e8\5\f\7\2\u06e8\u06ea\7^\2\2\u06e9")
        buf.write("\u06eb\5\u00d6l\2\u06ea\u06e9\3\2\2\2\u06ea\u06eb\3\2")
        buf.write("\2\2\u06eb\u06ed\3\2\2\2\u06ec\u06ee\5\u00fc\177\2\u06ed")
        buf.write("\u06ec\3\2\2\2\u06ed\u06ee\3\2\2\2\u06ee\u06f0\3\2\2\2")
        buf.write("\u06ef\u06d8\3\2\2\2\u06ef\u06df\3\2\2\2\u06ef\u06e3\3")
        buf.write("\2\2\2\u06ef\u06e7\3\2\2\2\u06f0\u00fb\3\2\2\2\u06f1\u06f3")
        buf.write("\5\u00fe\u0080\2\u06f2\u06f4\5\u00fc\177\2\u06f3\u06f2")
        buf.write("\3\2\2\2\u06f3\u06f4\3\2\2\2\u06f4\u00fd\3\2\2\2\u06f5")
        buf.write("\u06f8\7\27\2\2\u06f6\u06f8\7S\2\2\u06f7\u06f5\3\2\2\2")
        buf.write("\u06f7\u06f6\3\2\2\2\u06f8\u00ff\3\2\2\2\u06f9\u06fc\7")
        buf.write("b\2\2\u06fa\u06fc\7\5\2\2\u06fb\u06f9\3\2\2\2\u06fb\u06fa")
        buf.write("\3\2\2\2\u06fc\u0101\3\2\2\2\u06fd\u06ff\7\u0086\2\2\u06fe")
        buf.write("\u06fd\3\2\2\2\u06fe\u06ff\3\2\2\2\u06ff\u0700\3\2\2\2")
        buf.write("\u0700\u0701\5\6\4\2\u0701\u0103\3\2\2\2\u0702\u0704\5")
        buf.write("\u009aN\2\u0703\u0705\5\u0106\u0084\2\u0704\u0703\3\2")
        buf.write("\2\2\u0704\u0705\3\2\2\2\u0705\u0105\3\2\2\2\u0706\u070f")
        buf.write("\5\u0108\u0085\2\u0707\u0709\5\u010a\u0086\2\u0708\u0707")
        buf.write("\3\2\2\2\u0708\u0709\3\2\2\2\u0709\u070a\3\2\2\2\u070a")
        buf.write("\u070b\5\u00f6|\2\u070b\u070c\5\u00f8}\2\u070c\u070f\3")
        buf.write("\2\2\2\u070d\u070f\5\u010c\u0087\2\u070e\u0706\3\2\2\2")
        buf.write("\u070e\u0708\3\2\2\2\u070e\u070d\3\2\2\2\u070f\u0107\3")
        buf.write("\2\2\2\u0710\u0716\5\u010a\u0086\2\u0711\u0713\5\u00fa")
        buf.write("~\2\u0712\u0714\5\u0108\u0085\2\u0713\u0712\3\2\2\2\u0713")
        buf.write("\u0714\3\2\2\2\u0714\u0716\3\2\2\2\u0715\u0710\3\2\2\2")
        buf.write("\u0715\u0711\3\2\2\2\u0716\u0109\3\2\2\2\u0717\u0718\b")
        buf.write("\u0086\1\2\u0718\u0726\5\u00f6|\2\u0719\u071b\7X\2\2\u071a")
        buf.write("\u071c\5`\61\2\u071b\u071a\3\2\2\2\u071b\u071c\3\2\2\2")
        buf.write("\u071c\u071d\3\2\2\2\u071d\u071f\7Y\2\2\u071e\u0720\5")
        buf.write("\u00d6l\2\u071f\u071e\3\2\2\2\u071f\u0720\3\2\2\2\u0720")
        buf.write("\u0726\3\2\2\2\u0721\u0722\7V\2\2\u0722\u0723\5\u0108")
        buf.write("\u0085\2\u0723\u0724\7W\2\2\u0724\u0726\3\2\2\2\u0725")
        buf.write("\u0717\3\2\2\2\u0725\u0719\3\2\2\2\u0725\u0721\3\2\2\2")
        buf.write("\u0726\u0734\3\2\2\2\u0727\u0728\f\7\2\2\u0728\u0733\5")
        buf.write("\u00f6|\2\u0729\u072a\f\5\2\2\u072a\u072c\7X\2\2\u072b")
        buf.write("\u072d\5`\61\2\u072c\u072b\3\2\2\2\u072c\u072d\3\2\2\2")
        buf.write("\u072d\u072e\3\2\2\2\u072e\u0730\7Y\2\2\u072f\u0731\5")
        buf.write("\u00d6l\2\u0730\u072f\3\2\2\2\u0730\u0731\3\2\2\2\u0731")
        buf.write("\u0733\3\2\2\2\u0732\u0727\3\2\2\2\u0732\u0729\3\2\2\2")
        buf.write("\u0733\u0736\3\2\2\2\u0734\u0732\3\2\2\2\u0734\u0735\3")
        buf.write("\2\2\2\u0735\u010b\3\2\2\2\u0736\u0734\3\2\2\2\u0737\u073c")
        buf.write("\5\u010e\u0088\2\u0738\u0739\5\u00fa~\2\u0739\u073a\5")
        buf.write("\u010c\u0087\2\u073a\u073c\3\2\2\2\u073b\u0737\3\2\2\2")
        buf.write("\u073b\u0738\3\2\2\2\u073c\u010d\3\2\2\2\u073d\u073e\b")
        buf.write("\u0088\1\2\u073e\u073f\7\u0086\2\2\u073f\u074d\3\2\2\2")
        buf.write("\u0740\u0741\f\5\2\2\u0741\u074c\5\u00f6|\2\u0742\u0743")
        buf.write("\f\4\2\2\u0743\u0745\7X\2\2\u0744\u0746\5`\61\2\u0745")
        buf.write("\u0744\3\2\2\2\u0745\u0746\3\2\2\2\u0746\u0747\3\2\2\2")
        buf.write("\u0747\u0749\7Y\2\2\u0748\u074a\5\u00d6l\2\u0749\u0748")
        buf.write("\3\2\2\2\u0749\u074a\3\2\2\2\u074a\u074c\3\2\2\2\u074b")
        buf.write("\u0740\3\2\2\2\u074b\u0742\3\2\2\2\u074c\u074f\3\2\2\2")
        buf.write("\u074d\u074b\3\2\2\2\u074d\u074e\3\2\2\2\u074e\u010f\3")
        buf.write("\2\2\2\u074f\u074d\3\2\2\2\u0750\u0752\5\u0112\u008a\2")
        buf.write("\u0751\u0750\3\2\2\2\u0751\u0752\3\2\2\2\u0752\u0754\3")
        buf.write("\2\2\2\u0753\u0755\7\u0086\2\2\u0754\u0753\3\2\2\2\u0754")
        buf.write("\u0755\3\2\2\2\u0755\u075b\3\2\2\2\u0756\u0757\5\u0112")
        buf.write("\u008a\2\u0757\u0758\7}\2\2\u0758\u0759\7\u0086\2\2\u0759")
        buf.write("\u075b\3\2\2\2\u075a\u0751\3\2\2\2\u075a\u0756\3\2\2\2")
        buf.write("\u075b\u0111\3\2\2\2\u075c\u075d\b\u008a\1\2\u075d\u075e")
        buf.write("\5\u0114\u008b\2\u075e\u0764\3\2\2\2\u075f\u0760\f\3\2")
        buf.write("\2\u0760\u0761\7}\2\2\u0761\u0763\5\u0114\u008b\2\u0762")
        buf.write("\u075f\3\2\2\2\u0763\u0766\3\2\2\2\u0764\u0762\3\2\2\2")
        buf.write("\u0764\u0765\3\2\2\2\u0765\u0113\3\2\2\2\u0766\u0764\3")
        buf.write("\2\2\2\u0767\u0769\5\u00d6l\2\u0768\u0767\3\2\2\2\u0768")
        buf.write("\u0769\3\2\2\2\u0769\u076a\3\2\2\2\u076a\u076b\5\u008e")
        buf.write("H\2\u076b\u076c\5\u00f0y\2\u076c\u0787\3\2\2\2\u076d\u076f")
        buf.write("\5\u00d6l\2\u076e\u076d\3\2\2\2\u076e\u076f\3\2\2\2\u076f")
        buf.write("\u0770\3\2\2\2\u0770\u0771\5\u008eH\2\u0771\u0772\5\u00f0")
        buf.write("y\2\u0772\u0773\7f\2\2\u0773\u0774\5\u011e\u0090\2\u0774")
        buf.write("\u0787\3\2\2\2\u0775\u0777\5\u00d6l\2\u0776\u0775\3\2")
        buf.write("\2\2\u0776\u0777\3\2\2\2\u0777\u0778\3\2\2\2\u0778\u077a")
        buf.write("\5\u008eH\2\u0779\u077b\5\u0106\u0084\2\u077a\u0779\3")
        buf.write("\2\2\2\u077a\u077b\3\2\2\2\u077b\u0787\3\2\2\2\u077c\u077e")
        buf.write("\5\u00d6l\2\u077d\u077c\3\2\2\2\u077d\u077e\3\2\2\2\u077e")
        buf.write("\u077f\3\2\2\2\u077f\u0781\5\u008eH\2\u0780\u0782\5\u0106")
        buf.write("\u0084\2\u0781\u0780\3\2\2\2\u0781\u0782\3\2\2\2\u0782")
        buf.write("\u0783\3\2\2\2\u0783\u0784\7f\2\2\u0784\u0785\5\u011e")
        buf.write("\u0090\2\u0785\u0787\3\2\2\2\u0786\u0768\3\2\2\2\u0786")
        buf.write("\u076e\3\2\2\2\u0786\u0776\3\2\2\2\u0786\u077d\3\2\2\2")
        buf.write("\u0787\u0115\3\2\2\2\u0788\u078a\5\u00d6l\2\u0789\u0788")
        buf.write("\3\2\2\2\u0789\u078a\3\2\2\2\u078a\u078c\3\2\2\2\u078b")
        buf.write("\u078d\5\u008eH\2\u078c\u078b\3\2\2\2\u078c\u078d\3\2")
        buf.write("\2\2\u078d\u078e\3\2\2\2\u078e\u0790\5\u00f0y\2\u078f")
        buf.write("\u0791\5\u0138\u009d\2\u0790\u078f\3\2\2\2\u0790\u0791")
        buf.write("\3\2\2\2\u0791\u0792\3\2\2\2\u0792\u0793\5\u0118\u008d")
        buf.write("\2\u0793\u0117\3\2\2\2\u0794\u0796\5\u0150\u00a9\2\u0795")
        buf.write("\u0794\3\2\2\2\u0795\u0796\3\2\2\2\u0796\u0797\3\2\2\2")
        buf.write("\u0797\u07a0\5h\65\2\u0798\u07a0\5\u0176\u00bc\2\u0799")
        buf.write("\u079a\7f\2\2\u079a\u079b\7\34\2\2\u079b\u07a0\7\u0083")
        buf.write("\2\2\u079c\u079d\7f\2\2\u079d\u079e\7\35\2\2\u079e\u07a0")
        buf.write("\7\u0083\2\2\u079f\u0795\3\2\2\2\u079f\u0798\3\2\2\2\u079f")
        buf.write("\u0799\3\2\2\2\u079f\u079c\3\2\2\2\u07a0\u0119\3\2\2\2")
        buf.write("\u07a1\u07a7\5\u011c\u008f\2\u07a2\u07a3\7V\2\2\u07a3")
        buf.write("\u07a4\5&\24\2\u07a4\u07a5\7W\2\2\u07a5\u07a7\3\2\2\2")
        buf.write("\u07a6\u07a1\3\2\2\2\u07a6\u07a2\3\2\2\2\u07a7\u011b\3")
        buf.write("\2\2\2\u07a8\u07a9\7f\2\2\u07a9\u07ac\5\u011e\u0090\2")
        buf.write("\u07aa\u07ac\5\u0122\u0092\2\u07ab\u07a8\3\2\2\2\u07ab")
        buf.write("\u07aa\3\2\2\2\u07ac\u011d\3\2\2\2\u07ad\u07b0\5Z.\2\u07ae")
        buf.write("\u07b0\5\u0122\u0092\2\u07af\u07ad\3\2\2\2\u07af\u07ae")
        buf.write("\3\2\2\2\u07b0\u011f\3\2\2\2\u07b1\u07b2\b\u0091\1\2\u07b2")
        buf.write("\u07b4\5\u011e\u0090\2\u07b3\u07b5\7\u0086\2\2\u07b4\u07b3")
        buf.write("\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5\u07be\3\2\2\2\u07b6")
        buf.write("\u07b7\f\3\2\2\u07b7\u07b8\7}\2\2\u07b8\u07ba\5\u011e")
        buf.write("\u0090\2\u07b9\u07bb\7\u0086\2\2\u07ba\u07b9\3\2\2\2\u07ba")
        buf.write("\u07bb\3\2\2\2\u07bb\u07bd\3\2\2\2\u07bc\u07b6\3\2\2\2")
        buf.write("\u07bd\u07c0\3\2\2\2\u07be\u07bc\3\2\2\2\u07be\u07bf\3")
        buf.write("\2\2\2\u07bf\u0121\3\2\2\2\u07c0\u07be\3\2\2\2\u07c1\u07c2")
        buf.write("\7Z\2\2\u07c2\u07c4\5\u0120\u0091\2\u07c3\u07c5\7}\2\2")
        buf.write("\u07c4\u07c3\3\2\2\2\u07c4\u07c5\3\2\2\2\u07c5\u07c6\3")
        buf.write("\2\2\2\u07c6\u07c7\7[\2\2\u07c7\u07cb\3\2\2\2\u07c8\u07c9")
        buf.write("\7Z\2\2\u07c9\u07cb\7[\2\2\u07ca\u07c1\3\2\2\2\u07ca\u07c8")
        buf.write("\3\2\2\2\u07cb\u0123\3\2\2\2\u07cc\u07cf\7\u0087\2\2\u07cd")
        buf.write("\u07cf\5\u0164\u00b3\2\u07ce\u07cc\3\2\2\2\u07ce\u07cd")
        buf.write("\3\2\2\2\u07cf\u0125\3\2\2\2\u07d0\u07d1\5\u0128\u0095")
        buf.write("\2\u07d1\u07d3\7Z\2\2\u07d2\u07d4\5\u0130\u0099\2\u07d3")
        buf.write("\u07d2\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07d5\3\2\2\2")
        buf.write("\u07d5\u07d6\7[\2\2\u07d6\u0127\3\2\2\2\u07d7\u07d9\5")
        buf.write("\u012e\u0098\2\u07d8\u07da\5\u00d6l\2\u07d9\u07d8\3\2")
        buf.write("\2\2\u07d9\u07da\3\2\2\2\u07da\u07db\3\2\2\2\u07db\u07dd")
        buf.write("\5\u012a\u0096\2\u07dc\u07de\5\u012c\u0097\2\u07dd\u07dc")
        buf.write("\3\2\2\2\u07dd\u07de\3\2\2\2\u07de\u07e0\3\2\2\2\u07df")
        buf.write("\u07e1\5\u013e\u00a0\2\u07e0\u07df\3\2\2\2\u07e0\u07e1")
        buf.write("\3\2\2\2\u07e1\u07ea\3\2\2\2\u07e2\u07e4\5\u012e\u0098")
        buf.write("\2\u07e3\u07e5\5\u00d6l\2\u07e4\u07e3\3\2\2\2\u07e4\u07e5")
        buf.write("\3\2\2\2\u07e5\u07e7\3\2\2\2\u07e6\u07e8\5\u013e\u00a0")
        buf.write("\2\u07e7\u07e6\3\2\2\2\u07e7\u07e8\3\2\2\2\u07e8\u07ea")
        buf.write("\3\2\2\2\u07e9\u07d7\3\2\2\2\u07e9\u07e2\3\2\2\2\u07ea")
        buf.write("\u0129\3\2\2\2\u07eb\u07ed\5\f\7\2\u07ec\u07eb\3\2\2\2")
        buf.write("\u07ec\u07ed\3\2\2\2\u07ed\u07ee\3\2\2\2\u07ee\u07ef\5")
        buf.write("\u0124\u0093\2\u07ef\u012b\3\2\2\2\u07f0\u07f1\7\'\2\2")
        buf.write("\u07f1\u012d\3\2\2\2\u07f2\u07f6\7\26\2\2\u07f3\u07f6")
        buf.write("\7C\2\2\u07f4\u07f6\7N\2\2\u07f5\u07f2\3\2\2\2\u07f5\u07f3")
        buf.write("\3\2\2\2\u07f5\u07f4\3\2\2\2\u07f6\u012f\3\2\2\2\u07f7")
        buf.write("\u07f9\5\u0132\u009a\2\u07f8\u07fa\5\u0130\u0099\2\u07f9")
        buf.write("\u07f8\3\2\2\2\u07f9\u07fa\3\2\2\2\u07fa\u0801\3\2\2\2")
        buf.write("\u07fb\u07fc\5\u0148\u00a5\2\u07fc\u07fe\7\u0081\2\2\u07fd")
        buf.write("\u07ff\5\u0130\u0099\2\u07fe\u07fd\3\2\2\2\u07fe\u07ff")
        buf.write("\3\2\2\2\u07ff\u0801\3\2\2\2\u0800\u07f7\3\2\2\2\u0800")
        buf.write("\u07fb\3\2\2\2\u0801\u0131\3\2\2\2\u0802\u0804\5\u00d6")
        buf.write("l\2\u0803\u0802\3\2\2\2\u0803\u0804\3\2\2\2\u0804\u0806")
        buf.write("\3\2\2\2\u0805\u0807\5\u008eH\2\u0806\u0805\3\2\2\2\u0806")
        buf.write("\u0807\3\2\2\2\u0807\u0809\3\2\2\2\u0808\u080a\5\u0134")
        buf.write("\u009b\2\u0809\u0808\3\2\2\2\u0809\u080a\3\2\2\2\u080a")
        buf.write("\u080b\3\2\2\2\u080b\u0813\7\u0083\2\2\u080c\u0813\5\u0116")
        buf.write("\u008c\2\u080d\u0813\5\u00ceh\2\u080e\u0813\5\u0086D\2")
        buf.write("\u080f\u0813\5\u015c\u00af\2\u0810\u0813\5\u0082B\2\u0811")
        buf.write("\u0813\5\u0088E\2\u0812\u0803\3\2\2\2\u0812\u080c\3\2")
        buf.write("\2\2\u0812\u080d\3\2\2\2\u0812\u080e\3\2\2\2\u0812\u080f")
        buf.write("\3\2\2\2\u0812\u0810\3\2\2\2\u0812\u0811\3\2\2\2\u0813")
        buf.write("\u0133\3\2\2\2\u0814\u0815\b\u009b\1\2\u0815\u0816\5\u0136")
        buf.write("\u009c\2\u0816\u081c\3\2\2\2\u0817\u0818\f\3\2\2\u0818")
        buf.write("\u0819\7}\2\2\u0819\u081b\5\u0136\u009c\2\u081a\u0817")
        buf.write("\3\2\2\2\u081b\u081e\3\2\2\2\u081c\u081a\3\2\2\2\u081c")
        buf.write("\u081d\3\2\2\2\u081d\u0135\3\2\2\2\u081e\u081c\3\2\2\2")
        buf.write("\u081f\u0821\5\u00f0y\2\u0820\u0822\5\u0138\u009d\2\u0821")
        buf.write("\u0820\3\2\2\2\u0821\u0822\3\2\2\2\u0822\u0824\3\2\2\2")
        buf.write("\u0823\u0825\5\u013c\u009f\2\u0824\u0823\3\2\2\2\u0824")
        buf.write("\u0825\3\2\2\2\u0825\u0833\3\2\2\2\u0826\u0828\5\u00f0")
        buf.write("y\2\u0827\u0829\5\u011c\u008f\2\u0828\u0827\3\2\2\2\u0828")
        buf.write("\u0829\3\2\2\2\u0829\u0833\3\2\2\2\u082a\u082c\7\u0087")
        buf.write("\2\2\u082b\u082a\3\2\2\2\u082b\u082c\3\2\2\2\u082c\u082e")
        buf.write("\3\2\2\2\u082d\u082f\5\u00d6l\2\u082e\u082d\3\2\2\2\u082e")
        buf.write("\u082f\3\2\2\2\u082f\u0830\3\2\2\2\u0830\u0831\7\u0081")
        buf.write("\2\2\u0831\u0833\5`\61\2\u0832\u081f\3\2\2\2\u0832\u0826")
        buf.write("\3\2\2\2\u0832\u082b\3\2\2\2\u0833\u0137\3\2\2\2\u0834")
        buf.write("\u0835\b\u009d\1\2\u0835\u0836\5\u013a\u009e\2\u0836\u083b")
        buf.write("\3\2\2\2\u0837\u0838\f\3\2\2\u0838\u083a\5\u013a\u009e")
        buf.write("\2\u0839\u0837\3\2\2\2\u083a\u083d\3\2\2\2\u083b\u0839")
        buf.write("\3\2\2\2\u083b\u083c\3\2\2\2\u083c\u0139\3\2\2\2\u083d")
        buf.write("\u083b\3\2\2\2\u083e\u0841\7\66\2\2\u083f\u0841\7\'\2")
        buf.write("\2\u0840\u083e\3\2\2\2\u0840\u083f\3\2\2\2\u0841\u013b")
        buf.write("\3\2\2\2\u0842\u0843\7f\2\2\u0843\u0844\7\u008a\2\2\u0844")
        buf.write("\u013d\3\2\2\2\u0845\u0846\7\u0081\2\2\u0846\u0847\5\u0140")
        buf.write("\u00a1\2\u0847\u013f\3\2\2\2\u0848\u0849\b\u00a1\1\2\u0849")
        buf.write("\u084b\5\u0142\u00a2\2\u084a\u084c\7\u0086\2\2\u084b\u084a")
        buf.write("\3\2\2\2\u084b\u084c\3\2\2\2\u084c\u0855\3\2\2\2\u084d")
        buf.write("\u084e\f\3\2\2\u084e\u084f\7}\2\2\u084f\u0851\5\u0142")
        buf.write("\u00a2\2\u0850\u0852\7\u0086\2\2\u0851\u0850\3\2\2\2\u0851")
        buf.write("\u0852\3\2\2\2\u0852\u0854\3\2\2\2\u0853\u084d\3\2\2\2")
        buf.write("\u0854\u0857\3\2\2\2\u0855\u0853\3\2\2\2\u0855\u0856\3")
        buf.write("\2\2\2\u0856\u0141\3\2\2\2\u0857\u0855\3\2\2\2\u0858\u085a")
        buf.write("\5\u00d6l\2\u0859\u0858\3\2\2\2\u0859\u085a\3\2\2\2\u085a")
        buf.write("\u085b\3\2\2\2\u085b\u086e\5\u0146\u00a4\2\u085c\u085e")
        buf.write("\5\u00d6l\2\u085d\u085c\3\2\2\2\u085d\u085e\3\2\2\2\u085e")
        buf.write("\u085f\3\2\2\2\u085f\u0861\7Q\2\2\u0860\u0862\5\u0148")
        buf.write("\u00a5\2\u0861\u0860\3\2\2\2\u0861\u0862\3\2\2\2\u0862")
        buf.write("\u0863\3\2\2\2\u0863\u086e\5\u0146\u00a4\2\u0864\u0866")
        buf.write("\5\u00d6l\2\u0865\u0864\3\2\2\2\u0865\u0866\3\2\2\2\u0866")
        buf.write("\u0867\3\2\2\2\u0867\u0869\5\u0148\u00a5\2\u0868\u086a")
        buf.write("\7Q\2\2\u0869\u0868\3\2\2\2\u0869\u086a\3\2\2\2\u086a")
        buf.write("\u086b\3\2\2\2\u086b\u086c\5\u0146\u00a4\2\u086c\u086e")
        buf.write("\3\2\2\2\u086d\u0859\3\2\2\2\u086d\u085d\3\2\2\2\u086d")
        buf.write("\u0865\3\2\2\2\u086e\u0143\3\2\2\2\u086f\u0871\5\f\7\2")
        buf.write("\u0870\u086f\3\2\2\2\u0870\u0871\3\2\2\2\u0871\u0872\3")
        buf.write("\2\2\2\u0872\u0875\5\u0124\u0093\2\u0873\u0875\5\u00a2")
        buf.write("R\2\u0874\u0870\3\2\2\2\u0874\u0873\3\2\2\2\u0875\u0145")
        buf.write("\3\2\2\2\u0876\u0877\5\u0144\u00a3\2\u0877\u0147\3\2\2")
        buf.write("\2\u0878\u087c\7\67\2\2\u0879\u087c\78\2\2\u087a\u087c")
        buf.write("\79\2\2\u087b\u0878\3\2\2\2\u087b\u0879\3\2\2\2\u087b")
        buf.write("\u087a\3\2\2\2\u087c\u0149\3\2\2\2\u087d\u087e\7\65\2")
        buf.write("\2\u087e\u087f\5\u014c\u00a7\2\u087f\u014b\3\2\2\2\u0880")
        buf.write("\u0882\5\u009aN\2\u0881\u0883\5\u014e\u00a8\2\u0882\u0881")
        buf.write("\3\2\2\2\u0882\u0883\3\2\2\2\u0883\u014d\3\2\2\2\u0884")
        buf.write("\u0886\5\u00fa~\2\u0885\u0887\5\u014e\u00a8\2\u0886\u0885")
        buf.write("\3\2\2\2\u0886\u0887\3\2\2\2\u0887\u014f\3\2\2\2\u0888")
        buf.write("\u0889\7\u0081\2\2\u0889\u088a\5\u0152\u00aa\2\u088a\u0151")
        buf.write("\3\2\2\2\u088b\u088d\5\u0154\u00ab\2\u088c\u088e\7\u0086")
        buf.write("\2\2\u088d\u088c\3\2\2\2\u088d\u088e\3\2\2\2\u088e\u0897")
        buf.write("\3\2\2\2\u088f\u0891\5\u0154\u00ab\2\u0890\u0892\7\u0086")
        buf.write("\2\2\u0891\u0890\3\2\2\2\u0891\u0892\3\2\2\2\u0892\u0893")
        buf.write("\3\2\2\2\u0893\u0894\7}\2\2\u0894\u0895\5\u0152\u00aa")
        buf.write("\2\u0895\u0897\3\2\2\2\u0896\u088b\3\2\2\2\u0896\u088f")
        buf.write("\3\2\2\2\u0897\u0153\3\2\2\2\u0898\u0899\5\u0156\u00ac")
        buf.write("\2\u0899\u089b\7V\2\2\u089a\u089c\5&\24\2\u089b\u089a")
        buf.write("\3\2\2\2\u089b\u089c\3\2\2\2\u089c\u089d\3\2\2\2\u089d")
        buf.write("\u089e\7W\2\2\u089e\u08a3\3\2\2\2\u089f\u08a0\5\u0156")
        buf.write("\u00ac\2\u08a0\u08a1\5\u0122\u0092\2\u08a1\u08a3\3\2\2")
        buf.write("\2\u08a2\u0898\3\2\2\2\u08a2\u089f\3\2\2\2\u08a3\u0155")
        buf.write("\3\2\2\2\u08a4\u08a7\5\u0144\u00a3\2\u08a5\u08a7\7\u0087")
        buf.write("\2\2\u08a6\u08a4\3\2\2\2\u08a6\u08a5\3\2\2\2\u08a7\u0157")
        buf.write("\3\2\2\2\u08a8\u08a9\7\65\2\2\u08a9\u08aa\5\u0188\u00c5")
        buf.write("\2\u08aa\u0159\3\2\2\2\u08ab\u08ac\7\65\2\2\u08ac\u08ad")
        buf.write("\7\u0090\2\2\u08ad\u08b1\7\u0087\2\2\u08ae\u08af\7\65")
        buf.write("\2\2\u08af\u08b1\7\u0093\2\2\u08b0\u08ab\3\2\2\2\u08b0")
        buf.write("\u08ae\3\2\2\2\u08b1\u015b\3\2\2\2\u08b2\u08b3\7E\2\2")
        buf.write("\u08b3\u08b4\7g\2\2\u08b4\u08b5\5\u015e\u00b0\2\u08b5")
        buf.write("\u08b6\7h\2\2\u08b6\u08b7\5~@\2\u08b7\u015d\3\2\2\2\u08b8")
        buf.write("\u08b9\b\u00b0\1\2\u08b9\u08ba\5\u0160\u00b1\2\u08ba\u08c0")
        buf.write("\3\2\2\2\u08bb\u08bc\f\3\2\2\u08bc\u08bd\7}\2\2\u08bd")
        buf.write("\u08bf\5\u0160\u00b1\2\u08be\u08bb\3\2\2\2\u08bf\u08c2")
        buf.write("\3\2\2\2\u08c0\u08be\3\2\2\2\u08c0\u08c1\3\2\2\2\u08c1")
        buf.write("\u015f\3\2\2\2\u08c2\u08c0\3\2\2\2\u08c3\u08c6\5\u0162")
        buf.write("\u00b2\2\u08c4\u08c6\5\u0114\u008b\2\u08c5\u08c3\3\2\2")
        buf.write("\2\u08c5\u08c4\3\2\2\2\u08c6\u0161\3\2\2\2\u08c7\u08c9")
        buf.write("\7\26\2\2\u08c8\u08ca\7\u0086\2\2\u08c9\u08c8\3\2\2\2")
        buf.write("\u08c9\u08ca\3\2\2\2\u08ca\u08cc\3\2\2\2\u08cb\u08cd\7")
        buf.write("\u0087\2\2\u08cc\u08cb\3\2\2\2\u08cc\u08cd\3\2\2\2\u08cd")
        buf.write("\u08f8\3\2\2\2\u08ce\u08d0\7\26\2\2\u08cf\u08d1\7\u0087")
        buf.write("\2\2\u08d0\u08cf\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1\u08d2")
        buf.write("\3\2\2\2\u08d2\u08d3\7f\2\2\u08d3\u08f8\5\u0104\u0083")
        buf.write("\2\u08d4\u08d6\7M\2\2\u08d5\u08d7\7\u0086\2\2\u08d6\u08d5")
        buf.write("\3\2\2\2\u08d6\u08d7\3\2\2\2\u08d7\u08d9\3\2\2\2\u08d8")
        buf.write("\u08da\7\u0087\2\2\u08d9\u08d8\3\2\2\2\u08d9\u08da\3\2")
        buf.write("\2\2\u08da\u08f8\3\2\2\2\u08db\u08dd\7M\2\2\u08dc\u08de")
        buf.write("\7\u0087\2\2\u08dd\u08dc\3\2\2\2\u08dd\u08de\3\2\2\2\u08de")
        buf.write("\u08df\3\2\2\2\u08df\u08e0\7f\2\2\u08e0\u08f8\5\u0104")
        buf.write("\u0083\2\u08e1\u08e2\7E\2\2\u08e2\u08e3\7g\2\2\u08e3\u08e4")
        buf.write("\5\u015e\u00b0\2\u08e4\u08e5\7h\2\2\u08e5\u08e7\7\26\2")
        buf.write("\2\u08e6\u08e8\7\u0086\2\2\u08e7\u08e6\3\2\2\2\u08e7\u08e8")
        buf.write("\3\2\2\2\u08e8\u08ea\3\2\2\2\u08e9\u08eb\7\u0087\2\2\u08ea")
        buf.write("\u08e9\3\2\2\2\u08ea\u08eb\3\2\2\2\u08eb\u08f8\3\2\2\2")
        buf.write("\u08ec\u08ed\7E\2\2\u08ed\u08ee\7g\2\2\u08ee\u08ef\5\u015e")
        buf.write("\u00b0\2\u08ef\u08f0\7h\2\2\u08f0\u08f2\7\26\2\2\u08f1")
        buf.write("\u08f3\7\u0087\2\2\u08f2\u08f1\3\2\2\2\u08f2\u08f3\3\2")
        buf.write("\2\2\u08f3\u08f4\3\2\2\2\u08f4\u08f5\7f\2\2\u08f5\u08f6")
        buf.write("\5\6\4\2\u08f6\u08f8\3\2\2\2\u08f7\u08c7\3\2\2\2\u08f7")
        buf.write("\u08ce\3\2\2\2\u08f7\u08d4\3\2\2\2\u08f7\u08db\3\2\2\2")
        buf.write("\u08f7\u08e1\3\2\2\2\u08f7\u08ec\3\2\2\2\u08f8\u0163\3")
        buf.write("\2\2\2\u08f9\u08fa\5\u0168\u00b5\2\u08fa\u08fc\7g\2\2")
        buf.write("\u08fb\u08fd\5\u016a\u00b6\2\u08fc\u08fb\3\2\2\2\u08fc")
        buf.write("\u08fd\3\2\2\2\u08fd\u08fe\3\2\2\2\u08fe\u08ff\7h\2\2")
        buf.write("\u08ff\u0165\3\2\2\2\u0900\u0910\5\u0164\u00b3\2\u0901")
        buf.write("\u0902\5\u0158\u00ad\2\u0902\u0904\7g\2\2\u0903\u0905")
        buf.write("\5\u016a\u00b6\2\u0904\u0903\3\2\2\2\u0904\u0905\3\2\2")
        buf.write("\2\u0905\u0906\3\2\2\2\u0906\u0907\7h\2\2\u0907\u0910")
        buf.write("\3\2\2\2\u0908\u0909\5\u015a\u00ae\2\u0909\u090b\7g\2")
        buf.write("\2\u090a\u090c\5\u016a\u00b6\2\u090b\u090a\3\2\2\2\u090b")
        buf.write("\u090c\3\2\2\2\u090c\u090d\3\2\2\2\u090d\u090e\7h\2\2")
        buf.write("\u090e\u0910\3\2\2\2\u090f\u0900\3\2\2\2\u090f\u0901\3")
        buf.write("\2\2\2\u090f\u0908\3\2\2\2\u0910\u0167\3\2\2\2\u0911\u0912")
        buf.write("\7\u0087\2\2\u0912\u0169\3\2\2\2\u0913\u0914\b\u00b6\1")
        buf.write("\2\u0914\u0916\5\u016c\u00b7\2\u0915\u0917\7\u0086\2\2")
        buf.write("\u0916\u0915\3\2\2\2\u0916\u0917\3\2\2\2\u0917\u0920\3")
        buf.write("\2\2\2\u0918\u0919\f\3\2\2\u0919\u091a\7}\2\2\u091a\u091c")
        buf.write("\5\u016c\u00b7\2\u091b\u091d\7\u0086\2\2\u091c\u091b\3")
        buf.write("\2\2\2\u091c\u091d\3\2\2\2\u091d\u091f\3\2\2\2\u091e\u0918")
        buf.write("\3\2\2\2\u091f\u0922\3\2\2\2\u0920\u091e\3\2\2\2\u0920")
        buf.write("\u0921\3\2\2\2\u0921\u016b\3\2\2\2\u0922\u0920\3\2\2\2")
        buf.write("\u0923\u0927\5\u0104\u0083\2\u0924\u0927\5`\61\2\u0925")
        buf.write("\u0927\5\6\4\2\u0926\u0923\3\2\2\2\u0926\u0924\3\2\2\2")
        buf.write("\u0926\u0925\3\2\2\2\u0927\u016d\3\2\2\2\u0928\u0929\7")
        buf.write("M\2\2\u0929\u092a\5\f\7\2\u092a\u092b\7\u0087\2\2\u092b")
        buf.write("\u0934\3\2\2\2\u092c\u092d\7M\2\2\u092d\u092f\5\f\7\2")
        buf.write("\u092e\u0930\7E\2\2\u092f\u092e\3\2\2\2\u092f\u0930\3")
        buf.write("\2\2\2\u0930\u0931\3\2\2\2\u0931\u0932\5\u0164\u00b3\2")
        buf.write("\u0932\u0934\3\2\2\2\u0933\u0928\3\2\2\2\u0933\u092c\3")
        buf.write("\2\2\2\u0934\u016f\3\2\2\2\u0935\u0937\7%\2\2\u0936\u0935")
        buf.write("\3\2\2\2\u0936\u0937\3\2\2\2\u0937\u0938\3\2\2\2\u0938")
        buf.write("\u0939\7E\2\2\u0939\u093a\5~@\2\u093a\u0171\3\2\2\2\u093b")
        buf.write("\u093c\7E\2\2\u093c\u093d\7g\2\2\u093d\u093e\7h\2\2\u093e")
        buf.write("\u093f\5~@\2\u093f\u0173\3\2\2\2\u0940\u0941\7J\2\2\u0941")
        buf.write("\u0942\5h\65\2\u0942\u0943\5\u0178\u00bd\2\u0943\u0175")
        buf.write("\3\2\2\2\u0944\u0946\7J\2\2\u0945\u0947\5\u0150\u00a9")
        buf.write("\2\u0946\u0945\3\2\2\2\u0946\u0947\3\2\2\2\u0947\u0948")
        buf.write("\3\2\2\2\u0948\u0949\5h\65\2\u0949\u094a\5\u0178\u00bd")
        buf.write("\2\u094a\u0177\3\2\2\2\u094b\u094d\5\u017a\u00be\2\u094c")
        buf.write("\u094e\5\u0178\u00bd\2\u094d\u094c\3\2\2\2\u094d\u094e")
        buf.write("\3\2\2\2\u094e\u0179\3\2\2\2\u094f\u0950\7\22\2\2\u0950")
        buf.write("\u0951\7V\2\2\u0951\u0952\5\u017c\u00bf\2\u0952\u0953")
        buf.write("\7W\2\2\u0953\u0954\5h\65\2\u0954\u017b\3\2\2\2\u0955")
        buf.write("\u0957\5\u00d6l\2\u0956\u0955\3\2\2\2\u0956\u0957\3\2")
        buf.write("\2\2\u0957\u0958\3\2\2\2\u0958\u0959\5\u009aN\2\u0959")
        buf.write("\u095a\5\u00f0y\2\u095a\u0964\3\2\2\2\u095b\u095d\5\u00d6")
        buf.write("l\2\u095c\u095b\3\2\2\2\u095c\u095d\3\2\2\2\u095d\u095e")
        buf.write("\3\2\2\2\u095e\u0960\5\u009aN\2\u095f\u0961\5\u0106\u0084")
        buf.write("\2\u0960\u095f\3\2\2\2\u0960\u0961\3\2\2\2\u0961\u0964")
        buf.write("\3\2\2\2\u0962\u0964\7\u0086\2\2\u0963\u0956\3\2\2\2\u0963")
        buf.write("\u095c\3\2\2\2\u0963\u0962\3\2\2\2\u0964\u017d\3\2\2\2")
        buf.write("\u0965\u0967\7H\2\2\u0966\u0968\5Z.\2\u0967\u0966\3\2")
        buf.write("\2\2\u0967\u0968\3\2\2\2\u0968\u017f\3\2\2\2\u0969\u096c")
        buf.write("\5\u0182\u00c2\2\u096a\u096c\5\u0186\u00c4\2\u096b\u0969")
        buf.write("\3\2\2\2\u096b\u096a\3\2\2\2\u096c\u0181\3\2\2\2\u096d")
        buf.write("\u096e\7H\2\2\u096e\u0970\7V\2\2\u096f\u0971\5\u0184\u00c3")
        buf.write("\2\u0970\u096f\3\2\2\2\u0970\u0971\3\2\2\2\u0971\u0972")
        buf.write("\3\2\2\2\u0972\u0973\7W\2\2\u0973\u0183\3\2\2\2\u0974")
        buf.write("\u0975\b\u00c3\1\2\u0975\u0977\5\u0104\u0083\2\u0976\u0978")
        buf.write("\7\u0086\2\2\u0977\u0976\3\2\2\2\u0977\u0978\3\2\2\2\u0978")
        buf.write("\u0981\3\2\2\2\u0979\u097a\f\3\2\2\u097a\u097b\7}\2\2")
        buf.write("\u097b\u097d\5\u0104\u0083\2\u097c\u097e\7\u0086\2\2\u097d")
        buf.write("\u097c\3\2\2\2\u097d\u097e\3\2\2\2\u097e\u0980\3\2\2\2")
        buf.write("\u097f\u0979\3\2\2\2\u0980\u0983\3\2\2\2\u0981\u097f\3")
        buf.write("\2\2\2\u0981\u0982\3\2\2\2\u0982\u0185\3\2\2\2\u0983\u0981")
        buf.write("\3\2\2\2\u0984\u0985\7\63\2\2\u0985\u0986\7V\2\2\u0986")
        buf.write("\u0987\5`\61\2\u0987\u0988\7W\2\2\u0988\u098b\3\2\2\2")
        buf.write("\u0989\u098b\7\63\2\2\u098a\u0984\3\2\2\2\u098a\u0989")
        buf.write("\3\2\2\2\u098b\u0187\3\2\2\2\u098c\u09c0\7\62\2\2\u098d")
        buf.write("\u09c0\7\35\2\2\u098e\u098f\7\62\2\2\u098f\u0990\7X\2")
        buf.write("\2\u0990\u09c0\7Y\2\2\u0991\u0992\7\35\2\2\u0992\u0993")
        buf.write("\7X\2\2\u0993\u09c0\7Y\2\2\u0994\u09c0\7\\\2\2\u0995\u09c0")
        buf.write("\7]\2\2\u0996\u09c0\7^\2\2\u0997\u09c0\7_\2\2\u0998\u09c0")
        buf.write("\7`\2\2\u0999\u09c0\7a\2\2\u099a\u09c0\7b\2\2\u099b\u09c0")
        buf.write("\7c\2\2\u099c\u09c0\7d\2\2\u099d\u09c0\7\3\2\2\u099e\u09c0")
        buf.write("\7\4\2\2\u099f\u09c0\7f\2\2\u09a0\u09c0\7g\2\2\u09a1\u09c0")
        buf.write("\7h\2\2\u09a2\u09c0\7i\2\2\u09a3\u09c0\7j\2\2\u09a4\u09c0")
        buf.write("\7k\2\2\u09a5\u09c0\7l\2\2\u09a6\u09c0\7m\2\2\u09a7\u09c0")
        buf.write("\7n\2\2\u09a8\u09c0\7o\2\2\u09a9\u09c0\7p\2\2\u09aa\u09c0")
        buf.write("\7q\2\2\u09ab\u09c0\7r\2\2\u09ac\u09c0\7t\2\2\u09ad\u09c0")
        buf.write("\7s\2\2\u09ae\u09c0\7u\2\2\u09af\u09c0\7v\2\2\u09b0\u09c0")
        buf.write("\7w\2\2\u09b1\u09c0\7x\2\2\u09b2\u09c0\7\5\2\2\u09b3\u09c0")
        buf.write("\7\6\2\2\u09b4\u09c0\7\7\2\2\u09b5\u09c0\7\b\2\2\u09b6")
        buf.write("\u09c0\7{\2\2\u09b7\u09c0\7|\2\2\u09b8\u09c0\7}\2\2\u09b9")
        buf.write("\u09c0\7~\2\2\u09ba\u09c0\7\177\2\2\u09bb\u09bc\7V\2\2")
        buf.write("\u09bc\u09c0\7W\2\2\u09bd\u09be\7X\2\2\u09be\u09c0\7Y")
        buf.write("\2\2\u09bf\u098c\3\2\2\2\u09bf\u098d\3\2\2\2\u09bf\u098e")
        buf.write("\3\2\2\2\u09bf\u0991\3\2\2\2\u09bf\u0994\3\2\2\2\u09bf")
        buf.write("\u0995\3\2\2\2\u09bf\u0996\3\2\2\2\u09bf\u0997\3\2\2\2")
        buf.write("\u09bf\u0998\3\2\2\2\u09bf\u0999\3\2\2\2\u09bf\u099a\3")
        buf.write("\2\2\2\u09bf\u099b\3\2\2\2\u09bf\u099c\3\2\2\2\u09bf\u099d")
        buf.write("\3\2\2\2\u09bf\u099e\3\2\2\2\u09bf\u099f\3\2\2\2\u09bf")
        buf.write("\u09a0\3\2\2\2\u09bf\u09a1\3\2\2\2\u09bf\u09a2\3\2\2\2")
        buf.write("\u09bf\u09a3\3\2\2\2\u09bf\u09a4\3\2\2\2\u09bf\u09a5\3")
        buf.write("\2\2\2\u09bf\u09a6\3\2\2\2\u09bf\u09a7\3\2\2\2\u09bf\u09a8")
        buf.write("\3\2\2\2\u09bf\u09a9\3\2\2\2\u09bf\u09aa\3\2\2\2\u09bf")
        buf.write("\u09ab\3\2\2\2\u09bf\u09ac\3\2\2\2\u09bf\u09ad\3\2\2\2")
        buf.write("\u09bf\u09ae\3\2\2\2\u09bf\u09af\3\2\2\2\u09bf\u09b0\3")
        buf.write("\2\2\2\u09bf\u09b1\3\2\2\2\u09bf\u09b2\3\2\2\2\u09bf\u09b3")
        buf.write("\3\2\2\2\u09bf\u09b4\3\2\2\2\u09bf\u09b5\3\2\2\2\u09bf")
        buf.write("\u09b6\3\2\2\2\u09bf\u09b7\3\2\2\2\u09bf\u09b8\3\2\2\2")
        buf.write("\u09bf\u09b9\3\2\2\2\u09bf\u09ba\3\2\2\2\u09bf\u09bb\3")
        buf.write("\2\2\2\u09bf\u09bd\3\2\2\2\u09c0\u0189\3\2\2\2\u09c1\u09c9")
        buf.write("\7\u0088\2\2\u09c2\u09c9\7\u008e\2\2\u09c3\u09c9\7\u008f")
        buf.write("\2\2\u09c4\u09c9\7\u0090\2\2\u09c5\u09c9\5\u018c\u00c7")
        buf.write("\2\u09c6\u09c9\5\u018e\u00c8\2\u09c7\u09c9\5\u0190\u00c9")
        buf.write("\2\u09c8\u09c1\3\2\2\2\u09c8\u09c2\3\2\2\2\u09c8\u09c3")
        buf.write("\3\2\2\2\u09c8\u09c4\3\2\2\2\u09c8\u09c5\3\2\2\2\u09c8")
        buf.write("\u09c6\3\2\2\2\u09c8\u09c7\3\2\2\2\u09c9\u018b\3\2\2\2")
        buf.write("\u09ca\u09cd\7&\2\2\u09cb\u09cd\7I\2\2\u09cc\u09ca\3\2")
        buf.write("\2\2\u09cc\u09cb\3\2\2\2\u09cd\u018d\3\2\2\2\u09ce\u09cf")
        buf.write("\7\64\2\2\u09cf\u018f\3\2\2\2\u09d0\u09d5\7\u0091\2\2")
        buf.write("\u09d1\u09d5\7\u0092\2\2\u09d2\u09d5\7\u0093\2\2\u09d3")
        buf.write("\u09d5\7\u0094\2\2\u09d4\u09d0\3\2\2\2\u09d4\u09d1\3\2")
        buf.write("\2\2\u09d4\u09d2\3\2\2\2\u09d4\u09d3\3\2\2\2\u09d5\u0191")
        buf.write("\3\2\2\2\u014b\u0193\u019f\u01a3\u01ae\u01b2\u01c1\u01c8")
        buf.write("\u01cd\u01cf\u01d4\u01da\u01e4\u01e8\u01ed\u01f3\u01f7")
        buf.write("\u01fc\u0202\u0209\u020f\u0212\u0215\u0218\u021f\u0226")
        buf.write("\u025a\u0269\u026f\u0275\u0282\u0284\u028e\u029d\u02a3")
        buf.write("\u02c1\u02cb\u02ce\u02d2\u02d6\u02d9\u02dd\u02e3\u02e5")
        buf.write("\u02ed\u02f1\u02f4\u02fb\u0302\u0306\u030b\u030f\u0312")
        buf.write("\u0317\u031d\u032a\u0335\u0337\u0346\u0348\u0354\u0356")
        buf.write("\u0362\u0367\u0378\u037a\u0386\u0388\u0393\u039e\u03a9")
        buf.write("\u03b5\u03b7\u03c3\u03c5\u03cf\u03d7\u03e4\u03ee\u03f5")
        buf.write("\u03f9\u03fd\u0401\u0405\u040a\u040d\u0410\u0416\u041e")
        buf.write("\u0423\u0426\u042c\u0437\u044e\u0452\u045a\u0460\u0474")
        buf.write("\u0478\u0485\u0489\u048c\u0493\u049b\u04a5\u04b0\u04bc")
        buf.write("\u04c6\u04cb\u04d2\u04d5\u04da\u04df\u04f4\u04f8\u04fd")
        buf.write("\u0504\u0509\u0510\u0516\u051a\u051f\u0523\u0528\u052b")
        buf.write("\u0541\u0547\u0552\u0556\u0559\u0563\u0569\u056c\u0573")
        buf.write("\u057d\u0581\u0584\u0587\u058b\u0590\u0592\u0596\u059a")
        buf.write("\u05a3\u05b0\u05b8\u05be\u05c4\u05c8\u05cb\u05d4\u05dd")
        buf.write("\u05e5\u05f0\u05f6\u0601\u0604\u0609\u0618\u061e\u0627")
        buf.write("\u0631\u0637\u063f\u0643\u0647\u064c\u0651\u0658\u065a")
        buf.write("\u065f\u0663\u0671\u0677\u0689\u068b\u0695\u069a\u06a1")
        buf.write("\u06a7\u06ac\u06b2\u06b9\u06bd\u06bf\u06c1\u06c8\u06cb")
        buf.write("\u06ce\u06d1\u06d6\u06da\u06dd\u06e1\u06e5\u06ea\u06ed")
        buf.write("\u06ef\u06f3\u06f7\u06fb\u06fe\u0704\u0708\u070e\u0713")
        buf.write("\u0715\u071b\u071f\u0725\u072c\u0730\u0732\u0734\u073b")
        buf.write("\u0745\u0749\u074b\u074d\u0751\u0754\u075a\u0764\u0768")
        buf.write("\u076e\u0776\u077a\u077d\u0781\u0786\u0789\u078c\u0790")
        buf.write("\u0795\u079f\u07a6\u07ab\u07af\u07b4\u07ba\u07be\u07c4")
        buf.write("\u07ca\u07ce\u07d3\u07d9\u07dd\u07e0\u07e4\u07e7\u07e9")
        buf.write("\u07ec\u07f5\u07f9\u07fe\u0800\u0803\u0806\u0809\u0812")
        buf.write("\u081c\u0821\u0824\u0828\u082b\u082e\u0832\u083b\u0840")
        buf.write("\u084b\u0851\u0855\u0859\u085d\u0861\u0865\u0869\u086d")
        buf.write("\u0870\u0874\u087b\u0882\u0886\u088d\u0891\u0896\u089b")
        buf.write("\u08a2\u08a6\u08b0\u08c0\u08c5\u08c9\u08cc\u08d0\u08d6")
        buf.write("\u08d9\u08dd\u08e7\u08ea\u08f2\u08f7\u08fc\u0904\u090b")
        buf.write("\u090f\u0916\u091c\u0920\u0926\u092f\u0933\u0936\u0946")
        buf.write("\u094d\u0956\u095c\u0960\u0963\u0967\u096b\u0970\u0977")
        buf.write("\u097d\u0981\u098a\u09bf\u09c8\u09cc\u09d4")
        return buf.getvalue()


class CPP14_v2Parser ( Parser ):

    grammarFileName = "CPP14_v2.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'!'", "'not'", "'&&'", "'and'", "'||'", 
                     "'or'", "<INVALID>", "<INVALID>", "'alignas'", "'alignof'", 
                     "'asm'", "'auto'", "'bool'", "'break'", "'case'", "'catch'", 
                     "'char'", "'char16_t'", "'char32_t'", "'class'", "'const'", 
                     "'constexpr'", "'const_cast'", "'continue'", "'decltype'", 
                     "'default'", "'delete'", "'do'", "'double'", "'dynamic_cast'", 
                     "'else'", "'enum'", "'explicit'", "'export'", "'extern'", 
                     "'false'", "'final'", "'float'", "'for'", "'friend'", 
                     "'goto'", "'if'", "'inline'", "'int'", "'long'", "'mutable'", 
                     "'namespace'", "'new'", "'noexcept'", "'nullptr'", 
                     "'operator'", "'override'", "'private'", "'protected'", 
                     "'public'", "'register'", "'reinterpret_cast'", "'return'", 
                     "'short'", "'signed'", "'sizeof'", "'static'", "'static_assert'", 
                     "'static_cast'", "'struct'", "'switch'", "'template'", 
                     "'this'", "'thread_local'", "'throw'", "'true'", "'try'", 
                     "'typedef'", "'typeid'", "'typename'", "'union'", "'unsigned'", 
                     "'using'", "'virtual'", "'void'", "'volatile'", "'wchar_t'", 
                     "'while'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", 
                     "'~'", "<INVALID>", "'='", "'<'", "'>'", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", "'<<'", 
                     "'>>'", "'<<='", "'>>='", "'=='", "'!='", "'<='", "'>='", 
                     "<INVALID>", "<INVALID>", "'++'", "'--'", "','", "'->*'", 
                     "'->'", "'?'", "':'", "'::'", "';'", "'.'", "'.*'", 
                     "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "MultiLineMacro", 
                      "Directive", "Alignas", "Alignof", "Asm", "Auto", 
                      "Bool", "Break", "Case", "Catch", "Char", "Char16", 
                      "Char32", "Class", "Const", "Constexpr", "Const_cast", 
                      "Continue", "Decltype", "Default", "Delete", "Do", 
                      "Double", "Dynamic_cast", "Else", "Enum", "Explicit", 
                      "Export", "Extern", "False1", "Final", "Float", "For", 
                      "Friend", "Goto", "If", "Inline", "Int", "Long", "Mutable", 
                      "Namespace", "New", "Noexcept", "Nullptr", "Operator", 
                      "Override", "Private", "Protected", "Public", "Register", 
                      "Reinterpret_cast", "Return", "Short", "Signed", "Sizeof", 
                      "Static", "Static_assert", "Static_cast", "Struct", 
                      "Switch", "Template", "This", "Thread_local", "Throw", 
                      "True1", "Try", "Typedef", "Typeid_", "Typename_", 
                      "Union", "Unsigned", "Using", "Virtual", "Void", "Volatile", 
                      "Wchar", "While", "LeftParen", "RightParen", "LeftBracket", 
                      "RightBracket", "LeftBrace", "RightBrace", "Plus", 
                      "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", 
                      "Tilde", "Not", "Assign", "Less", "Greater", "PlusAssign", 
                      "MinusAssign", "StarAssign", "DivAssign", "ModAssign", 
                      "XorAssign", "AndAssign", "OrAssign", "LeftShift", 
                      "RightShift", "LeftShiftAssign", "RightShiftAssign", 
                      "Equal", "NotEqual", "LessEqual", "GreaterEqual", 
                      "AndAnd", "OrOr", "PlusPlus", "MinusMinus", "Comma", 
                      "ArrowStar", "Arrow", "Question", "Colon", "Doublecolon", 
                      "Semi", "Dot", "DotStar", "Ellipsis", "Identifier", 
                      "Integerliteral", "Decimalliteral", "Octalliteral", 
                      "Hexadecimalliteral", "Binaryliteral", "Integersuffix", 
                      "Characterliteral", "Floatingliteral", "Stringliteral", 
                      "Userdefinedintegerliteral", "Userdefinedfloatingliteral", 
                      "Userdefinedstringliteral", "Userdefinedcharacterliteral", 
                      "Whitespace", "Newline", "BlockComment", "LineComment" ]

    RULE_translationunit = 0
    RULE_primaryexpression = 1
    RULE_idexpression = 2
    RULE_unqualifiedid = 3
    RULE_qualifiedid = 4
    RULE_nestednamespecifier = 5
    RULE_lambdaexpression = 6
    RULE_lambdaintroducer = 7
    RULE_lambdacapture = 8
    RULE_capturedefault = 9
    RULE_capturelist = 10
    RULE_capture = 11
    RULE_simplecapture = 12
    RULE_initcapture = 13
    RULE_lambdadeclarator = 14
    RULE_postfixexpression = 15
    RULE_typeidofexpr = 16
    RULE_typeidofthetypeid = 17
    RULE_expressionlist = 18
    RULE_pseudodestructorname = 19
    RULE_unaryexpression = 20
    RULE_unaryoperator = 21
    RULE_newexpression = 22
    RULE_newplacement = 23
    RULE_newtypeid = 24
    RULE_newdeclarator = 25
    RULE_noptrnewdeclarator = 26
    RULE_newinitializer = 27
    RULE_deleteexpression = 28
    RULE_noexceptexpression = 29
    RULE_castexpression = 30
    RULE_pmexpression = 31
    RULE_multiplicativeexpression = 32
    RULE_additiveexpression = 33
    RULE_shiftexpression = 34
    RULE_shiftoperator = 35
    RULE_relationalexpression = 36
    RULE_equalityexpression = 37
    RULE_andexpression = 38
    RULE_exclusiveorexpression = 39
    RULE_inclusiveorexpression = 40
    RULE_logicalandexpression = 41
    RULE_logicalorexpression = 42
    RULE_conditionalexpression = 43
    RULE_assignmentexpression = 44
    RULE_assignmentoperator = 45
    RULE_expression = 46
    RULE_constantexpression = 47
    RULE_statement = 48
    RULE_labeledstatement = 49
    RULE_expressionstatement = 50
    RULE_compoundstatement = 51
    RULE_statementseq = 52
    RULE_selectionstatement = 53
    RULE_condition = 54
    RULE_iterationstatement = 55
    RULE_forinitstatement = 56
    RULE_forrangedeclaration = 57
    RULE_forrangeinitializer = 58
    RULE_jumpstatement = 59
    RULE_declarationstatement = 60
    RULE_declarationseq = 61
    RULE_declaration = 62
    RULE_blockdeclaration = 63
    RULE_aliasdeclaration = 64
    RULE_simpledeclaration = 65
    RULE_static_assertdeclaration = 66
    RULE_emptydeclaration = 67
    RULE_attributedeclaration = 68
    RULE_declspecifier = 69
    RULE_declspecifierseq = 70
    RULE_storageclassspecifier = 71
    RULE_functionspecifier = 72
    RULE_typedefname = 73
    RULE_typespecifier = 74
    RULE_trailingtypespecifier = 75
    RULE_typespecifierseq = 76
    RULE_trailingtypespecifierseq = 77
    RULE_simpletypespecifier = 78
    RULE_thetypename = 79
    RULE_decltypespecifier = 80
    RULE_elaboratedtypespecifier = 81
    RULE_enumname = 82
    RULE_enumspecifier = 83
    RULE_enumhead = 84
    RULE_opaqueenumdeclaration = 85
    RULE_enumkey = 86
    RULE_enumbase = 87
    RULE_enumeratorlist = 88
    RULE_enumeratordefinition = 89
    RULE_enumerator = 90
    RULE_namespacename = 91
    RULE_originalnamespacename = 92
    RULE_namespacedefinition = 93
    RULE_namednamespacedefinition = 94
    RULE_originalnamespacedefinition = 95
    RULE_extensionnamespacedefinition = 96
    RULE_unnamednamespacedefinition = 97
    RULE_namespacebody = 98
    RULE_namespacealias = 99
    RULE_namespacealiasdefinition = 100
    RULE_qualifiednamespacespecifier = 101
    RULE_usingdeclaration = 102
    RULE_usingdirective = 103
    RULE_asmdefinition = 104
    RULE_linkagespecification = 105
    RULE_attributespecifierseq = 106
    RULE_attributespecifier = 107
    RULE_alignmentspecifier = 108
    RULE_attributelist = 109
    RULE_attribute = 110
    RULE_attributetoken = 111
    RULE_attributescopedtoken = 112
    RULE_attributenamespace = 113
    RULE_attributeargumentclause = 114
    RULE_balancedtokenseq = 115
    RULE_balancedtoken = 116
    RULE_initdeclaratorlist = 117
    RULE_initdeclarator = 118
    RULE_declarator = 119
    RULE_ptrdeclarator = 120
    RULE_noptrdeclarator = 121
    RULE_parametersandqualifiers = 122
    RULE_trailingreturntype = 123
    RULE_ptroperator = 124
    RULE_cvqualifierseq = 125
    RULE_cvqualifier = 126
    RULE_refqualifier = 127
    RULE_declaratorid = 128
    RULE_thetypeid = 129
    RULE_abstractdeclarator = 130
    RULE_ptrabstractdeclarator = 131
    RULE_noptrabstractdeclarator = 132
    RULE_abstractpackdeclarator = 133
    RULE_noptrabstractpackdeclarator = 134
    RULE_parameterdeclarationclause = 135
    RULE_parameterdeclarationlist = 136
    RULE_parameterdeclaration = 137
    RULE_functiondefinition = 138
    RULE_functionbody = 139
    RULE_initializer = 140
    RULE_braceorequalinitializer = 141
    RULE_initializerclause = 142
    RULE_initializerlist = 143
    RULE_bracedinitlist = 144
    RULE_classname = 145
    RULE_classspecifier = 146
    RULE_classhead = 147
    RULE_classheadname = 148
    RULE_classvirtspecifier = 149
    RULE_classkey = 150
    RULE_memberspecification = 151
    RULE_memberdeclaration = 152
    RULE_memberdeclaratorlist = 153
    RULE_memberdeclarator = 154
    RULE_virtspecifierseq = 155
    RULE_virtspecifier = 156
    RULE_purespecifier = 157
    RULE_baseclause = 158
    RULE_basespecifierlist = 159
    RULE_basespecifier = 160
    RULE_classordecltype = 161
    RULE_basetypespecifier = 162
    RULE_accessspecifier = 163
    RULE_conversionfunctionid = 164
    RULE_conversiontypeid = 165
    RULE_conversiondeclarator = 166
    RULE_ctorinitializer = 167
    RULE_meminitializerlist = 168
    RULE_meminitializer = 169
    RULE_meminitializerid = 170
    RULE_operatorfunctionid = 171
    RULE_literaloperatorid = 172
    RULE_templatedeclaration = 173
    RULE_templateparameterlist = 174
    RULE_templateparameter = 175
    RULE_typeparameter = 176
    RULE_simpletemplateid = 177
    RULE_templateid = 178
    RULE_templatename = 179
    RULE_templateargumentlist = 180
    RULE_templateargument = 181
    RULE_typenamespecifier = 182
    RULE_explicitinstantiation = 183
    RULE_explicitspecialization = 184
    RULE_tryblock = 185
    RULE_functiontryblock = 186
    RULE_handlerseq = 187
    RULE_handler = 188
    RULE_exceptiondeclaration = 189
    RULE_throwexpression = 190
    RULE_exceptionspecification = 191
    RULE_dynamicexceptionspecification = 192
    RULE_typeidlist = 193
    RULE_noexceptspecification = 194
    RULE_theoperator = 195
    RULE_literal = 196
    RULE_booleanliteral = 197
    RULE_pointerliteral = 198
    RULE_userdefinedliteral = 199

    ruleNames =  [ "translationunit", "primaryexpression", "idexpression", 
                   "unqualifiedid", "qualifiedid", "nestednamespecifier", 
                   "lambdaexpression", "lambdaintroducer", "lambdacapture", 
                   "capturedefault", "capturelist", "capture", "simplecapture", 
                   "initcapture", "lambdadeclarator", "postfixexpression", 
                   "typeidofexpr", "typeidofthetypeid", "expressionlist", 
                   "pseudodestructorname", "unaryexpression", "unaryoperator", 
                   "newexpression", "newplacement", "newtypeid", "newdeclarator", 
                   "noptrnewdeclarator", "newinitializer", "deleteexpression", 
                   "noexceptexpression", "castexpression", "pmexpression", 
                   "multiplicativeexpression", "additiveexpression", "shiftexpression", 
                   "shiftoperator", "relationalexpression", "equalityexpression", 
                   "andexpression", "exclusiveorexpression", "inclusiveorexpression", 
                   "logicalandexpression", "logicalorexpression", "conditionalexpression", 
                   "assignmentexpression", "assignmentoperator", "expression", 
                   "constantexpression", "statement", "labeledstatement", 
                   "expressionstatement", "compoundstatement", "statementseq", 
                   "selectionstatement", "condition", "iterationstatement", 
                   "forinitstatement", "forrangedeclaration", "forrangeinitializer", 
                   "jumpstatement", "declarationstatement", "declarationseq", 
                   "declaration", "blockdeclaration", "aliasdeclaration", 
                   "simpledeclaration", "static_assertdeclaration", "emptydeclaration", 
                   "attributedeclaration", "declspecifier", "declspecifierseq", 
                   "storageclassspecifier", "functionspecifier", "typedefname", 
                   "typespecifier", "trailingtypespecifier", "typespecifierseq", 
                   "trailingtypespecifierseq", "simpletypespecifier", "thetypename", 
                   "decltypespecifier", "elaboratedtypespecifier", "enumname", 
                   "enumspecifier", "enumhead", "opaqueenumdeclaration", 
                   "enumkey", "enumbase", "enumeratorlist", "enumeratordefinition", 
                   "enumerator", "namespacename", "originalnamespacename", 
                   "namespacedefinition", "namednamespacedefinition", "originalnamespacedefinition", 
                   "extensionnamespacedefinition", "unnamednamespacedefinition", 
                   "namespacebody", "namespacealias", "namespacealiasdefinition", 
                   "qualifiednamespacespecifier", "usingdeclaration", "usingdirective", 
                   "asmdefinition", "linkagespecification", "attributespecifierseq", 
                   "attributespecifier", "alignmentspecifier", "attributelist", 
                   "attribute", "attributetoken", "attributescopedtoken", 
                   "attributenamespace", "attributeargumentclause", "balancedtokenseq", 
                   "balancedtoken", "initdeclaratorlist", "initdeclarator", 
                   "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers", 
                   "trailingreturntype", "ptroperator", "cvqualifierseq", 
                   "cvqualifier", "refqualifier", "declaratorid", "thetypeid", 
                   "abstractdeclarator", "ptrabstractdeclarator", "noptrabstractdeclarator", 
                   "abstractpackdeclarator", "noptrabstractpackdeclarator", 
                   "parameterdeclarationclause", "parameterdeclarationlist", 
                   "parameterdeclaration", "functiondefinition", "functionbody", 
                   "initializer", "braceorequalinitializer", "initializerclause", 
                   "initializerlist", "bracedinitlist", "classname", "classspecifier", 
                   "classhead", "classheadname", "classvirtspecifier", "classkey", 
                   "memberspecification", "memberdeclaration", "memberdeclaratorlist", 
                   "memberdeclarator", "virtspecifierseq", "virtspecifier", 
                   "purespecifier", "baseclause", "basespecifierlist", "basespecifier", 
                   "classordecltype", "basetypespecifier", "accessspecifier", 
                   "conversionfunctionid", "conversiontypeid", "conversiondeclarator", 
                   "ctorinitializer", "meminitializerlist", "meminitializer", 
                   "meminitializerid", "operatorfunctionid", "literaloperatorid", 
                   "templatedeclaration", "templateparameterlist", "templateparameter", 
                   "typeparameter", "simpletemplateid", "templateid", "templatename", 
                   "templateargumentlist", "templateargument", "typenamespecifier", 
                   "explicitinstantiation", "explicitspecialization", "tryblock", 
                   "functiontryblock", "handlerseq", "handler", "exceptiondeclaration", 
                   "throwexpression", "exceptionspecification", "dynamicexceptionspecification", 
                   "typeidlist", "noexceptspecification", "theoperator", 
                   "literal", "booleanliteral", "pointerliteral", "userdefinedliteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    MultiLineMacro=7
    Directive=8
    Alignas=9
    Alignof=10
    Asm=11
    Auto=12
    Bool=13
    Break=14
    Case=15
    Catch=16
    Char=17
    Char16=18
    Char32=19
    Class=20
    Const=21
    Constexpr=22
    Const_cast=23
    Continue=24
    Decltype=25
    Default=26
    Delete=27
    Do=28
    Double=29
    Dynamic_cast=30
    Else=31
    Enum=32
    Explicit=33
    Export=34
    Extern=35
    False1=36
    Final=37
    Float=38
    For=39
    Friend=40
    Goto=41
    If=42
    Inline=43
    Int=44
    Long=45
    Mutable=46
    Namespace=47
    New=48
    Noexcept=49
    Nullptr=50
    Operator=51
    Override=52
    Private=53
    Protected=54
    Public=55
    Register=56
    Reinterpret_cast=57
    Return=58
    Short=59
    Signed=60
    Sizeof=61
    Static=62
    Static_assert=63
    Static_cast=64
    Struct=65
    Switch=66
    Template=67
    This=68
    Thread_local=69
    Throw=70
    True1=71
    Try=72
    Typedef=73
    Typeid_=74
    Typename_=75
    Union=76
    Unsigned=77
    Using=78
    Virtual=79
    Void=80
    Volatile=81
    Wchar=82
    While=83
    LeftParen=84
    RightParen=85
    LeftBracket=86
    RightBracket=87
    LeftBrace=88
    RightBrace=89
    Plus=90
    Minus=91
    Star=92
    Div=93
    Mod=94
    Caret=95
    And=96
    Or=97
    Tilde=98
    Not=99
    Assign=100
    Less=101
    Greater=102
    PlusAssign=103
    MinusAssign=104
    StarAssign=105
    DivAssign=106
    ModAssign=107
    XorAssign=108
    AndAssign=109
    OrAssign=110
    LeftShift=111
    RightShift=112
    LeftShiftAssign=113
    RightShiftAssign=114
    Equal=115
    NotEqual=116
    LessEqual=117
    GreaterEqual=118
    AndAnd=119
    OrOr=120
    PlusPlus=121
    MinusMinus=122
    Comma=123
    ArrowStar=124
    Arrow=125
    Question=126
    Colon=127
    Doublecolon=128
    Semi=129
    Dot=130
    DotStar=131
    Ellipsis=132
    Identifier=133
    Integerliteral=134
    Decimalliteral=135
    Octalliteral=136
    Hexadecimalliteral=137
    Binaryliteral=138
    Integersuffix=139
    Characterliteral=140
    Floatingliteral=141
    Stringliteral=142
    Userdefinedintegerliteral=143
    Userdefinedfloatingliteral=144
    Userdefinedstringliteral=145
    Userdefinedcharacterliteral=146
    Whitespace=147
    Newline=148
    BlockComment=149
    LineComment=150

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class TranslationunitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CPP14_v2Parser.EOF, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_translationunit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationunit" ):
                listener.enterTranslationunit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationunit" ):
                listener.exitTranslationunit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTranslationunit" ):
                return visitor.visitTranslationunit(self)
            else:
                return visitor.visitChildren(self)




    def translationunit(self):

        localctx = CPP14_v2Parser.TranslationunitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationunit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Asm) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Constexpr) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.Explicit) | (1 << CPP14_v2Parser.Extern) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Friend) | (1 << CPP14_v2Parser.Inline) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.Mutable) | (1 << CPP14_v2Parser.Namespace) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Register) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Static) | (1 << CPP14_v2Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14_v2Parser.Struct - 65)) | (1 << (CPP14_v2Parser.Template - 65)) | (1 << (CPP14_v2Parser.Thread_local - 65)) | (1 << (CPP14_v2Parser.Typedef - 65)) | (1 << (CPP14_v2Parser.Typename_ - 65)) | (1 << (CPP14_v2Parser.Union - 65)) | (1 << (CPP14_v2Parser.Unsigned - 65)) | (1 << (CPP14_v2Parser.Using - 65)) | (1 << (CPP14_v2Parser.Virtual - 65)) | (1 << (CPP14_v2Parser.Void - 65)) | (1 << (CPP14_v2Parser.Volatile - 65)) | (1 << (CPP14_v2Parser.Wchar - 65)) | (1 << (CPP14_v2Parser.LeftParen - 65)) | (1 << (CPP14_v2Parser.LeftBracket - 65)) | (1 << (CPP14_v2Parser.Star - 65)) | (1 << (CPP14_v2Parser.And - 65)) | (1 << (CPP14_v2Parser.Tilde - 65)) | (1 << (CPP14_v2Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14_v2Parser.Semi - 129)) | (1 << (CPP14_v2Parser.Ellipsis - 129)) | (1 << (CPP14_v2Parser.Identifier - 129)))) != 0):
                self.state = 400
                self.declarationseq(0)


            self.state = 403
            self.match(CPP14_v2Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_primaryexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Primaryexpression2Context(PrimaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PrimaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def This(self):
            return self.getToken(CPP14_v2Parser.This, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryexpression2" ):
                listener.enterPrimaryexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryexpression2" ):
                listener.exitPrimaryexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryexpression2" ):
                return visitor.visitPrimaryexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Primaryexpression3Context(PrimaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PrimaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryexpression3" ):
                listener.enterPrimaryexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryexpression3" ):
                listener.exitPrimaryexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryexpression3" ):
                return visitor.visitPrimaryexpression3(self)
            else:
                return visitor.visitChildren(self)


    class Primaryexpression4Context(PrimaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PrimaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.IdexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryexpression4" ):
                listener.enterPrimaryexpression4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryexpression4" ):
                listener.exitPrimaryexpression4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryexpression4" ):
                return visitor.visitPrimaryexpression4(self)
            else:
                return visitor.visitChildren(self)


    class Primaryexpression5Context(PrimaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PrimaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def lambdaexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LambdaexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryexpression5" ):
                listener.enterPrimaryexpression5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryexpression5" ):
                listener.exitPrimaryexpression5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryexpression5" ):
                return visitor.visitPrimaryexpression5(self)
            else:
                return visitor.visitChildren(self)


    class Primaryexpression1Context(PrimaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PrimaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryexpression1" ):
                listener.enterPrimaryexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryexpression1" ):
                listener.exitPrimaryexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryexpression1" ):
                return visitor.visitPrimaryexpression1(self)
            else:
                return visitor.visitChildren(self)



    def primaryexpression(self):

        localctx = CPP14_v2Parser.PrimaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_primaryexpression)
        try:
            self.state = 413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.False1, CPP14_v2Parser.Nullptr, CPP14_v2Parser.True1, CPP14_v2Parser.Integerliteral, CPP14_v2Parser.Characterliteral, CPP14_v2Parser.Floatingliteral, CPP14_v2Parser.Stringliteral, CPP14_v2Parser.Userdefinedintegerliteral, CPP14_v2Parser.Userdefinedfloatingliteral, CPP14_v2Parser.Userdefinedstringliteral, CPP14_v2Parser.Userdefinedcharacterliteral]:
                localctx = CPP14_v2Parser.Primaryexpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 405
                self.literal()
                pass
            elif token in [CPP14_v2Parser.This]:
                localctx = CPP14_v2Parser.Primaryexpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 406
                self.match(CPP14_v2Parser.This)
                pass
            elif token in [CPP14_v2Parser.LeftParen]:
                localctx = CPP14_v2Parser.Primaryexpression3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 407
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 408
                self.expression(0)
                self.state = 409
                self.match(CPP14_v2Parser.RightParen)
                pass
            elif token in [CPP14_v2Parser.Decltype, CPP14_v2Parser.Operator, CPP14_v2Parser.Tilde, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Primaryexpression4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 411
                self.idexpression()
                pass
            elif token in [CPP14_v2Parser.LeftBracket]:
                localctx = CPP14_v2Parser.Primaryexpression5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 412
                self.lambdaexpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_idexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Idexpression2Context(IdexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.IdexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.QualifiedidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdexpression2" ):
                listener.enterIdexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdexpression2" ):
                listener.exitIdexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdexpression2" ):
                return visitor.visitIdexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Idexpression1Context(IdexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.IdexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UnqualifiedidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdexpression1" ):
                listener.enterIdexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdexpression1" ):
                listener.exitIdexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdexpression1" ):
                return visitor.visitIdexpression1(self)
            else:
                return visitor.visitChildren(self)



    def idexpression(self):

        localctx = CPP14_v2Parser.IdexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_idexpression)
        try:
            self.state = 417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Idexpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 415
                self.unqualifiedid()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Idexpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 416
                self.qualifiedid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnqualifiedidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_unqualifiedid

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Unqualifiedid6Context(UnqualifiedidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnqualifiedidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Tilde(self):
            return self.getToken(CPP14_v2Parser.Tilde, 0)
        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DecltypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid6" ):
                listener.enterUnqualifiedid6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid6" ):
                listener.exitUnqualifiedid6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedid6" ):
                return visitor.visitUnqualifiedid6(self)
            else:
                return visitor.visitChildren(self)


    class Unqualifiedid7Context(UnqualifiedidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnqualifiedidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid7" ):
                listener.enterUnqualifiedid7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid7" ):
                listener.exitUnqualifiedid7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedid7" ):
                return visitor.visitUnqualifiedid7(self)
            else:
                return visitor.visitChildren(self)


    class Unqualifiedid4Context(UnqualifiedidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnqualifiedidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literaloperatorid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LiteraloperatoridContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid4" ):
                listener.enterUnqualifiedid4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid4" ):
                listener.exitUnqualifiedid4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedid4" ):
                return visitor.visitUnqualifiedid4(self)
            else:
                return visitor.visitChildren(self)


    class Unqualifiedid5Context(UnqualifiedidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnqualifiedidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Tilde(self):
            return self.getToken(CPP14_v2Parser.Tilde, 0)
        def classname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid5" ):
                listener.enterUnqualifiedid5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid5" ):
                listener.exitUnqualifiedid5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedid5" ):
                return visitor.visitUnqualifiedid5(self)
            else:
                return visitor.visitChildren(self)


    class Unqualifiedid2Context(UnqualifiedidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnqualifiedidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def operatorfunctionid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.OperatorfunctionidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid2" ):
                listener.enterUnqualifiedid2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid2" ):
                listener.exitUnqualifiedid2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedid2" ):
                return visitor.visitUnqualifiedid2(self)
            else:
                return visitor.visitChildren(self)


    class Unqualifiedid3Context(UnqualifiedidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnqualifiedidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def conversionfunctionid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConversionfunctionidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid3" ):
                listener.enterUnqualifiedid3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid3" ):
                listener.exitUnqualifiedid3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedid3" ):
                return visitor.visitUnqualifiedid3(self)
            else:
                return visitor.visitChildren(self)


    class Unqualifiedid1Context(UnqualifiedidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnqualifiedidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid1" ):
                listener.enterUnqualifiedid1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid1" ):
                listener.exitUnqualifiedid1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedid1" ):
                return visitor.visitUnqualifiedid1(self)
            else:
                return visitor.visitChildren(self)



    def unqualifiedid(self):

        localctx = CPP14_v2Parser.UnqualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unqualifiedid)
        try:
            self.state = 428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Unqualifiedid1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 419
                self.match(CPP14_v2Parser.Identifier)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Unqualifiedid2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 420
                self.operatorfunctionid()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Unqualifiedid3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 421
                self.conversionfunctionid()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Unqualifiedid4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 422
                self.literaloperatorid()
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Unqualifiedid5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 423
                self.match(CPP14_v2Parser.Tilde)
                self.state = 424
                self.classname()
                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Unqualifiedid6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 425
                self.match(CPP14_v2Parser.Tilde)
                self.state = 426
                self.decltypespecifier()
                pass

            elif la_ == 7:
                localctx = CPP14_v2Parser.Unqualifiedid7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 427
                self.templateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UnqualifiedidContext,0)


        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_qualifiedid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedid" ):
                listener.enterQualifiedid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedid" ):
                listener.exitQualifiedid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedid" ):
                return visitor.visitQualifiedid(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedid(self):

        localctx = CPP14_v2Parser.QualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_qualifiedid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.nestednamespecifier(0)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Template:
                self.state = 431
                self.match(CPP14_v2Parser.Template)


            self.state = 434
            self.unqualifiedid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestednamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_nestednamespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Nestednamespecifier6Context(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)
        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestednamespecifier6" ):
                listener.enterNestednamespecifier6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestednamespecifier6" ):
                listener.exitNestednamespecifier6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestednamespecifier6" ):
                return visitor.visitNestednamespecifier6(self)
            else:
                return visitor.visitChildren(self)


    class Nestednamespecifier5Context(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestednamespecifier5" ):
                listener.enterNestednamespecifier5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestednamespecifier5" ):
                listener.exitNestednamespecifier5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestednamespecifier5" ):
                return visitor.visitNestednamespecifier5(self)
            else:
                return visitor.visitChildren(self)


    class Nestednamespecifier4Context(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DecltypespecifierContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestednamespecifier4" ):
                listener.enterNestednamespecifier4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestednamespecifier4" ):
                listener.exitNestednamespecifier4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestednamespecifier4" ):
                return visitor.visitNestednamespecifier4(self)
            else:
                return visitor.visitChildren(self)


    class Nestednamespecifier3Context(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namespacename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacenameContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestednamespecifier3" ):
                listener.enterNestednamespecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestednamespecifier3" ):
                listener.exitNestednamespecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestednamespecifier3" ):
                return visitor.visitNestednamespecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Nestednamespecifier2Context(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def thetypename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypenameContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestednamespecifier2" ):
                listener.enterNestednamespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestednamespecifier2" ):
                listener.exitNestednamespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestednamespecifier2" ):
                return visitor.visitNestednamespecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Nestednamespecifier1Context(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestednamespecifier1" ):
                listener.enterNestednamespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestednamespecifier1" ):
                listener.exitNestednamespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestednamespecifier1" ):
                return visitor.visitNestednamespecifier1(self)
            else:
                return visitor.visitChildren(self)



    def nestednamespecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.NestednamespecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_nestednamespecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Nestednamespecifier1Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 437
                self.match(CPP14_v2Parser.Doublecolon)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Nestednamespecifier2Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 438
                self.thetypename()
                self.state = 439
                self.match(CPP14_v2Parser.Doublecolon)
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Nestednamespecifier3Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 441
                self.namespacename()
                self.state = 442
                self.match(CPP14_v2Parser.Doublecolon)
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Nestednamespecifier4Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 444
                self.decltypespecifier()
                self.state = 445
                self.match(CPP14_v2Parser.Doublecolon)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 461
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 459
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Nestednamespecifier5Context(self, CPP14_v2Parser.NestednamespecifierContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 449
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 450
                        self.match(CPP14_v2Parser.Identifier)
                        self.state = 451
                        self.match(CPP14_v2Parser.Doublecolon)
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Nestednamespecifier6Context(self, CPP14_v2Parser.NestednamespecifierContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 452
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 454
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CPP14_v2Parser.Template:
                            self.state = 453
                            self.match(CPP14_v2Parser.Template)


                        self.state = 456
                        self.simpletemplateid()
                        self.state = 457
                        self.match(CPP14_v2Parser.Doublecolon)
                        pass

             
                self.state = 463
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LambdaexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaintroducer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LambdaintroducerContext,0)


        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CompoundstatementContext,0)


        def lambdadeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LambdadeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_lambdaexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaexpression" ):
                listener.enterLambdaexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaexpression" ):
                listener.exitLambdaexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaexpression" ):
                return visitor.visitLambdaexpression(self)
            else:
                return visitor.visitChildren(self)




    def lambdaexpression(self):

        localctx = CPP14_v2Parser.LambdaexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_lambdaexpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.lambdaintroducer()
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.LeftParen:
                self.state = 465
                self.lambdadeclarator()


            self.state = 468
            self.compoundstatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaintroducerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)

        def lambdacapture(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LambdacaptureContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_lambdaintroducer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaintroducer" ):
                listener.enterLambdaintroducer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaintroducer" ):
                listener.exitLambdaintroducer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaintroducer" ):
                return visitor.visitLambdaintroducer(self)
            else:
                return visitor.visitChildren(self)




    def lambdaintroducer(self):

        localctx = CPP14_v2Parser.LambdaintroducerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_lambdaintroducer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(CPP14_v2Parser.LeftBracket)
            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (CPP14_v2Parser.This - 68)) | (1 << (CPP14_v2Parser.And - 68)) | (1 << (CPP14_v2Parser.Assign - 68)))) != 0) or _la==CPP14_v2Parser.Identifier:
                self.state = 471
                self.lambdacapture()


            self.state = 474
            self.match(CPP14_v2Parser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdacaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_lambdacapture

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Lambdacapture3Context(LambdacaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LambdacaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def capturedefault(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CapturedefaultContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def capturelist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CapturelistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdacapture3" ):
                listener.enterLambdacapture3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdacapture3" ):
                listener.exitLambdacapture3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdacapture3" ):
                return visitor.visitLambdacapture3(self)
            else:
                return visitor.visitChildren(self)


    class Lambdacapture2Context(LambdacaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LambdacaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def capturelist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CapturelistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdacapture2" ):
                listener.enterLambdacapture2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdacapture2" ):
                listener.exitLambdacapture2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdacapture2" ):
                return visitor.visitLambdacapture2(self)
            else:
                return visitor.visitChildren(self)


    class Lambdacapture1Context(LambdacaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LambdacaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def capturedefault(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CapturedefaultContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdacapture1" ):
                listener.enterLambdacapture1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdacapture1" ):
                listener.exitLambdacapture1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdacapture1" ):
                return visitor.visitLambdacapture1(self)
            else:
                return visitor.visitChildren(self)



    def lambdacapture(self):

        localctx = CPP14_v2Parser.LambdacaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_lambdacapture)
        try:
            self.state = 482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Lambdacapture1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 476
                self.capturedefault()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Lambdacapture2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 477
                self.capturelist(0)
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Lambdacapture3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 478
                self.capturedefault()
                self.state = 479
                self.match(CPP14_v2Parser.Comma)
                self.state = 480
                self.capturelist(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CapturedefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_capturedefault

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Capturedefault1Context(CapturedefaultContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CapturedefaultContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def And(self):
            return self.getToken(CPP14_v2Parser.And, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturedefault1" ):
                listener.enterCapturedefault1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturedefault1" ):
                listener.exitCapturedefault1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapturedefault1" ):
                return visitor.visitCapturedefault1(self)
            else:
                return visitor.visitChildren(self)


    class Capturedefault2Context(CapturedefaultContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CapturedefaultContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturedefault2" ):
                listener.enterCapturedefault2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturedefault2" ):
                listener.exitCapturedefault2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapturedefault2" ):
                return visitor.visitCapturedefault2(self)
            else:
                return visitor.visitChildren(self)



    def capturedefault(self):

        localctx = CPP14_v2Parser.CapturedefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_capturedefault)
        try:
            self.state = 486
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.And]:
                localctx = CPP14_v2Parser.Capturedefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 484
                self.match(CPP14_v2Parser.And)
                pass
            elif token in [CPP14_v2Parser.Assign]:
                localctx = CPP14_v2Parser.Capturedefault2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 485
                self.match(CPP14_v2Parser.Assign)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CapturelistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_capturelist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Capturelist2Context(CapturelistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CapturelistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def capturelist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CapturelistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def capture(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CaptureContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturelist2" ):
                listener.enterCapturelist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturelist2" ):
                listener.exitCapturelist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapturelist2" ):
                return visitor.visitCapturelist2(self)
            else:
                return visitor.visitChildren(self)


    class Capturelist1Context(CapturelistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CapturelistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def capture(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CaptureContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturelist1" ):
                listener.enterCapturelist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturelist1" ):
                listener.exitCapturelist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapturelist1" ):
                return visitor.visitCapturelist1(self)
            else:
                return visitor.visitChildren(self)



    def capturelist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.CapturelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_capturelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Capturelist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 489
            self.capture()
            self.state = 491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 490
                self.match(CPP14_v2Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 501
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Capturelist2Context(self, CPP14_v2Parser.CapturelistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_capturelist)
                    self.state = 493
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 494
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 495
                    self.capture()
                    self.state = 497
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                    if la_ == 1:
                        self.state = 496
                        self.match(CPP14_v2Parser.Ellipsis)

             
                self.state = 503
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_capture

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Capture1Context(CaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simplecapture(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimplecaptureContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture1" ):
                listener.enterCapture1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture1" ):
                listener.exitCapture1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture1" ):
                return visitor.visitCapture1(self)
            else:
                return visitor.visitChildren(self)


    class Capture2Context(CaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def initcapture(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitcaptureContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture2" ):
                listener.enterCapture2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture2" ):
                listener.exitCapture2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture2" ):
                return visitor.visitCapture2(self)
            else:
                return visitor.visitChildren(self)



    def capture(self):

        localctx = CPP14_v2Parser.CaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_capture)
        try:
            self.state = 506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Capture1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 504
                self.simplecapture()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Capture2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 505
                self.initcapture()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplecaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_simplecapture

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Simplecapture1Context(SimplecaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimplecaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplecapture1" ):
                listener.enterSimplecapture1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplecapture1" ):
                listener.exitSimplecapture1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimplecapture1" ):
                return visitor.visitSimplecapture1(self)
            else:
                return visitor.visitChildren(self)


    class Simplecapture3Context(SimplecaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimplecaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def This(self):
            return self.getToken(CPP14_v2Parser.This, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplecapture3" ):
                listener.enterSimplecapture3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplecapture3" ):
                listener.exitSimplecapture3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimplecapture3" ):
                return visitor.visitSimplecapture3(self)
            else:
                return visitor.visitChildren(self)


    class Simplecapture2Context(SimplecaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimplecaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def And(self):
            return self.getToken(CPP14_v2Parser.And, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplecapture2" ):
                listener.enterSimplecapture2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplecapture2" ):
                listener.exitSimplecapture2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimplecapture2" ):
                return visitor.visitSimplecapture2(self)
            else:
                return visitor.visitChildren(self)



    def simplecapture(self):

        localctx = CPP14_v2Parser.SimplecaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_simplecapture)
        try:
            self.state = 512
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Simplecapture1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 508
                self.match(CPP14_v2Parser.Identifier)
                pass
            elif token in [CPP14_v2Parser.And]:
                localctx = CPP14_v2Parser.Simplecapture2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.match(CPP14_v2Parser.And)
                self.state = 510
                self.match(CPP14_v2Parser.Identifier)
                pass
            elif token in [CPP14_v2Parser.This]:
                localctx = CPP14_v2Parser.Simplecapture3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 511
                self.match(CPP14_v2Parser.This)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitcaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_initcapture

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Initcapture2Context(InitcaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitcaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def And(self):
            return self.getToken(CPP14_v2Parser.And, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def initializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitcapture2" ):
                listener.enterInitcapture2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitcapture2" ):
                listener.exitInitcapture2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitcapture2" ):
                return visitor.visitInitcapture2(self)
            else:
                return visitor.visitChildren(self)


    class Initcapture1Context(InitcaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitcaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def initializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitcapture1" ):
                listener.enterInitcapture1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitcapture1" ):
                listener.exitInitcapture1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitcapture1" ):
                return visitor.visitInitcapture1(self)
            else:
                return visitor.visitChildren(self)



    def initcapture(self):

        localctx = CPP14_v2Parser.InitcaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_initcapture)
        try:
            self.state = 519
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Initcapture1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 514
                self.match(CPP14_v2Parser.Identifier)
                self.state = 515
                self.initializer()
                pass
            elif token in [CPP14_v2Parser.And]:
                localctx = CPP14_v2Parser.Initcapture2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 516
                self.match(CPP14_v2Parser.And)
                self.state = 517
                self.match(CPP14_v2Parser.Identifier)
                self.state = 518
                self.initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdadeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParameterdeclarationclauseContext,0)


        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def Mutable(self):
            return self.getToken(CPP14_v2Parser.Mutable, 0)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExceptionspecificationContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TrailingreturntypeContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_lambdadeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdadeclarator" ):
                listener.enterLambdadeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdadeclarator" ):
                listener.exitLambdadeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdadeclarator" ):
                return visitor.visitLambdadeclarator(self)
            else:
                return visitor.visitChildren(self)




    def lambdadeclarator(self):

        localctx = CPP14_v2Parser.LambdadeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_lambdadeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 522
            self.parameterdeclarationclause()
            self.state = 523
            self.match(CPP14_v2Parser.RightParen)
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Mutable:
                self.state = 524
                self.match(CPP14_v2Parser.Mutable)


            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Noexcept or _la==CPP14_v2Parser.Throw:
                self.state = 527
                self.exceptionspecification()


            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                self.state = 530
                self.attributespecifierseq(0)


            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Arrow:
                self.state = 533
                self.trailingreturntype()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_postfixexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Postfixexpression2Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression2" ):
                listener.enterPostfixexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression2" ):
                listener.exitPostfixexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression2" ):
                return visitor.visitPostfixexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression1Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PrimaryexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression1" ):
                listener.enterPostfixexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression1" ):
                listener.exitPostfixexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression1" ):
                return visitor.visitPostfixexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression4Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def expressionlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression4" ):
                listener.enterPostfixexpression4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression4" ):
                listener.exitPostfixexpression4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression4" ):
                return visitor.visitPostfixexpression4(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression3Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)

        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression3" ):
                listener.enterPostfixexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression3" ):
                listener.exitPostfixexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression3" ):
                return visitor.visitPostfixexpression3(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression20Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeidofthetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypeidofthetypeidContext,0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression20" ):
                listener.enterPostfixexpression20(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression20" ):
                listener.exitPostfixexpression20(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression20" ):
                return visitor.visitPostfixexpression20(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression9Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def Dot(self):
            return self.getToken(CPP14_v2Parser.Dot, 0)
        def idexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.IdexpressionContext,0)

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression9" ):
                listener.enterPostfixexpression9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression9" ):
                listener.exitPostfixexpression9(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression9" ):
                return visitor.visitPostfixexpression9(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression6Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypenamespecifierContext,0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def expressionlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression6" ):
                listener.enterPostfixexpression6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression6" ):
                listener.exitPostfixexpression6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression6" ):
                return visitor.visitPostfixexpression6(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression13Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def PlusPlus(self):
            return self.getToken(CPP14_v2Parser.PlusPlus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression13" ):
                listener.enterPostfixexpression13(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression13" ):
                listener.exitPostfixexpression13(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression13" ):
                return visitor.visitPostfixexpression13(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression5Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletypespecifierContext,0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def expressionlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression5" ):
                listener.enterPostfixexpression5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression5" ):
                listener.exitPostfixexpression5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression5" ):
                return visitor.visitPostfixexpression5(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression12Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def Arrow(self):
            return self.getToken(CPP14_v2Parser.Arrow, 0)
        def pseudodestructorname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PseudodestructornameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression12" ):
                listener.enterPostfixexpression12(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression12" ):
                listener.exitPostfixexpression12(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression12" ):
                return visitor.visitPostfixexpression12(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression8Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypenamespecifierContext,0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression8" ):
                listener.enterPostfixexpression8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression8" ):
                listener.exitPostfixexpression8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression8" ):
                return visitor.visitPostfixexpression8(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression11Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def Dot(self):
            return self.getToken(CPP14_v2Parser.Dot, 0)
        def pseudodestructorname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PseudodestructornameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression11" ):
                listener.enterPostfixexpression11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression11" ):
                listener.exitPostfixexpression11(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression11" ):
                return visitor.visitPostfixexpression11(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression7Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletypespecifierContext,0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression7" ):
                listener.enterPostfixexpression7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression7" ):
                listener.exitPostfixexpression7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression7" ):
                return visitor.visitPostfixexpression7(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression10Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def Arrow(self):
            return self.getToken(CPP14_v2Parser.Arrow, 0)
        def idexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.IdexpressionContext,0)

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression10" ):
                listener.enterPostfixexpression10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression10" ):
                listener.exitPostfixexpression10(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression10" ):
                return visitor.visitPostfixexpression10(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression17Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Reinterpret_cast(self):
            return self.getToken(CPP14_v2Parser.Reinterpret_cast, 0)
        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression17" ):
                listener.enterPostfixexpression17(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression17" ):
                listener.exitPostfixexpression17(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression17" ):
                return visitor.visitPostfixexpression17(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression16Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Static_cast(self):
            return self.getToken(CPP14_v2Parser.Static_cast, 0)
        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression16" ):
                listener.enterPostfixexpression16(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression16" ):
                listener.exitPostfixexpression16(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression16" ):
                return visitor.visitPostfixexpression16(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression15Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Dynamic_cast(self):
            return self.getToken(CPP14_v2Parser.Dynamic_cast, 0)
        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression15" ):
                listener.enterPostfixexpression15(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression15" ):
                listener.exitPostfixexpression15(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression15" ):
                return visitor.visitPostfixexpression15(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression14Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def MinusMinus(self):
            return self.getToken(CPP14_v2Parser.MinusMinus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression14" ):
                listener.enterPostfixexpression14(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression14" ):
                listener.exitPostfixexpression14(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression14" ):
                return visitor.visitPostfixexpression14(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression19Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeidofthetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypeidofthetypeidContext,0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression19" ):
                listener.enterPostfixexpression19(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression19" ):
                listener.exitPostfixexpression19(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression19" ):
                return visitor.visitPostfixexpression19(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression18Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Const_cast(self):
            return self.getToken(CPP14_v2Parser.Const_cast, 0)
        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression18" ):
                listener.enterPostfixexpression18(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression18" ):
                listener.exitPostfixexpression18(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression18" ):
                return visitor.visitPostfixexpression18(self)
            else:
                return visitor.visitChildren(self)



    def postfixexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.PostfixexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_postfixexpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Postfixexpression1Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 537
                self.primaryexpression()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Postfixexpression5Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 538
                self.simpletypespecifier()
                self.state = 539
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.LeftBrace - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 540
                    self.expressionlist()


                self.state = 543
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Postfixexpression6Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 545
                self.typenamespecifier()
                self.state = 546
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.LeftBrace - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 547
                    self.expressionlist()


                self.state = 550
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Postfixexpression7Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 552
                self.simpletypespecifier()
                self.state = 553
                self.bracedinitlist()
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Postfixexpression8Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 555
                self.typenamespecifier()
                self.state = 556
                self.bracedinitlist()
                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Postfixexpression15Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 558
                self.match(CPP14_v2Parser.Dynamic_cast)
                self.state = 559
                self.match(CPP14_v2Parser.Less)
                self.state = 560
                self.thetypeid()
                self.state = 561
                self.match(CPP14_v2Parser.Greater)
                self.state = 562
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 563
                self.expression(0)
                self.state = 564
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 7:
                localctx = CPP14_v2Parser.Postfixexpression16Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 566
                self.match(CPP14_v2Parser.Static_cast)
                self.state = 567
                self.match(CPP14_v2Parser.Less)
                self.state = 568
                self.thetypeid()
                self.state = 569
                self.match(CPP14_v2Parser.Greater)
                self.state = 570
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 571
                self.expression(0)
                self.state = 572
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 8:
                localctx = CPP14_v2Parser.Postfixexpression17Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 574
                self.match(CPP14_v2Parser.Reinterpret_cast)
                self.state = 575
                self.match(CPP14_v2Parser.Less)
                self.state = 576
                self.thetypeid()
                self.state = 577
                self.match(CPP14_v2Parser.Greater)
                self.state = 578
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 579
                self.expression(0)
                self.state = 580
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 9:
                localctx = CPP14_v2Parser.Postfixexpression18Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 582
                self.match(CPP14_v2Parser.Const_cast)
                self.state = 583
                self.match(CPP14_v2Parser.Less)
                self.state = 584
                self.thetypeid()
                self.state = 585
                self.match(CPP14_v2Parser.Greater)
                self.state = 586
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 587
                self.expression(0)
                self.state = 588
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 10:
                localctx = CPP14_v2Parser.Postfixexpression19Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 590
                self.typeidofthetypeid()
                self.state = 591
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 592
                self.expression(0)
                self.state = 593
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 11:
                localctx = CPP14_v2Parser.Postfixexpression20Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 595
                self.typeidofthetypeid()
                self.state = 596
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 597
                self.thetypeid()
                self.state = 598
                self.match(CPP14_v2Parser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 642
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 640
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Postfixexpression2Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 602
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 603
                        self.match(CPP14_v2Parser.LeftBracket)
                        self.state = 604
                        self.expression(0)
                        self.state = 605
                        self.match(CPP14_v2Parser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Postfixexpression3Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 607
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 608
                        self.match(CPP14_v2Parser.LeftBracket)
                        self.state = 609
                        self.bracedinitlist()
                        self.state = 610
                        self.match(CPP14_v2Parser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CPP14_v2Parser.Postfixexpression4Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 612
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 613
                        self.match(CPP14_v2Parser.LeftParen)
                        self.state = 615
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.LeftBrace - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                            self.state = 614
                            self.expressionlist()


                        self.state = 617
                        self.match(CPP14_v2Parser.RightParen)
                        pass

                    elif la_ == 4:
                        localctx = CPP14_v2Parser.Postfixexpression9Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 618
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 619
                        self.match(CPP14_v2Parser.Dot)
                        self.state = 621
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CPP14_v2Parser.Template:
                            self.state = 620
                            self.match(CPP14_v2Parser.Template)


                        self.state = 623
                        self.idexpression()
                        pass

                    elif la_ == 5:
                        localctx = CPP14_v2Parser.Postfixexpression10Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 624
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 625
                        self.match(CPP14_v2Parser.Arrow)
                        self.state = 627
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CPP14_v2Parser.Template:
                            self.state = 626
                            self.match(CPP14_v2Parser.Template)


                        self.state = 629
                        self.idexpression()
                        pass

                    elif la_ == 6:
                        localctx = CPP14_v2Parser.Postfixexpression11Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 630
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 631
                        self.match(CPP14_v2Parser.Dot)
                        self.state = 632
                        self.pseudodestructorname()
                        pass

                    elif la_ == 7:
                        localctx = CPP14_v2Parser.Postfixexpression12Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 633
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 634
                        self.match(CPP14_v2Parser.Arrow)
                        self.state = 635
                        self.pseudodestructorname()
                        pass

                    elif la_ == 8:
                        localctx = CPP14_v2Parser.Postfixexpression13Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 636
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 637
                        self.match(CPP14_v2Parser.PlusPlus)
                        pass

                    elif la_ == 9:
                        localctx = CPP14_v2Parser.Postfixexpression14Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 638
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 639
                        self.match(CPP14_v2Parser.MinusMinus)
                        pass

             
                self.state = 644
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeidofexprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typeid_(self):
            return self.getToken(CPP14_v2Parser.Typeid_, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_typeidofexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidofexpr" ):
                listener.enterTypeidofexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidofexpr" ):
                listener.exitTypeidofexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeidofexpr" ):
                return visitor.visitTypeidofexpr(self)
            else:
                return visitor.visitChildren(self)




    def typeidofexpr(self):

        localctx = CPP14_v2Parser.TypeidofexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeidofexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(CPP14_v2Parser.Typeid_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeidofthetypeidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typeid_(self):
            return self.getToken(CPP14_v2Parser.Typeid_, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_typeidofthetypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidofthetypeid" ):
                listener.enterTypeidofthetypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidofthetypeid" ):
                listener.exitTypeidofthetypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeidofthetypeid" ):
                return visitor.visitTypeidofthetypeid(self)
            else:
                return visitor.visitChildren(self)




    def typeidofthetypeid(self):

        localctx = CPP14_v2Parser.TypeidofthetypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeidofthetypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(CPP14_v2Parser.Typeid_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_expressionlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionlist" ):
                listener.enterExpressionlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionlist" ):
                listener.exitExpressionlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionlist" ):
                return visitor.visitExpressionlist(self)
            else:
                return visitor.visitChildren(self)




    def expressionlist(self):

        localctx = CPP14_v2Parser.ExpressionlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_expressionlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.initializerlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudodestructornameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_pseudodestructorname

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Pseudodestructorname1Context(PseudodestructornameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PseudodestructornameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def thetypename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14_v2Parser.ThetypenameContext)
            else:
                return self.getTypedRuleContext(CPP14_v2Parser.ThetypenameContext,i)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)
        def Tilde(self):
            return self.getToken(CPP14_v2Parser.Tilde, 0)
        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudodestructorname1" ):
                listener.enterPseudodestructorname1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudodestructorname1" ):
                listener.exitPseudodestructorname1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudodestructorname1" ):
                return visitor.visitPseudodestructorname1(self)
            else:
                return visitor.visitChildren(self)


    class Pseudodestructorname4Context(PseudodestructornameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PseudodestructornameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Tilde(self):
            return self.getToken(CPP14_v2Parser.Tilde, 0)
        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DecltypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudodestructorname4" ):
                listener.enterPseudodestructorname4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudodestructorname4" ):
                listener.exitPseudodestructorname4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudodestructorname4" ):
                return visitor.visitPseudodestructorname4(self)
            else:
                return visitor.visitChildren(self)


    class Pseudodestructorname2Context(PseudodestructornameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PseudodestructornameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)
        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)
        def Tilde(self):
            return self.getToken(CPP14_v2Parser.Tilde, 0)
        def thetypename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypenameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudodestructorname2" ):
                listener.enterPseudodestructorname2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudodestructorname2" ):
                listener.exitPseudodestructorname2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudodestructorname2" ):
                return visitor.visitPseudodestructorname2(self)
            else:
                return visitor.visitChildren(self)


    class Pseudodestructorname3Context(PseudodestructornameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PseudodestructornameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Tilde(self):
            return self.getToken(CPP14_v2Parser.Tilde, 0)
        def thetypename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypenameContext,0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudodestructorname3" ):
                listener.enterPseudodestructorname3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudodestructorname3" ):
                listener.exitPseudodestructorname3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudodestructorname3" ):
                return visitor.visitPseudodestructorname3(self)
            else:
                return visitor.visitChildren(self)



    def pseudodestructorname(self):

        localctx = CPP14_v2Parser.PseudodestructornameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pseudodestructorname)
        self._la = 0 # Token type
        try:
            self.state = 673
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Pseudodestructorname1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 652
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 651
                    self.nestednamespecifier(0)


                self.state = 654
                self.thetypename()
                self.state = 655
                self.match(CPP14_v2Parser.Doublecolon)
                self.state = 656
                self.match(CPP14_v2Parser.Tilde)
                self.state = 657
                self.thetypename()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Pseudodestructorname2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                self.nestednamespecifier(0)
                self.state = 660
                self.match(CPP14_v2Parser.Template)
                self.state = 661
                self.simpletemplateid()
                self.state = 662
                self.match(CPP14_v2Parser.Doublecolon)
                self.state = 663
                self.match(CPP14_v2Parser.Tilde)
                self.state = 664
                self.thetypename()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Pseudodestructorname3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Decltype or _la==CPP14_v2Parser.Doublecolon or _la==CPP14_v2Parser.Identifier:
                    self.state = 666
                    self.nestednamespecifier(0)


                self.state = 669
                self.match(CPP14_v2Parser.Tilde)
                self.state = 670
                self.thetypename()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Pseudodestructorname4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 671
                self.match(CPP14_v2Parser.Tilde)
                self.state = 672
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_unaryexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Unaryexpression9Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noexceptexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoexceptexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression9" ):
                listener.enterUnaryexpression9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression9" ):
                listener.exitUnaryexpression9(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression9" ):
                return visitor.visitUnaryexpression9(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression10Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def newexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NewexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression10" ):
                listener.enterUnaryexpression10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression10" ):
                listener.exitUnaryexpression10(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression10" ):
                return visitor.visitUnaryexpression10(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression11Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def deleteexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeleteexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression11" ):
                listener.enterUnaryexpression11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression11" ):
                listener.exitUnaryexpression11(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression11" ):
                return visitor.visitUnaryexpression11(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression7Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Sizeof(self):
            return self.getToken(CPP14_v2Parser.Sizeof, 0)
        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression7" ):
                listener.enterUnaryexpression7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression7" ):
                listener.exitUnaryexpression7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression7" ):
                return visitor.visitUnaryexpression7(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression8Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Alignof(self):
            return self.getToken(CPP14_v2Parser.Alignof, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression8" ):
                listener.enterUnaryexpression8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression8" ):
                listener.exitUnaryexpression8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression8" ):
                return visitor.visitUnaryexpression8(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression1Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression1" ):
                listener.enterUnaryexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression1" ):
                listener.exitUnaryexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression1" ):
                return visitor.visitUnaryexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression2Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PlusPlus(self):
            return self.getToken(CPP14_v2Parser.PlusPlus, 0)
        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression2" ):
                listener.enterUnaryexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression2" ):
                listener.exitUnaryexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression2" ):
                return visitor.visitUnaryexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression5Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Sizeof(self):
            return self.getToken(CPP14_v2Parser.Sizeof, 0)
        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UnaryexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression5" ):
                listener.enterUnaryexpression5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression5" ):
                listener.exitUnaryexpression5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression5" ):
                return visitor.visitUnaryexpression5(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression6Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Sizeof(self):
            return self.getToken(CPP14_v2Parser.Sizeof, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression6" ):
                listener.enterUnaryexpression6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression6" ):
                listener.exitUnaryexpression6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression6" ):
                return visitor.visitUnaryexpression6(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression3Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MinusMinus(self):
            return self.getToken(CPP14_v2Parser.MinusMinus, 0)
        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression3" ):
                listener.enterUnaryexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression3" ):
                listener.exitUnaryexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression3" ):
                return visitor.visitUnaryexpression3(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression4Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryoperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UnaryoperatorContext,0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression4" ):
                listener.enterUnaryexpression4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression4" ):
                listener.exitUnaryexpression4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression4" ):
                return visitor.visitUnaryexpression4(self)
            else:
                return visitor.visitChildren(self)



    def unaryexpression(self):

        localctx = CPP14_v2Parser.UnaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_unaryexpression)
        try:
            self.state = 703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Unaryexpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 675
                self.postfixexpression(0)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Unaryexpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 676
                self.match(CPP14_v2Parser.PlusPlus)
                self.state = 677
                self.castexpression()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Unaryexpression3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 678
                self.match(CPP14_v2Parser.MinusMinus)
                self.state = 679
                self.castexpression()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Unaryexpression4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 680
                self.unaryoperator()
                self.state = 681
                self.castexpression()
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Unaryexpression5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 683
                self.match(CPP14_v2Parser.Sizeof)
                self.state = 684
                self.unaryexpression()
                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Unaryexpression6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 685
                self.match(CPP14_v2Parser.Sizeof)
                self.state = 686
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 687
                self.thetypeid()
                self.state = 688
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 7:
                localctx = CPP14_v2Parser.Unaryexpression7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 690
                self.match(CPP14_v2Parser.Sizeof)
                self.state = 691
                self.match(CPP14_v2Parser.Ellipsis)
                self.state = 692
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 693
                self.match(CPP14_v2Parser.Identifier)
                self.state = 694
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 8:
                localctx = CPP14_v2Parser.Unaryexpression8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 695
                self.match(CPP14_v2Parser.Alignof)
                self.state = 696
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 697
                self.thetypeid()
                self.state = 698
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 9:
                localctx = CPP14_v2Parser.Unaryexpression9Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 700
                self.noexceptexpression()
                pass

            elif la_ == 10:
                localctx = CPP14_v2Parser.Unaryexpression10Context(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 701
                self.newexpression()
                pass

            elif la_ == 11:
                localctx = CPP14_v2Parser.Unaryexpression11Context(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 702
                self.deleteexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_unaryoperator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Unaryoperator5Context(UnaryoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator5" ):
                listener.enterUnaryoperator5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator5" ):
                listener.exitUnaryoperator5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator5" ):
                return visitor.visitUnaryoperator5(self)
            else:
                return visitor.visitChildren(self)


    class Unaryoperator6Context(UnaryoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Tilde(self):
            return self.getToken(CPP14_v2Parser.Tilde, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator6" ):
                listener.enterUnaryoperator6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator6" ):
                listener.exitUnaryoperator6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator6" ):
                return visitor.visitUnaryoperator6(self)
            else:
                return visitor.visitChildren(self)


    class Unaryoperator3Context(UnaryoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def And(self):
            return self.getToken(CPP14_v2Parser.And, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator3" ):
                listener.enterUnaryoperator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator3" ):
                listener.exitUnaryoperator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator3" ):
                return visitor.visitUnaryoperator3(self)
            else:
                return visitor.visitChildren(self)


    class Unaryoperator4Context(UnaryoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Plus(self):
            return self.getToken(CPP14_v2Parser.Plus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator4" ):
                listener.enterUnaryoperator4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator4" ):
                listener.exitUnaryoperator4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator4" ):
                return visitor.visitUnaryoperator4(self)
            else:
                return visitor.visitChildren(self)


    class Unaryoperator7Context(UnaryoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Minus(self):
            return self.getToken(CPP14_v2Parser.Minus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator7" ):
                listener.enterUnaryoperator7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator7" ):
                listener.exitUnaryoperator7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator7" ):
                return visitor.visitUnaryoperator7(self)
            else:
                return visitor.visitChildren(self)


    class Unaryoperator8Context(UnaryoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator8" ):
                listener.enterUnaryoperator8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator8" ):
                listener.exitUnaryoperator8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator8" ):
                return visitor.visitUnaryoperator8(self)
            else:
                return visitor.visitChildren(self)


    class Unaryoperator1Context(UnaryoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Or(self):
            return self.getToken(CPP14_v2Parser.Or, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator1" ):
                listener.enterUnaryoperator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator1" ):
                listener.exitUnaryoperator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator1" ):
                return visitor.visitUnaryoperator1(self)
            else:
                return visitor.visitChildren(self)


    class Unaryoperator2Context(UnaryoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Star(self):
            return self.getToken(CPP14_v2Parser.Star, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator2" ):
                listener.enterUnaryoperator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator2" ):
                listener.exitUnaryoperator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator2" ):
                return visitor.visitUnaryoperator2(self)
            else:
                return visitor.visitChildren(self)



    def unaryoperator(self):

        localctx = CPP14_v2Parser.UnaryoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_unaryoperator)
        try:
            self.state = 713
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Or]:
                localctx = CPP14_v2Parser.Unaryoperator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 705
                self.match(CPP14_v2Parser.Or)
                pass
            elif token in [CPP14_v2Parser.Star]:
                localctx = CPP14_v2Parser.Unaryoperator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 706
                self.match(CPP14_v2Parser.Star)
                pass
            elif token in [CPP14_v2Parser.And]:
                localctx = CPP14_v2Parser.Unaryoperator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 707
                self.match(CPP14_v2Parser.And)
                pass
            elif token in [CPP14_v2Parser.Plus]:
                localctx = CPP14_v2Parser.Unaryoperator4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 708
                self.match(CPP14_v2Parser.Plus)
                pass
            elif token in [CPP14_v2Parser.T__0]:
                localctx = CPP14_v2Parser.Unaryoperator5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 709
                self.match(CPP14_v2Parser.T__0)
                pass
            elif token in [CPP14_v2Parser.Tilde]:
                localctx = CPP14_v2Parser.Unaryoperator6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 710
                self.match(CPP14_v2Parser.Tilde)
                pass
            elif token in [CPP14_v2Parser.Minus]:
                localctx = CPP14_v2Parser.Unaryoperator7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 711
                self.match(CPP14_v2Parser.Minus)
                pass
            elif token in [CPP14_v2Parser.T__1]:
                localctx = CPP14_v2Parser.Unaryoperator8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 712
                self.match(CPP14_v2Parser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_newexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Newexpression1Context(NewexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NewexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(CPP14_v2Parser.New, 0)
        def newtypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NewtypeidContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)
        def newplacement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NewplacementContext,0)

        def newinitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NewinitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewexpression1" ):
                listener.enterNewexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewexpression1" ):
                listener.exitNewexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewexpression1" ):
                return visitor.visitNewexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Newexpression2Context(NewexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NewexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(CPP14_v2Parser.New, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)
        def newplacement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NewplacementContext,0)

        def newinitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NewinitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewexpression2" ):
                listener.enterNewexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewexpression2" ):
                listener.exitNewexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewexpression2" ):
                return visitor.visitNewexpression2(self)
            else:
                return visitor.visitChildren(self)



    def newexpression(self):

        localctx = CPP14_v2Parser.NewexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_newexpression)
        self._la = 0 # Token type
        try:
            self.state = 739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Newexpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Doublecolon:
                    self.state = 715
                    self.match(CPP14_v2Parser.Doublecolon)


                self.state = 718
                self.match(CPP14_v2Parser.New)
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.LeftParen:
                    self.state = 719
                    self.newplacement()


                self.state = 722
                self.newtypeid()
                self.state = 724
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 723
                    self.newinitializer()


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Newexpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Doublecolon:
                    self.state = 726
                    self.match(CPP14_v2Parser.Doublecolon)


                self.state = 729
                self.match(CPP14_v2Parser.New)
                self.state = 731
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 730
                    self.newplacement()


                self.state = 733
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 734
                self.thetypeid()
                self.state = 735
                self.match(CPP14_v2Parser.RightParen)
                self.state = 737
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 736
                    self.newinitializer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewplacementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionlistContext,0)


        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_newplacement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewplacement" ):
                listener.enterNewplacement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewplacement" ):
                listener.exitNewplacement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewplacement" ):
                return visitor.visitNewplacement(self)
            else:
                return visitor.visitChildren(self)




    def newplacement(self):

        localctx = CPP14_v2Parser.NewplacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_newplacement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 742
            self.expressionlist()
            self.state = 743
            self.match(CPP14_v2Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewtypeidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierseqContext,0)


        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NewdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_newtypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewtypeid" ):
                listener.enterNewtypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewtypeid" ):
                listener.exitNewtypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewtypeid" ):
                return visitor.visitNewtypeid(self)
            else:
                return visitor.visitChildren(self)




    def newtypeid(self):

        localctx = CPP14_v2Parser.NewtypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_newtypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.typespecifierseq()
            self.state = 747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 746
                self.newdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_newdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Newdeclarator2Context(NewdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NewdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrnewdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewdeclarator2" ):
                listener.enterNewdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewdeclarator2" ):
                listener.exitNewdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewdeclarator2" ):
                return visitor.visitNewdeclarator2(self)
            else:
                return visitor.visitChildren(self)


    class Newdeclarator1Context(NewdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NewdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtroperatorContext,0)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NewdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewdeclarator1" ):
                listener.enterNewdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewdeclarator1" ):
                listener.exitNewdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewdeclarator1" ):
                return visitor.visitNewdeclarator1(self)
            else:
                return visitor.visitChildren(self)



    def newdeclarator(self):

        localctx = CPP14_v2Parser.NewdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_newdeclarator)
        try:
            self.state = 754
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.T__2, CPP14_v2Parser.Decltype, CPP14_v2Parser.Star, CPP14_v2Parser.And, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Newdeclarator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                self.ptroperator()
                self.state = 751
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 750
                    self.newdeclarator()


                pass
            elif token in [CPP14_v2Parser.LeftBracket]:
                localctx = CPP14_v2Parser.Newdeclarator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 753
                self.noptrnewdeclarator(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrnewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_noptrnewdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Noptrnewdeclarator2Context(NoptrnewdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrnewdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrnewdeclaratorContext,0)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrnewdeclarator2" ):
                listener.enterNoptrnewdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrnewdeclarator2" ):
                listener.exitNoptrnewdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrnewdeclarator2" ):
                return visitor.visitNoptrnewdeclarator2(self)
            else:
                return visitor.visitChildren(self)


    class Noptrnewdeclarator1Context(NoptrnewdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrnewdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrnewdeclarator1" ):
                listener.enterNoptrnewdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrnewdeclarator1" ):
                listener.exitNoptrnewdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrnewdeclarator1" ):
                return visitor.visitNoptrnewdeclarator1(self)
            else:
                return visitor.visitChildren(self)



    def noptrnewdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.NoptrnewdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_noptrnewdeclarator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Noptrnewdeclarator1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 757
            self.match(CPP14_v2Parser.LeftBracket)
            self.state = 758
            self.expression(0)
            self.state = 759
            self.match(CPP14_v2Parser.RightBracket)
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 760
                self.attributespecifierseq(0)


            self._ctx.stop = self._input.LT(-1)
            self.state = 772
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Noptrnewdeclarator2Context(self, CPP14_v2Parser.NoptrnewdeclaratorContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrnewdeclarator)
                    self.state = 763
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 764
                    self.match(CPP14_v2Parser.LeftBracket)
                    self.state = 765
                    self.constantexpression()
                    self.state = 766
                    self.match(CPP14_v2Parser.RightBracket)
                    self.state = 768
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                    if la_ == 1:
                        self.state = 767
                        self.attributespecifierseq(0)

             
                self.state = 774
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NewinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_newinitializer

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Newinitializer2Context(NewinitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NewinitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewinitializer2" ):
                listener.enterNewinitializer2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewinitializer2" ):
                listener.exitNewinitializer2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewinitializer2" ):
                return visitor.visitNewinitializer2(self)
            else:
                return visitor.visitChildren(self)


    class Newinitializer1Context(NewinitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NewinitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def expressionlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewinitializer1" ):
                listener.enterNewinitializer1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewinitializer1" ):
                listener.exitNewinitializer1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewinitializer1" ):
                return visitor.visitNewinitializer1(self)
            else:
                return visitor.visitChildren(self)



    def newinitializer(self):

        localctx = CPP14_v2Parser.NewinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_newinitializer)
        self._la = 0 # Token type
        try:
            self.state = 781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.LeftParen]:
                localctx = CPP14_v2Parser.Newinitializer1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 775
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.LeftBrace - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 776
                    self.expressionlist()


                self.state = 779
                self.match(CPP14_v2Parser.RightParen)
                pass
            elif token in [CPP14_v2Parser.LeftBrace]:
                localctx = CPP14_v2Parser.Newinitializer2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 780
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_deleteexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Deleteexpression1Context(DeleteexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeleteexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Delete(self):
            return self.getToken(CPP14_v2Parser.Delete, 0)
        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteexpression1" ):
                listener.enterDeleteexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteexpression1" ):
                listener.exitDeleteexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteexpression1" ):
                return visitor.visitDeleteexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Deleteexpression2Context(DeleteexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeleteexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Delete(self):
            return self.getToken(CPP14_v2Parser.Delete, 0)
        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)
        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteexpression2" ):
                listener.enterDeleteexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteexpression2" ):
                listener.exitDeleteexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteexpression2" ):
                return visitor.visitDeleteexpression2(self)
            else:
                return visitor.visitChildren(self)



    def deleteexpression(self):

        localctx = CPP14_v2Parser.DeleteexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_deleteexpression)
        self._la = 0 # Token type
        try:
            self.state = 795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Deleteexpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Doublecolon:
                    self.state = 783
                    self.match(CPP14_v2Parser.Doublecolon)


                self.state = 786
                self.match(CPP14_v2Parser.Delete)
                self.state = 787
                self.castexpression()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Deleteexpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Doublecolon:
                    self.state = 788
                    self.match(CPP14_v2Parser.Doublecolon)


                self.state = 791
                self.match(CPP14_v2Parser.Delete)
                self.state = 792
                self.match(CPP14_v2Parser.LeftBracket)
                self.state = 793
                self.match(CPP14_v2Parser.RightBracket)
                self.state = 794
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoexceptexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(CPP14_v2Parser.Noexcept, 0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_noexceptexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoexceptexpression" ):
                listener.enterNoexceptexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoexceptexpression" ):
                listener.exitNoexceptexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoexceptexpression" ):
                return visitor.visitNoexceptexpression(self)
            else:
                return visitor.visitChildren(self)




    def noexceptexpression(self):

        localctx = CPP14_v2Parser.NoexceptexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_noexceptexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.match(CPP14_v2Parser.Noexcept)
            self.state = 798
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 799
            self.expression(0)
            self.state = 800
            self.match(CPP14_v2Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_castexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Castexpression2Context(CastexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CastexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastexpression2" ):
                listener.enterCastexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastexpression2" ):
                listener.exitCastexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastexpression2" ):
                return visitor.visitCastexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Castexpression1Context(CastexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CastexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UnaryexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastexpression1" ):
                listener.enterCastexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastexpression1" ):
                listener.exitCastexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastexpression1" ):
                return visitor.visitCastexpression1(self)
            else:
                return visitor.visitChildren(self)



    def castexpression(self):

        localctx = CPP14_v2Parser.CastexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_castexpression)
        try:
            self.state = 808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Castexpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 802
                self.unaryexpression()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Castexpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 803
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 804
                self.thetypeid()
                self.state = 805
                self.match(CPP14_v2Parser.RightParen)
                self.state = 806
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PmexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_pmexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Pmexpression2Context(PmexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PmexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PmexpressionContext,0)

        def DotStar(self):
            return self.getToken(CPP14_v2Parser.DotStar, 0)
        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPmexpression2" ):
                listener.enterPmexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPmexpression2" ):
                listener.exitPmexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPmexpression2" ):
                return visitor.visitPmexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Pmexpression1Context(PmexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PmexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPmexpression1" ):
                listener.enterPmexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPmexpression1" ):
                listener.exitPmexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPmexpression1" ):
                return visitor.visitPmexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Pmexpression3Context(PmexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PmexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PmexpressionContext,0)

        def ArrowStar(self):
            return self.getToken(CPP14_v2Parser.ArrowStar, 0)
        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPmexpression3" ):
                listener.enterPmexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPmexpression3" ):
                listener.exitPmexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPmexpression3" ):
                return visitor.visitPmexpression3(self)
            else:
                return visitor.visitChildren(self)



    def pmexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.PmexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_pmexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Pmexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 811
            self.castexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 821
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 819
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Pmexpression2Context(self, CPP14_v2Parser.PmexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 813
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 814
                        self.match(CPP14_v2Parser.DotStar)
                        self.state = 815
                        self.castexpression()
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Pmexpression3Context(self, CPP14_v2Parser.PmexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 816
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 817
                        self.match(CPP14_v2Parser.ArrowStar)
                        self.state = 818
                        self.castexpression()
                        pass

             
                self.state = 823
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_multiplicativeexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Multiplicativeexpression1Context(MultiplicativeexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MultiplicativeexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PmexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeexpression1" ):
                listener.enterMultiplicativeexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeexpression1" ):
                listener.exitMultiplicativeexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeexpression1" ):
                return visitor.visitMultiplicativeexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Multiplicativeexpression3Context(MultiplicativeexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MultiplicativeexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MultiplicativeexpressionContext,0)

        def Div(self):
            return self.getToken(CPP14_v2Parser.Div, 0)
        def pmexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PmexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeexpression3" ):
                listener.enterMultiplicativeexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeexpression3" ):
                listener.exitMultiplicativeexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeexpression3" ):
                return visitor.visitMultiplicativeexpression3(self)
            else:
                return visitor.visitChildren(self)


    class Multiplicativeexpression2Context(MultiplicativeexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MultiplicativeexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MultiplicativeexpressionContext,0)

        def Star(self):
            return self.getToken(CPP14_v2Parser.Star, 0)
        def pmexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PmexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeexpression2" ):
                listener.enterMultiplicativeexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeexpression2" ):
                listener.exitMultiplicativeexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeexpression2" ):
                return visitor.visitMultiplicativeexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Multiplicativeexpression4Context(MultiplicativeexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MultiplicativeexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MultiplicativeexpressionContext,0)

        def Mod(self):
            return self.getToken(CPP14_v2Parser.Mod, 0)
        def pmexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PmexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeexpression4" ):
                listener.enterMultiplicativeexpression4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeexpression4" ):
                listener.exitMultiplicativeexpression4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeexpression4" ):
                return visitor.visitMultiplicativeexpression4(self)
            else:
                return visitor.visitChildren(self)



    def multiplicativeexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.MultiplicativeexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_multiplicativeexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Multiplicativeexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 825
            self.pmexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 838
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 836
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Multiplicativeexpression2Context(self, CPP14_v2Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 827
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 828
                        self.match(CPP14_v2Parser.Star)
                        self.state = 829
                        self.pmexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Multiplicativeexpression3Context(self, CPP14_v2Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 830
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 831
                        self.match(CPP14_v2Parser.Div)
                        self.state = 832
                        self.pmexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14_v2Parser.Multiplicativeexpression4Context(self, CPP14_v2Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 833
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 834
                        self.match(CPP14_v2Parser.Mod)
                        self.state = 835
                        self.pmexpression(0)
                        pass

             
                self.state = 840
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AdditiveexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_additiveexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Additiveexpression3Context(AdditiveexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AdditiveexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AdditiveexpressionContext,0)

        def Minus(self):
            return self.getToken(CPP14_v2Parser.Minus, 0)
        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MultiplicativeexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveexpression3" ):
                listener.enterAdditiveexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveexpression3" ):
                listener.exitAdditiveexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveexpression3" ):
                return visitor.visitAdditiveexpression3(self)
            else:
                return visitor.visitChildren(self)


    class Additiveexpression2Context(AdditiveexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AdditiveexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AdditiveexpressionContext,0)

        def Plus(self):
            return self.getToken(CPP14_v2Parser.Plus, 0)
        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MultiplicativeexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveexpression2" ):
                listener.enterAdditiveexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveexpression2" ):
                listener.exitAdditiveexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveexpression2" ):
                return visitor.visitAdditiveexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Additiveexpression1Context(AdditiveexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AdditiveexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MultiplicativeexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveexpression1" ):
                listener.enterAdditiveexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveexpression1" ):
                listener.exitAdditiveexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveexpression1" ):
                return visitor.visitAdditiveexpression1(self)
            else:
                return visitor.visitChildren(self)



    def additiveexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.AdditiveexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 66
        self.enterRecursionRule(localctx, 66, self.RULE_additiveexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Additiveexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 842
            self.multiplicativeexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 852
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 850
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Additiveexpression2Context(self, CPP14_v2Parser.AdditiveexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 844
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 845
                        self.match(CPP14_v2Parser.Plus)
                        self.state = 846
                        self.multiplicativeexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Additiveexpression3Context(self, CPP14_v2Parser.AdditiveexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 847
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 848
                        self.match(CPP14_v2Parser.Minus)
                        self.state = 849
                        self.multiplicativeexpression(0)
                        pass

             
                self.state = 854
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ShiftexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_shiftexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Shiftexpression2Context(ShiftexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ShiftexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ShiftexpressionContext,0)

        def shiftoperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ShiftoperatorContext,0)

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AdditiveexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftexpression2" ):
                listener.enterShiftexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftexpression2" ):
                listener.exitShiftexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftexpression2" ):
                return visitor.visitShiftexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Shiftexpression1Context(ShiftexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ShiftexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AdditiveexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftexpression1" ):
                listener.enterShiftexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftexpression1" ):
                listener.exitShiftexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftexpression1" ):
                return visitor.visitShiftexpression1(self)
            else:
                return visitor.visitChildren(self)



    def shiftexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.ShiftexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_shiftexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Shiftexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 856
            self.additiveexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 864
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Shiftexpression2Context(self, CPP14_v2Parser.ShiftexpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                    self.state = 858
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 859
                    self.shiftoperator()
                    self.state = 860
                    self.additiveexpression(0) 
                self.state = 866
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ShiftoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_shiftoperator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Shiftoperator1Context(ShiftoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ShiftoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RightShift(self):
            return self.getToken(CPP14_v2Parser.RightShift, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftoperator1" ):
                listener.enterShiftoperator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftoperator1" ):
                listener.exitShiftoperator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftoperator1" ):
                return visitor.visitShiftoperator1(self)
            else:
                return visitor.visitChildren(self)


    class Shiftoperator2Context(ShiftoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ShiftoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftShift(self):
            return self.getToken(CPP14_v2Parser.LeftShift, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftoperator2" ):
                listener.enterShiftoperator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftoperator2" ):
                listener.exitShiftoperator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftoperator2" ):
                return visitor.visitShiftoperator2(self)
            else:
                return visitor.visitChildren(self)



    def shiftoperator(self):

        localctx = CPP14_v2Parser.ShiftoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_shiftoperator)
        try:
            self.state = 869
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.RightShift]:
                localctx = CPP14_v2Parser.Shiftoperator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 867
                self.match(CPP14_v2Parser.RightShift)
                pass
            elif token in [CPP14_v2Parser.LeftShift]:
                localctx = CPP14_v2Parser.Shiftoperator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 868
                self.match(CPP14_v2Parser.LeftShift)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_relationalexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Relationalexpression2Context(RelationalexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.RelationalexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.RelationalexpressionContext,0)

        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ShiftexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalexpression2" ):
                listener.enterRelationalexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalexpression2" ):
                listener.exitRelationalexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalexpression2" ):
                return visitor.visitRelationalexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Relationalexpression1Context(RelationalexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.RelationalexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ShiftexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalexpression1" ):
                listener.enterRelationalexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalexpression1" ):
                listener.exitRelationalexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalexpression1" ):
                return visitor.visitRelationalexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Relationalexpression4Context(RelationalexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.RelationalexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.RelationalexpressionContext,0)

        def LessEqual(self):
            return self.getToken(CPP14_v2Parser.LessEqual, 0)
        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ShiftexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalexpression4" ):
                listener.enterRelationalexpression4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalexpression4" ):
                listener.exitRelationalexpression4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalexpression4" ):
                return visitor.visitRelationalexpression4(self)
            else:
                return visitor.visitChildren(self)


    class Relationalexpression3Context(RelationalexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.RelationalexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.RelationalexpressionContext,0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ShiftexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalexpression3" ):
                listener.enterRelationalexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalexpression3" ):
                listener.exitRelationalexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalexpression3" ):
                return visitor.visitRelationalexpression3(self)
            else:
                return visitor.visitChildren(self)


    class Relationalexpression5Context(RelationalexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.RelationalexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.RelationalexpressionContext,0)

        def GreaterEqual(self):
            return self.getToken(CPP14_v2Parser.GreaterEqual, 0)
        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ShiftexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalexpression5" ):
                listener.enterRelationalexpression5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalexpression5" ):
                listener.exitRelationalexpression5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalexpression5" ):
                return visitor.visitRelationalexpression5(self)
            else:
                return visitor.visitChildren(self)



    def relationalexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.RelationalexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 72
        self.enterRecursionRule(localctx, 72, self.RULE_relationalexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Relationalexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 872
            self.shiftexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 888
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 886
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Relationalexpression2Context(self, CPP14_v2Parser.RelationalexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 874
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 875
                        self.match(CPP14_v2Parser.Less)
                        self.state = 876
                        self.shiftexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Relationalexpression3Context(self, CPP14_v2Parser.RelationalexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 877
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 878
                        self.match(CPP14_v2Parser.Greater)
                        self.state = 879
                        self.shiftexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14_v2Parser.Relationalexpression4Context(self, CPP14_v2Parser.RelationalexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 880
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 881
                        self.match(CPP14_v2Parser.LessEqual)
                        self.state = 882
                        self.shiftexpression(0)
                        pass

                    elif la_ == 4:
                        localctx = CPP14_v2Parser.Relationalexpression5Context(self, CPP14_v2Parser.RelationalexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 883
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 884
                        self.match(CPP14_v2Parser.GreaterEqual)
                        self.state = 885
                        self.shiftexpression(0)
                        pass

             
                self.state = 890
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_equalityexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Equalityexpression1Context(EqualityexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EqualityexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.RelationalexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityexpression1" ):
                listener.enterEqualityexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityexpression1" ):
                listener.exitEqualityexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityexpression1" ):
                return visitor.visitEqualityexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Equalityexpression2Context(EqualityexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EqualityexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EqualityexpressionContext,0)

        def Equal(self):
            return self.getToken(CPP14_v2Parser.Equal, 0)
        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.RelationalexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityexpression2" ):
                listener.enterEqualityexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityexpression2" ):
                listener.exitEqualityexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityexpression2" ):
                return visitor.visitEqualityexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Equalityexpression3Context(EqualityexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EqualityexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EqualityexpressionContext,0)

        def NotEqual(self):
            return self.getToken(CPP14_v2Parser.NotEqual, 0)
        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.RelationalexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityexpression3" ):
                listener.enterEqualityexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityexpression3" ):
                listener.exitEqualityexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityexpression3" ):
                return visitor.visitEqualityexpression3(self)
            else:
                return visitor.visitChildren(self)



    def equalityexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.EqualityexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_equalityexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Equalityexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 892
            self.relationalexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 902
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 900
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Equalityexpression2Context(self, CPP14_v2Parser.EqualityexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 894
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 895
                        self.match(CPP14_v2Parser.Equal)
                        self.state = 896
                        self.relationalexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Equalityexpression3Context(self, CPP14_v2Parser.EqualityexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 897
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 898
                        self.match(CPP14_v2Parser.NotEqual)
                        self.state = 899
                        self.relationalexpression(0)
                        pass

             
                self.state = 904
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AndexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_andexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Andexpression2Context(AndexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AndexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def andexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AndexpressionContext,0)

        def And(self):
            return self.getToken(CPP14_v2Parser.And, 0)
        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EqualityexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndexpression2" ):
                listener.enterAndexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndexpression2" ):
                listener.exitAndexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndexpression2" ):
                return visitor.visitAndexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Andexpression1Context(AndexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AndexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EqualityexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndexpression1" ):
                listener.enterAndexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndexpression1" ):
                listener.exitAndexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndexpression1" ):
                return visitor.visitAndexpression1(self)
            else:
                return visitor.visitChildren(self)



    def andexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.AndexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_andexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Andexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 906
            self.equalityexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 913
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Andexpression2Context(self, CPP14_v2Parser.AndexpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andexpression)
                    self.state = 908
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 909
                    self.match(CPP14_v2Parser.And)
                    self.state = 910
                    self.equalityexpression(0) 
                self.state = 915
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExclusiveorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_exclusiveorexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Exclusiveorexpression2Context(ExclusiveorexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ExclusiveorexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExclusiveorexpressionContext,0)

        def Caret(self):
            return self.getToken(CPP14_v2Parser.Caret, 0)
        def andexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AndexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveorexpression2" ):
                listener.enterExclusiveorexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveorexpression2" ):
                listener.exitExclusiveorexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclusiveorexpression2" ):
                return visitor.visitExclusiveorexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Exclusiveorexpression1Context(ExclusiveorexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ExclusiveorexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def andexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AndexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveorexpression1" ):
                listener.enterExclusiveorexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveorexpression1" ):
                listener.exitExclusiveorexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclusiveorexpression1" ):
                return visitor.visitExclusiveorexpression1(self)
            else:
                return visitor.visitChildren(self)



    def exclusiveorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.ExclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_exclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Exclusiveorexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 917
            self.andexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 924
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Exclusiveorexpression2Context(self, CPP14_v2Parser.ExclusiveorexpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveorexpression)
                    self.state = 919
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 920
                    self.match(CPP14_v2Parser.Caret)
                    self.state = 921
                    self.andexpression(0) 
                self.state = 926
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InclusiveorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_inclusiveorexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Inclusiveorexpression1Context(InclusiveorexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InclusiveorexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExclusiveorexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveorexpression1" ):
                listener.enterInclusiveorexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveorexpression1" ):
                listener.exitInclusiveorexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclusiveorexpression1" ):
                return visitor.visitInclusiveorexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Inclusiveorexpressio2Context(InclusiveorexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InclusiveorexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InclusiveorexpressionContext,0)

        def Or(self):
            return self.getToken(CPP14_v2Parser.Or, 0)
        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExclusiveorexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveorexpressio2" ):
                listener.enterInclusiveorexpressio2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveorexpressio2" ):
                listener.exitInclusiveorexpressio2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclusiveorexpressio2" ):
                return visitor.visitInclusiveorexpressio2(self)
            else:
                return visitor.visitChildren(self)



    def inclusiveorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.InclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_inclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Inclusiveorexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 928
            self.exclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 935
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Inclusiveorexpressio2Context(self, CPP14_v2Parser.InclusiveorexpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveorexpression)
                    self.state = 930
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 931
                    self.match(CPP14_v2Parser.Or)
                    self.state = 932
                    self.exclusiveorexpression(0) 
                self.state = 937
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalandexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_logicalandexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Logicalandexpression2Context(LogicalandexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LogicalandexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalandexpressionContext,0)

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InclusiveorexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalandexpression2" ):
                listener.enterLogicalandexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalandexpression2" ):
                listener.exitLogicalandexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalandexpression2" ):
                return visitor.visitLogicalandexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Logicalandexpression3Context(LogicalandexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LogicalandexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalandexpressionContext,0)

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InclusiveorexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalandexpression3" ):
                listener.enterLogicalandexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalandexpression3" ):
                listener.exitLogicalandexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalandexpression3" ):
                return visitor.visitLogicalandexpression3(self)
            else:
                return visitor.visitChildren(self)


    class Logicalandexpression1Context(LogicalandexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LogicalandexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InclusiveorexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalandexpression1" ):
                listener.enterLogicalandexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalandexpression1" ):
                listener.exitLogicalandexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalandexpression1" ):
                return visitor.visitLogicalandexpression1(self)
            else:
                return visitor.visitChildren(self)



    def logicalandexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.LogicalandexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_logicalandexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Logicalandexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 939
            self.inclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 949
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 947
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Logicalandexpression2Context(self, CPP14_v2Parser.LogicalandexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalandexpression)
                        self.state = 941
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 942
                        self.match(CPP14_v2Parser.T__2)
                        self.state = 943
                        self.inclusiveorexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Logicalandexpression3Context(self, CPP14_v2Parser.LogicalandexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalandexpression)
                        self.state = 944
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 945
                        self.match(CPP14_v2Parser.T__3)
                        self.state = 946
                        self.inclusiveorexpression(0)
                        pass

             
                self.state = 951
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_logicalorexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Logicalorexpression1Context(LogicalorexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LogicalorexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalandexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalorexpression1" ):
                listener.enterLogicalorexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalorexpression1" ):
                listener.exitLogicalorexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalorexpression1" ):
                return visitor.visitLogicalorexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Logicalorexpression2Context(LogicalorexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LogicalorexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalorexpressionContext,0)

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalandexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalorexpression2" ):
                listener.enterLogicalorexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalorexpression2" ):
                listener.exitLogicalorexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalorexpression2" ):
                return visitor.visitLogicalorexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Logicalorexpression3Context(LogicalorexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LogicalorexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalorexpressionContext,0)

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalandexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalorexpression3" ):
                listener.enterLogicalorexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalorexpression3" ):
                listener.exitLogicalorexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalorexpression3" ):
                return visitor.visitLogicalorexpression3(self)
            else:
                return visitor.visitChildren(self)



    def logicalorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.LogicalorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_logicalorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Logicalorexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 953
            self.logicalandexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 963
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 961
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Logicalorexpression2Context(self, CPP14_v2Parser.LogicalorexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalorexpression)
                        self.state = 955
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 956
                        self.match(CPP14_v2Parser.T__4)
                        self.state = 957
                        self.logicalandexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Logicalorexpression3Context(self, CPP14_v2Parser.LogicalorexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalorexpression)
                        self.state = 958
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 959
                        self.match(CPP14_v2Parser.T__5)
                        self.state = 960
                        self.logicalandexpression(0)
                        pass

             
                self.state = 965
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_conditionalexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Conditionalexpression1Context(ConditionalexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ConditionalexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalorexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalexpression1" ):
                listener.enterConditionalexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalexpression1" ):
                listener.exitConditionalexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalexpression1" ):
                return visitor.visitConditionalexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Conditionalexpression2Context(ConditionalexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ConditionalexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalorexpressionContext,0)

        def Question(self):
            return self.getToken(CPP14_v2Parser.Question, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)
        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AssignmentexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalexpression2" ):
                listener.enterConditionalexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalexpression2" ):
                listener.exitConditionalexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalexpression2" ):
                return visitor.visitConditionalexpression2(self)
            else:
                return visitor.visitChildren(self)



    def conditionalexpression(self):

        localctx = CPP14_v2Parser.ConditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_conditionalexpression)
        try:
            self.state = 973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Conditionalexpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 966
                self.logicalorexpression(0)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Conditionalexpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 967
                self.logicalorexpression(0)
                self.state = 968
                self.match(CPP14_v2Parser.Question)
                self.state = 969
                self.expression(0)
                self.state = 970
                self.match(CPP14_v2Parser.Colon)
                self.state = 971
                self.assignmentexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_assignmentexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Assignmentexpression1Context(AssignmentexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConditionalexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentexpression1" ):
                listener.enterAssignmentexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentexpression1" ):
                listener.exitAssignmentexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentexpression1" ):
                return visitor.visitAssignmentexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentexpression2Context(AssignmentexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalorexpressionContext,0)

        def assignmentoperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AssignmentoperatorContext,0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerclauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentexpression2" ):
                listener.enterAssignmentexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentexpression2" ):
                listener.exitAssignmentexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentexpression2" ):
                return visitor.visitAssignmentexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentexpression3Context(AssignmentexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def throwexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThrowexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentexpression3" ):
                listener.enterAssignmentexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentexpression3" ):
                listener.exitAssignmentexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentexpression3" ):
                return visitor.visitAssignmentexpression3(self)
            else:
                return visitor.visitChildren(self)



    def assignmentexpression(self):

        localctx = CPP14_v2Parser.AssignmentexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_assignmentexpression)
        try:
            self.state = 981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Assignmentexpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 975
                self.conditionalexpression()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Assignmentexpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 976
                self.logicalorexpression(0)
                self.state = 977
                self.assignmentoperator()
                self.state = 978
                self.initializerclause()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Assignmentexpression3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 980
                self.throwexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_assignmentoperator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Assignmentoperator6Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MinusAssign(self):
            return self.getToken(CPP14_v2Parser.MinusAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator6" ):
                listener.enterAssignmentoperator6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator6" ):
                listener.exitAssignmentoperator6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator6" ):
                return visitor.visitAssignmentoperator6(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator11Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OrAssign(self):
            return self.getToken(CPP14_v2Parser.OrAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator11" ):
                listener.enterAssignmentoperator11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator11" ):
                listener.exitAssignmentoperator11(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator11" ):
                return visitor.visitAssignmentoperator11(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator5Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PlusAssign(self):
            return self.getToken(CPP14_v2Parser.PlusAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator5" ):
                listener.enterAssignmentoperator5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator5" ):
                listener.exitAssignmentoperator5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator5" ):
                return visitor.visitAssignmentoperator5(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator10Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def XorAssign(self):
            return self.getToken(CPP14_v2Parser.XorAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator10" ):
                listener.enterAssignmentoperator10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator10" ):
                listener.exitAssignmentoperator10(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator10" ):
                return visitor.visitAssignmentoperator10(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator8Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftShiftAssign(self):
            return self.getToken(CPP14_v2Parser.LeftShiftAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator8" ):
                listener.enterAssignmentoperator8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator8" ):
                listener.exitAssignmentoperator8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator8" ):
                return visitor.visitAssignmentoperator8(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator7Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RightShiftAssign(self):
            return self.getToken(CPP14_v2Parser.RightShiftAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator7" ):
                listener.enterAssignmentoperator7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator7" ):
                listener.exitAssignmentoperator7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator7" ):
                return visitor.visitAssignmentoperator7(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator2Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StarAssign(self):
            return self.getToken(CPP14_v2Parser.StarAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator2" ):
                listener.enterAssignmentoperator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator2" ):
                listener.exitAssignmentoperator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator2" ):
                return visitor.visitAssignmentoperator2(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator1Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator1" ):
                listener.enterAssignmentoperator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator1" ):
                listener.exitAssignmentoperator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator1" ):
                return visitor.visitAssignmentoperator1(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator4Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ModAssign(self):
            return self.getToken(CPP14_v2Parser.ModAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator4" ):
                listener.enterAssignmentoperator4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator4" ):
                listener.exitAssignmentoperator4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator4" ):
                return visitor.visitAssignmentoperator4(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator3Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DivAssign(self):
            return self.getToken(CPP14_v2Parser.DivAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator3" ):
                listener.enterAssignmentoperator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator3" ):
                listener.exitAssignmentoperator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator3" ):
                return visitor.visitAssignmentoperator3(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator9Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AndAssign(self):
            return self.getToken(CPP14_v2Parser.AndAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator9" ):
                listener.enterAssignmentoperator9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator9" ):
                listener.exitAssignmentoperator9(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator9" ):
                return visitor.visitAssignmentoperator9(self)
            else:
                return visitor.visitChildren(self)



    def assignmentoperator(self):

        localctx = CPP14_v2Parser.AssignmentoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_assignmentoperator)
        try:
            self.state = 994
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Assign]:
                localctx = CPP14_v2Parser.Assignmentoperator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 983
                self.match(CPP14_v2Parser.Assign)
                pass
            elif token in [CPP14_v2Parser.StarAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 984
                self.match(CPP14_v2Parser.StarAssign)
                pass
            elif token in [CPP14_v2Parser.DivAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 985
                self.match(CPP14_v2Parser.DivAssign)
                pass
            elif token in [CPP14_v2Parser.ModAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 986
                self.match(CPP14_v2Parser.ModAssign)
                pass
            elif token in [CPP14_v2Parser.PlusAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 987
                self.match(CPP14_v2Parser.PlusAssign)
                pass
            elif token in [CPP14_v2Parser.MinusAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 988
                self.match(CPP14_v2Parser.MinusAssign)
                pass
            elif token in [CPP14_v2Parser.RightShiftAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 989
                self.match(CPP14_v2Parser.RightShiftAssign)
                pass
            elif token in [CPP14_v2Parser.LeftShiftAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 990
                self.match(CPP14_v2Parser.LeftShiftAssign)
                pass
            elif token in [CPP14_v2Parser.AndAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator9Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 991
                self.match(CPP14_v2Parser.AndAssign)
                pass
            elif token in [CPP14_v2Parser.XorAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator10Context(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 992
                self.match(CPP14_v2Parser.XorAssign)
                pass
            elif token in [CPP14_v2Parser.OrAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator11Context(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 993
                self.match(CPP14_v2Parser.OrAssign)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AssignmentexpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)


        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.assignmentexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1004
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 999
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1000
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 1001
                    self.assignmentexpression() 
                self.state = 1006
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConditionalexpressionContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_constantexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantexpression" ):
                listener.enterConstantexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantexpression" ):
                listener.exitConstantexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantexpression" ):
                return visitor.visitConstantexpression(self)
            else:
                return visitor.visitChildren(self)




    def constantexpression(self):

        localctx = CPP14_v2Parser.ConstantexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_constantexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.conditionalexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LabeledstatementContext,0)


        def expressionstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionstatementContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CompoundstatementContext,0)


        def selectionstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SelectionstatementContext,0)


        def iterationstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.IterationstatementContext,0)


        def jumpstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.JumpstatementContext,0)


        def declarationstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationstatementContext,0)


        def tryblock(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TryblockContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = CPP14_v2Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1009
                self.labeledstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1011
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 1010
                    self.attributespecifierseq(0)


                self.state = 1013
                self.expressionstatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1014
                    self.attributespecifierseq(0)


                self.state = 1017
                self.compoundstatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1018
                    self.attributespecifierseq(0)


                self.state = 1021
                self.selectionstatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1022
                    self.attributespecifierseq(0)


                self.state = 1025
                self.iterationstatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1026
                    self.attributespecifierseq(0)


                self.state = 1029
                self.jumpstatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1030
                self.declarationstatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1031
                    self.attributespecifierseq(0)


                self.state = 1034
                self.tryblock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_labeledstatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Labeledstatement2Context(LabeledstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LabeledstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Case(self):
            return self.getToken(CPP14_v2Parser.Case, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledstatement2" ):
                listener.enterLabeledstatement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledstatement2" ):
                listener.exitLabeledstatement2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledstatement2" ):
                return visitor.visitLabeledstatement2(self)
            else:
                return visitor.visitChildren(self)


    class Labeledstatement3Context(LabeledstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LabeledstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Default(self):
            return self.getToken(CPP14_v2Parser.Default, 0)
        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledstatement3" ):
                listener.enterLabeledstatement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledstatement3" ):
                listener.exitLabeledstatement3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledstatement3" ):
                return visitor.visitLabeledstatement3(self)
            else:
                return visitor.visitChildren(self)


    class Labeledstatement1Context(LabeledstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LabeledstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledstatement1" ):
                listener.enterLabeledstatement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledstatement1" ):
                listener.exitLabeledstatement1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledstatement1" ):
                return visitor.visitLabeledstatement1(self)
            else:
                return visitor.visitChildren(self)



    def labeledstatement(self):

        localctx = CPP14_v2Parser.LabeledstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_labeledstatement)
        self._la = 0 # Token type
        try:
            self.state = 1057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Labeledstatement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1037
                    self.attributespecifierseq(0)


                self.state = 1040
                self.match(CPP14_v2Parser.Identifier)
                self.state = 1041
                self.match(CPP14_v2Parser.Colon)
                self.state = 1042
                self.statement()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Labeledstatement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1043
                    self.attributespecifierseq(0)


                self.state = 1046
                self.match(CPP14_v2Parser.Case)
                self.state = 1047
                self.constantexpression()
                self.state = 1048
                self.match(CPP14_v2Parser.Colon)
                self.state = 1049
                self.statement()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Labeledstatement3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1051
                    self.attributespecifierseq(0)


                self.state = 1054
                self.match(CPP14_v2Parser.Default)
                self.state = 1055
                self.match(CPP14_v2Parser.Colon)
                self.state = 1056
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_expressionstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionstatement" ):
                listener.enterExpressionstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionstatement" ):
                listener.exitExpressionstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionstatement" ):
                return visitor.visitExpressionstatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionstatement(self):

        localctx = CPP14_v2Parser.ExpressionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_expressionstatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                self.state = 1059
                self.expression(0)


            self.state = 1062
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)

        def statementseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_compoundstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundstatement" ):
                listener.enterCompoundstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundstatement" ):
                listener.exitCompoundstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundstatement" ):
                return visitor.visitCompoundstatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundstatement(self):

        localctx = CPP14_v2Parser.CompoundstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_compoundstatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.match(CPP14_v2Parser.LeftBrace)
            self.state = 1066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Asm) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Break) | (1 << CPP14_v2Parser.Case) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Constexpr) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Continue) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Default) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Do) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.Explicit) | (1 << CPP14_v2Parser.Extern) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.For) | (1 << CPP14_v2Parser.Friend) | (1 << CPP14_v2Parser.Goto) | (1 << CPP14_v2Parser.If) | (1 << CPP14_v2Parser.Inline) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.Mutable) | (1 << CPP14_v2Parser.Namespace) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Register) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Return) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof) | (1 << CPP14_v2Parser.Static) | (1 << CPP14_v2Parser.Static_assert))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.Struct - 64)) | (1 << (CPP14_v2Parser.Switch - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Thread_local - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Try - 64)) | (1 << (CPP14_v2Parser.Typedef - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Union - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Using - 64)) | (1 << (CPP14_v2Parser.Virtual - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Volatile - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.While - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.LeftBrace - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Semi - 128)) | (1 << (CPP14_v2Parser.Ellipsis - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                self.state = 1065
                self.statementseq(0)


            self.state = 1068
            self.match(CPP14_v2Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_statementseq

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Statementseq1Context(StatementseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.StatementseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementseq1" ):
                listener.enterStatementseq1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementseq1" ):
                listener.exitStatementseq1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementseq1" ):
                return visitor.visitStatementseq1(self)
            else:
                return visitor.visitChildren(self)


    class Statementseq2Context(StatementseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.StatementseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def statementseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementseqContext,0)

        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementseq2" ):
                listener.enterStatementseq2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementseq2" ):
                listener.exitStatementseq2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementseq2" ):
                return visitor.visitStatementseq2(self)
            else:
                return visitor.visitChildren(self)



    def statementseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.StatementseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 104
        self.enterRecursionRule(localctx, 104, self.RULE_statementseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Statementseq1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1071
            self.statement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1077
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Statementseq2Context(self, CPP14_v2Parser.StatementseqContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_statementseq)
                    self.state = 1073
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1074
                    self.statement() 
                self.state = 1079
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SelectionstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_selectionstatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Selectionstatement1Context(SelectionstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SelectionstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def If(self):
            return self.getToken(CPP14_v2Parser.If, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def condition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConditionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionstatement1" ):
                listener.enterSelectionstatement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionstatement1" ):
                listener.exitSelectionstatement1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionstatement1" ):
                return visitor.visitSelectionstatement1(self)
            else:
                return visitor.visitChildren(self)


    class Selectionstatement2Context(SelectionstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SelectionstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def If(self):
            return self.getToken(CPP14_v2Parser.If, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def condition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConditionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14_v2Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,i)

        def Else(self):
            return self.getToken(CPP14_v2Parser.Else, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionstatement2" ):
                listener.enterSelectionstatement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionstatement2" ):
                listener.exitSelectionstatement2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionstatement2" ):
                return visitor.visitSelectionstatement2(self)
            else:
                return visitor.visitChildren(self)


    class Selectionstatement3Context(SelectionstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SelectionstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Switch(self):
            return self.getToken(CPP14_v2Parser.Switch, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def condition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConditionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionstatement3" ):
                listener.enterSelectionstatement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionstatement3" ):
                listener.exitSelectionstatement3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionstatement3" ):
                return visitor.visitSelectionstatement3(self)
            else:
                return visitor.visitChildren(self)



    def selectionstatement(self):

        localctx = CPP14_v2Parser.SelectionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_selectionstatement)
        try:
            self.state = 1100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Selectionstatement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1080
                self.match(CPP14_v2Parser.If)
                self.state = 1081
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1082
                self.condition()
                self.state = 1083
                self.match(CPP14_v2Parser.RightParen)
                self.state = 1084
                self.statement()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Selectionstatement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1086
                self.match(CPP14_v2Parser.If)
                self.state = 1087
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1088
                self.condition()
                self.state = 1089
                self.match(CPP14_v2Parser.RightParen)
                self.state = 1090
                self.statement()
                self.state = 1091
                self.match(CPP14_v2Parser.Else)
                self.state = 1092
                self.statement()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Selectionstatement3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1094
                self.match(CPP14_v2Parser.Switch)
                self.state = 1095
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1096
                self.condition()
                self.state = 1097
                self.match(CPP14_v2Parser.RightParen)
                self.state = 1098
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerclauseContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = CPP14_v2Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1102
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1103
                    self.attributespecifierseq(0)


                self.state = 1106
                self.declspecifierseq()
                self.state = 1107
                self.declarator()
                self.state = 1108
                self.match(CPP14_v2Parser.Assign)
                self.state = 1109
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1111
                    self.attributespecifierseq(0)


                self.state = 1114
                self.declspecifierseq()
                self.state = 1115
                self.declarator()
                self.state = 1116
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_iterationstatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Iterationstatement1Context(IterationstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.IterationstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def While(self):
            return self.getToken(CPP14_v2Parser.While, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def condition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConditionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationstatement1" ):
                listener.enterIterationstatement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationstatement1" ):
                listener.exitIterationstatement1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationstatement1" ):
                return visitor.visitIterationstatement1(self)
            else:
                return visitor.visitChildren(self)


    class Iterationstatement4Context(IterationstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.IterationstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(CPP14_v2Parser.For, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def forrangedeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ForrangedeclarationContext,0)

        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)
        def forrangeinitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ForrangeinitializerContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationstatement4" ):
                listener.enterIterationstatement4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationstatement4" ):
                listener.exitIterationstatement4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationstatement4" ):
                return visitor.visitIterationstatement4(self)
            else:
                return visitor.visitChildren(self)


    class Iterationstatement3Context(IterationstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.IterationstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(CPP14_v2Parser.For, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def forinitstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ForinitstatementContext,0)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)

        def condition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConditionContext,0)

        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationstatement3" ):
                listener.enterIterationstatement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationstatement3" ):
                listener.exitIterationstatement3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationstatement3" ):
                return visitor.visitIterationstatement3(self)
            else:
                return visitor.visitChildren(self)


    class Iterationstatement2Context(IterationstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.IterationstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Do(self):
            return self.getToken(CPP14_v2Parser.Do, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)

        def While(self):
            return self.getToken(CPP14_v2Parser.While, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationstatement2" ):
                listener.enterIterationstatement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationstatement2" ):
                listener.exitIterationstatement2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationstatement2" ):
                return visitor.visitIterationstatement2(self)
            else:
                return visitor.visitChildren(self)



    def iterationstatement(self):

        localctx = CPP14_v2Parser.IterationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_iterationstatement)
        self._la = 0 # Token type
        try:
            self.state = 1155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Iterationstatement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1120
                self.match(CPP14_v2Parser.While)
                self.state = 1121
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1122
                self.condition()
                self.state = 1123
                self.match(CPP14_v2Parser.RightParen)
                self.state = 1124
                self.statement()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Iterationstatement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1126
                self.match(CPP14_v2Parser.Do)
                self.state = 1127
                self.statement()
                self.state = 1128
                self.match(CPP14_v2Parser.While)
                self.state = 1129
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1130
                self.expression(0)
                self.state = 1131
                self.match(CPP14_v2Parser.RightParen)
                self.state = 1132
                self.match(CPP14_v2Parser.Semi)
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Iterationstatement3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1134
                self.match(CPP14_v2Parser.For)
                self.state = 1135
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1136
                self.forinitstatement()
                self.state = 1138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Constexpr) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.Explicit) | (1 << CPP14_v2Parser.Extern) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Friend) | (1 << CPP14_v2Parser.Inline) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.Mutable) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Register) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof) | (1 << CPP14_v2Parser.Static))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.Struct - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Thread_local - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typedef - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Union - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Virtual - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Volatile - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 1137
                    self.condition()


                self.state = 1140
                self.match(CPP14_v2Parser.Semi)
                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 1141
                    self.expression(0)


                self.state = 1144
                self.match(CPP14_v2Parser.RightParen)
                self.state = 1145
                self.statement()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Iterationstatement4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1147
                self.match(CPP14_v2Parser.For)
                self.state = 1148
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1149
                self.forrangedeclaration()
                self.state = 1150
                self.match(CPP14_v2Parser.Colon)
                self.state = 1151
                self.forrangeinitializer()
                self.state = 1152
                self.match(CPP14_v2Parser.RightParen)
                self.state = 1153
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForinitstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_forinitstatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Forinitstatement1Context(ForinitstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ForinitstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionstatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForinitstatement1" ):
                listener.enterForinitstatement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForinitstatement1" ):
                listener.exitForinitstatement1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForinitstatement1" ):
                return visitor.visitForinitstatement1(self)
            else:
                return visitor.visitChildren(self)


    class Forinitstatement2Context(ForinitstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ForinitstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpledeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForinitstatement2" ):
                listener.enterForinitstatement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForinitstatement2" ):
                listener.exitForinitstatement2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForinitstatement2" ):
                return visitor.visitForinitstatement2(self)
            else:
                return visitor.visitChildren(self)



    def forinitstatement(self):

        localctx = CPP14_v2Parser.ForinitstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_forinitstatement)
        try:
            self.state = 1159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Forinitstatement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1157
                self.expressionstatement()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Forinitstatement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1158
                self.simpledeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForrangedeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_forrangedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForrangedeclaration" ):
                listener.enterForrangedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForrangedeclaration" ):
                listener.exitForrangedeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForrangedeclaration" ):
                return visitor.visitForrangedeclaration(self)
            else:
                return visitor.visitChildren(self)




    def forrangedeclaration(self):

        localctx = CPP14_v2Parser.ForrangedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_forrangedeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                self.state = 1161
                self.attributespecifierseq(0)


            self.state = 1164
            self.declspecifierseq()
            self.state = 1165
            self.declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForrangeinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_forrangeinitializer

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Forrangeinitialize2Context(ForrangeinitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ForrangeinitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForrangeinitialize2" ):
                listener.enterForrangeinitialize2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForrangeinitialize2" ):
                listener.exitForrangeinitialize2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForrangeinitialize2" ):
                return visitor.visitForrangeinitialize2(self)
            else:
                return visitor.visitChildren(self)


    class Forrangeinitializer1Context(ForrangeinitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ForrangeinitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForrangeinitializer1" ):
                listener.enterForrangeinitializer1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForrangeinitializer1" ):
                listener.exitForrangeinitializer1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForrangeinitializer1" ):
                return visitor.visitForrangeinitializer1(self)
            else:
                return visitor.visitChildren(self)



    def forrangeinitializer(self):

        localctx = CPP14_v2Parser.ForrangeinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_forrangeinitializer)
        try:
            self.state = 1169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.T__0, CPP14_v2Parser.T__1, CPP14_v2Parser.Alignof, CPP14_v2Parser.Auto, CPP14_v2Parser.Bool, CPP14_v2Parser.Char, CPP14_v2Parser.Char16, CPP14_v2Parser.Char32, CPP14_v2Parser.Const_cast, CPP14_v2Parser.Decltype, CPP14_v2Parser.Delete, CPP14_v2Parser.Double, CPP14_v2Parser.Dynamic_cast, CPP14_v2Parser.False1, CPP14_v2Parser.Float, CPP14_v2Parser.Int, CPP14_v2Parser.Long, CPP14_v2Parser.New, CPP14_v2Parser.Noexcept, CPP14_v2Parser.Nullptr, CPP14_v2Parser.Operator, CPP14_v2Parser.Reinterpret_cast, CPP14_v2Parser.Short, CPP14_v2Parser.Signed, CPP14_v2Parser.Sizeof, CPP14_v2Parser.Static_cast, CPP14_v2Parser.This, CPP14_v2Parser.Throw, CPP14_v2Parser.True1, CPP14_v2Parser.Typeid_, CPP14_v2Parser.Typename_, CPP14_v2Parser.Unsigned, CPP14_v2Parser.Void, CPP14_v2Parser.Wchar, CPP14_v2Parser.LeftParen, CPP14_v2Parser.LeftBracket, CPP14_v2Parser.Plus, CPP14_v2Parser.Minus, CPP14_v2Parser.Star, CPP14_v2Parser.And, CPP14_v2Parser.Or, CPP14_v2Parser.Tilde, CPP14_v2Parser.PlusPlus, CPP14_v2Parser.MinusMinus, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier, CPP14_v2Parser.Integerliteral, CPP14_v2Parser.Characterliteral, CPP14_v2Parser.Floatingliteral, CPP14_v2Parser.Stringliteral, CPP14_v2Parser.Userdefinedintegerliteral, CPP14_v2Parser.Userdefinedfloatingliteral, CPP14_v2Parser.Userdefinedstringliteral, CPP14_v2Parser.Userdefinedcharacterliteral]:
                localctx = CPP14_v2Parser.Forrangeinitializer1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1167
                self.expression(0)
                pass
            elif token in [CPP14_v2Parser.LeftBrace]:
                localctx = CPP14_v2Parser.Forrangeinitialize2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1168
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_jumpstatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Jumpstatement5Context(JumpstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.JumpstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Goto(self):
            return self.getToken(CPP14_v2Parser.Goto, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpstatement5" ):
                listener.enterJumpstatement5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpstatement5" ):
                listener.exitJumpstatement5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpstatement5" ):
                return visitor.visitJumpstatement5(self)
            else:
                return visitor.visitChildren(self)


    class Jumpstatement4Context(JumpstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.JumpstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Return(self):
            return self.getToken(CPP14_v2Parser.Return, 0)
        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpstatement4" ):
                listener.enterJumpstatement4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpstatement4" ):
                listener.exitJumpstatement4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpstatement4" ):
                return visitor.visitJumpstatement4(self)
            else:
                return visitor.visitChildren(self)


    class Jumpstatement3Context(JumpstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.JumpstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Return(self):
            return self.getToken(CPP14_v2Parser.Return, 0)
        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpstatement3" ):
                listener.enterJumpstatement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpstatement3" ):
                listener.exitJumpstatement3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpstatement3" ):
                return visitor.visitJumpstatement3(self)
            else:
                return visitor.visitChildren(self)


    class Jumpstatement2Context(JumpstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.JumpstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Continue(self):
            return self.getToken(CPP14_v2Parser.Continue, 0)
        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpstatement2" ):
                listener.enterJumpstatement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpstatement2" ):
                listener.exitJumpstatement2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpstatement2" ):
                return visitor.visitJumpstatement2(self)
            else:
                return visitor.visitChildren(self)


    class Jumpstatement1Context(JumpstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.JumpstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Break(self):
            return self.getToken(CPP14_v2Parser.Break, 0)
        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpstatement1" ):
                listener.enterJumpstatement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpstatement1" ):
                listener.exitJumpstatement1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpstatement1" ):
                return visitor.visitJumpstatement1(self)
            else:
                return visitor.visitChildren(self)



    def jumpstatement(self):

        localctx = CPP14_v2Parser.JumpstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_jumpstatement)
        self._la = 0 # Token type
        try:
            self.state = 1187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Jumpstatement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1171
                self.match(CPP14_v2Parser.Break)
                self.state = 1172
                self.match(CPP14_v2Parser.Semi)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Jumpstatement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1173
                self.match(CPP14_v2Parser.Continue)
                self.state = 1174
                self.match(CPP14_v2Parser.Semi)
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Jumpstatement3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1175
                self.match(CPP14_v2Parser.Return)
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 1176
                    self.expression(0)


                self.state = 1179
                self.match(CPP14_v2Parser.Semi)
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Jumpstatement4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1180
                self.match(CPP14_v2Parser.Return)
                self.state = 1181
                self.bracedinitlist()
                self.state = 1182
                self.match(CPP14_v2Parser.Semi)
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Jumpstatement5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1184
                self.match(CPP14_v2Parser.Goto)
                self.state = 1185
                self.match(CPP14_v2Parser.Identifier)
                self.state = 1186
                self.match(CPP14_v2Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BlockdeclarationContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_declarationstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationstatement" ):
                listener.enterDeclarationstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationstatement" ):
                listener.exitDeclarationstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationstatement" ):
                return visitor.visitDeclarationstatement(self)
            else:
                return visitor.visitChildren(self)




    def declarationstatement(self):

        localctx = CPP14_v2Parser.DeclarationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_declarationstatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.blockdeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_declarationseq

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Declarationseq2Context(DeclarationseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationseqContext,0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationseq2" ):
                listener.enterDeclarationseq2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationseq2" ):
                listener.exitDeclarationseq2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationseq2" ):
                return visitor.visitDeclarationseq2(self)
            else:
                return visitor.visitChildren(self)


    class Declarationseq1Context(DeclarationseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationseq1" ):
                listener.enterDeclarationseq1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationseq1" ):
                listener.exitDeclarationseq1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationseq1" ):
                return visitor.visitDeclarationseq1(self)
            else:
                return visitor.visitChildren(self)



    def declarationseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.DeclarationseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_declarationseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Declarationseq1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1192
            self.declaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1198
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Declarationseq2Context(self, CPP14_v2Parser.DeclarationseqContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_declarationseq)
                    self.state = 1194
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1195
                    self.declaration() 
                self.state = 1200
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_declaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Declaration1Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BlockdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration1" ):
                listener.enterDeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration1" ):
                listener.exitDeclaration1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration1" ):
                return visitor.visitDeclaration1(self)
            else:
                return visitor.visitChildren(self)


    class Declaration9Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attributedeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributedeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration9" ):
                listener.enterDeclaration9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration9" ):
                listener.exitDeclaration9(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration9" ):
                return visitor.visitDeclaration9(self)
            else:
                return visitor.visitChildren(self)


    class Declaration8Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def emptydeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EmptydeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration8" ):
                listener.enterDeclaration8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration8" ):
                listener.exitDeclaration8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration8" ):
                return visitor.visitDeclaration8(self)
            else:
                return visitor.visitChildren(self)


    class Declaration7Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namespacedefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacedefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration7" ):
                listener.enterDeclaration7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration7" ):
                listener.exitDeclaration7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration7" ):
                return visitor.visitDeclaration7(self)
            else:
                return visitor.visitChildren(self)


    class Declaration6Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def linkagespecification(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LinkagespecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration6" ):
                listener.enterDeclaration6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration6" ):
                listener.exitDeclaration6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration6" ):
                return visitor.visitDeclaration6(self)
            else:
                return visitor.visitChildren(self)


    class Declaration5Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def explicitspecialization(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExplicitspecializationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration5" ):
                listener.enterDeclaration5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration5" ):
                listener.exitDeclaration5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration5" ):
                return visitor.visitDeclaration5(self)
            else:
                return visitor.visitChildren(self)


    class Declaration4Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def explicitinstantiation(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExplicitinstantiationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration4" ):
                listener.enterDeclaration4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration4" ):
                listener.exitDeclaration4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration4" ):
                return visitor.visitDeclaration4(self)
            else:
                return visitor.visitChildren(self)


    class Declaration3Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templatedeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplatedeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration3" ):
                listener.enterDeclaration3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration3" ):
                listener.exitDeclaration3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration3" ):
                return visitor.visitDeclaration3(self)
            else:
                return visitor.visitChildren(self)


    class Declaration2Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.FunctiondefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration2" ):
                listener.enterDeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration2" ):
                listener.exitDeclaration2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration2" ):
                return visitor.visitDeclaration2(self)
            else:
                return visitor.visitChildren(self)



    def declaration(self):

        localctx = CPP14_v2Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_declaration)
        try:
            self.state = 1210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Declaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1201
                self.blockdeclaration()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Declaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1202
                self.functiondefinition()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Declaration3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1203
                self.templatedeclaration()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Declaration4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1204
                self.explicitinstantiation()
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Declaration5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1205
                self.explicitspecialization()
                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Declaration6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1206
                self.linkagespecification()
                pass

            elif la_ == 7:
                localctx = CPP14_v2Parser.Declaration7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1207
                self.namespacedefinition()
                pass

            elif la_ == 8:
                localctx = CPP14_v2Parser.Declaration8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1208
                self.emptydeclaration()
                pass

            elif la_ == 9:
                localctx = CPP14_v2Parser.Declaration9Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1209
                self.attributedeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_blockdeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Blockdeclaration4Context(BlockdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BlockdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def usingdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UsingdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration4" ):
                listener.enterBlockdeclaration4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration4" ):
                listener.exitBlockdeclaration4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration4" ):
                return visitor.visitBlockdeclaration4(self)
            else:
                return visitor.visitChildren(self)


    class Blockdeclaration3Context(BlockdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BlockdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namespacealiasdefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacealiasdefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration3" ):
                listener.enterBlockdeclaration3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration3" ):
                listener.exitBlockdeclaration3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration3" ):
                return visitor.visitBlockdeclaration3(self)
            else:
                return visitor.visitChildren(self)


    class Blockdeclaration2Context(BlockdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BlockdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def asmdefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AsmdefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration2" ):
                listener.enterBlockdeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration2" ):
                listener.exitBlockdeclaration2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration2" ):
                return visitor.visitBlockdeclaration2(self)
            else:
                return visitor.visitChildren(self)


    class Blockdeclaration1Context(BlockdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BlockdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpledeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration1" ):
                listener.enterBlockdeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration1" ):
                listener.exitBlockdeclaration1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration1" ):
                return visitor.visitBlockdeclaration1(self)
            else:
                return visitor.visitChildren(self)


    class Blockdeclaration8Context(BlockdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BlockdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def opaqueenumdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.OpaqueenumdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration8" ):
                listener.enterBlockdeclaration8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration8" ):
                listener.exitBlockdeclaration8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration8" ):
                return visitor.visitBlockdeclaration8(self)
            else:
                return visitor.visitChildren(self)


    class Blockdeclaration7Context(BlockdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BlockdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aliasdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AliasdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration7" ):
                listener.enterBlockdeclaration7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration7" ):
                listener.exitBlockdeclaration7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration7" ):
                return visitor.visitBlockdeclaration7(self)
            else:
                return visitor.visitChildren(self)


    class Blockdeclaration6Context(BlockdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BlockdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def static_assertdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.Static_assertdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration6" ):
                listener.enterBlockdeclaration6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration6" ):
                listener.exitBlockdeclaration6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration6" ):
                return visitor.visitBlockdeclaration6(self)
            else:
                return visitor.visitChildren(self)


    class Blockdeclaration5Context(BlockdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BlockdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def usingdirective(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UsingdirectiveContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration5" ):
                listener.enterBlockdeclaration5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration5" ):
                listener.exitBlockdeclaration5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration5" ):
                return visitor.visitBlockdeclaration5(self)
            else:
                return visitor.visitChildren(self)



    def blockdeclaration(self):

        localctx = CPP14_v2Parser.BlockdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_blockdeclaration)
        try:
            self.state = 1220
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Blockdeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1212
                self.simpledeclaration()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Blockdeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1213
                self.asmdefinition()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Blockdeclaration3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1214
                self.namespacealiasdefinition()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Blockdeclaration4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1215
                self.usingdeclaration()
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Blockdeclaration5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1216
                self.usingdirective()
                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Blockdeclaration6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1217
                self.static_assertdeclaration()
                pass

            elif la_ == 7:
                localctx = CPP14_v2Parser.Blockdeclaration7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1218
                self.aliasdeclaration()
                pass

            elif la_ == 8:
                localctx = CPP14_v2Parser.Blockdeclaration8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1219
                self.opaqueenumdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14_v2Parser.Using, 0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)


        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_aliasdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasdeclaration" ):
                listener.enterAliasdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasdeclaration" ):
                listener.exitAliasdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasdeclaration" ):
                return visitor.visitAliasdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def aliasdeclaration(self):

        localctx = CPP14_v2Parser.AliasdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_aliasdeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1222
            self.match(CPP14_v2Parser.Using)
            self.state = 1223
            self.match(CPP14_v2Parser.Identifier)
            self.state = 1225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                self.state = 1224
                self.attributespecifierseq(0)


            self.state = 1227
            self.match(CPP14_v2Parser.Assign)
            self.state = 1228
            self.thetypeid()
            self.state = 1229
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpledeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_simpledeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Simpledeclaration1Context(SimpledeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpledeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)
        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitdeclaratorlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpledeclaration1" ):
                listener.enterSimpledeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpledeclaration1" ):
                listener.exitSimpledeclaration1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpledeclaration1" ):
                return visitor.visitSimpledeclaration1(self)
            else:
                return visitor.visitChildren(self)


    class Simpledeclaration2Context(SimpledeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpledeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitdeclaratorlistContext,0)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)
        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpledeclaration2" ):
                listener.enterSimpledeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpledeclaration2" ):
                listener.exitSimpledeclaration2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpledeclaration2" ):
                return visitor.visitSimpledeclaration2(self)
            else:
                return visitor.visitChildren(self)



    def simpledeclaration(self):

        localctx = CPP14_v2Parser.SimpledeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_simpledeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1245
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.T__2, CPP14_v2Parser.Auto, CPP14_v2Parser.Bool, CPP14_v2Parser.Char, CPP14_v2Parser.Char16, CPP14_v2Parser.Char32, CPP14_v2Parser.Class, CPP14_v2Parser.Const, CPP14_v2Parser.Constexpr, CPP14_v2Parser.Decltype, CPP14_v2Parser.Double, CPP14_v2Parser.Enum, CPP14_v2Parser.Explicit, CPP14_v2Parser.Extern, CPP14_v2Parser.Float, CPP14_v2Parser.Friend, CPP14_v2Parser.Inline, CPP14_v2Parser.Int, CPP14_v2Parser.Long, CPP14_v2Parser.Mutable, CPP14_v2Parser.Operator, CPP14_v2Parser.Register, CPP14_v2Parser.Short, CPP14_v2Parser.Signed, CPP14_v2Parser.Static, CPP14_v2Parser.Struct, CPP14_v2Parser.Thread_local, CPP14_v2Parser.Typedef, CPP14_v2Parser.Typename_, CPP14_v2Parser.Union, CPP14_v2Parser.Unsigned, CPP14_v2Parser.Virtual, CPP14_v2Parser.Void, CPP14_v2Parser.Volatile, CPP14_v2Parser.Wchar, CPP14_v2Parser.LeftParen, CPP14_v2Parser.Star, CPP14_v2Parser.And, CPP14_v2Parser.Tilde, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Semi, CPP14_v2Parser.Ellipsis, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Simpledeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1232
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 1231
                    self.declspecifierseq()


                self.state = 1235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Operator))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (CPP14_v2Parser.LeftParen - 84)) | (1 << (CPP14_v2Parser.Star - 84)) | (1 << (CPP14_v2Parser.And - 84)) | (1 << (CPP14_v2Parser.Tilde - 84)) | (1 << (CPP14_v2Parser.Doublecolon - 84)) | (1 << (CPP14_v2Parser.Ellipsis - 84)) | (1 << (CPP14_v2Parser.Identifier - 84)))) != 0):
                    self.state = 1234
                    self.initdeclaratorlist(0)


                self.state = 1237
                self.match(CPP14_v2Parser.Semi)
                pass
            elif token in [CPP14_v2Parser.Alignas, CPP14_v2Parser.LeftBracket]:
                localctx = CPP14_v2Parser.Simpledeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1238
                self.attributespecifierseq(0)
                self.state = 1240
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 1239
                    self.declspecifierseq()


                self.state = 1242
                self.initdeclaratorlist(0)
                self.state = 1243
                self.match(CPP14_v2Parser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Static_assertdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Static_assert(self):
            return self.getToken(CPP14_v2Parser.Static_assert, 0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)


        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)

        def Stringliteral(self):
            return self.getToken(CPP14_v2Parser.Stringliteral, 0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_static_assertdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_assertdeclaration" ):
                listener.enterStatic_assertdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_assertdeclaration" ):
                listener.exitStatic_assertdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatic_assertdeclaration" ):
                return visitor.visitStatic_assertdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def static_assertdeclaration(self):

        localctx = CPP14_v2Parser.Static_assertdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_static_assertdeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1247
            self.match(CPP14_v2Parser.Static_assert)
            self.state = 1248
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 1249
            self.constantexpression()
            self.state = 1250
            self.match(CPP14_v2Parser.Comma)
            self.state = 1251
            self.match(CPP14_v2Parser.Stringliteral)
            self.state = 1252
            self.match(CPP14_v2Parser.RightParen)
            self.state = 1253
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptydeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_emptydeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptydeclaration" ):
                listener.enterEmptydeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptydeclaration" ):
                listener.exitEmptydeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptydeclaration" ):
                return visitor.visitEmptydeclaration(self)
            else:
                return visitor.visitChildren(self)




    def emptydeclaration(self):

        localctx = CPP14_v2Parser.EmptydeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_emptydeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributedeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attributedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributedeclaration" ):
                listener.enterAttributedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributedeclaration" ):
                listener.exitAttributedeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributedeclaration" ):
                return visitor.visitAttributedeclaration(self)
            else:
                return visitor.visitChildren(self)




    def attributedeclaration(self):

        localctx = CPP14_v2Parser.AttributedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_attributedeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            self.attributespecifierseq(0)
            self.state = 1258
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_declspecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Declspecifier1Context(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def storageclassspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StorageclassspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifier1" ):
                listener.enterDeclspecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifier1" ):
                listener.exitDeclspecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifier1" ):
                return visitor.visitDeclspecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Declspecifier2Context(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifier2" ):
                listener.enterDeclspecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifier2" ):
                listener.exitDeclspecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifier2" ):
                return visitor.visitDeclspecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Declspecifier3Context(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.FunctionspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifier3" ):
                listener.enterDeclspecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifier3" ):
                listener.exitDeclspecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifier3" ):
                return visitor.visitDeclspecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Declspecifier4Context(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Friend(self):
            return self.getToken(CPP14_v2Parser.Friend, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifier4" ):
                listener.enterDeclspecifier4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifier4" ):
                listener.exitDeclspecifier4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifier4" ):
                return visitor.visitDeclspecifier4(self)
            else:
                return visitor.visitChildren(self)


    class Declspecifier5Context(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Typedef(self):
            return self.getToken(CPP14_v2Parser.Typedef, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifier5" ):
                listener.enterDeclspecifier5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifier5" ):
                listener.exitDeclspecifier5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifier5" ):
                return visitor.visitDeclspecifier5(self)
            else:
                return visitor.visitChildren(self)


    class Declspecifier6Context(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Constexpr(self):
            return self.getToken(CPP14_v2Parser.Constexpr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifier6" ):
                listener.enterDeclspecifier6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifier6" ):
                listener.exitDeclspecifier6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifier6" ):
                return visitor.visitDeclspecifier6(self)
            else:
                return visitor.visitChildren(self)



    def declspecifier(self):

        localctx = CPP14_v2Parser.DeclspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_declspecifier)
        try:
            self.state = 1266
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Extern, CPP14_v2Parser.Mutable, CPP14_v2Parser.Register, CPP14_v2Parser.Static, CPP14_v2Parser.Thread_local]:
                localctx = CPP14_v2Parser.Declspecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1260
                self.storageclassspecifier()
                pass
            elif token in [CPP14_v2Parser.Auto, CPP14_v2Parser.Bool, CPP14_v2Parser.Char, CPP14_v2Parser.Char16, CPP14_v2Parser.Char32, CPP14_v2Parser.Class, CPP14_v2Parser.Const, CPP14_v2Parser.Decltype, CPP14_v2Parser.Double, CPP14_v2Parser.Enum, CPP14_v2Parser.Float, CPP14_v2Parser.Int, CPP14_v2Parser.Long, CPP14_v2Parser.Short, CPP14_v2Parser.Signed, CPP14_v2Parser.Struct, CPP14_v2Parser.Typename_, CPP14_v2Parser.Union, CPP14_v2Parser.Unsigned, CPP14_v2Parser.Void, CPP14_v2Parser.Volatile, CPP14_v2Parser.Wchar, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Declspecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1261
                self.typespecifier()
                pass
            elif token in [CPP14_v2Parser.Explicit, CPP14_v2Parser.Inline, CPP14_v2Parser.Virtual]:
                localctx = CPP14_v2Parser.Declspecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1262
                self.functionspecifier()
                pass
            elif token in [CPP14_v2Parser.Friend]:
                localctx = CPP14_v2Parser.Declspecifier4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1263
                self.match(CPP14_v2Parser.Friend)
                pass
            elif token in [CPP14_v2Parser.Typedef]:
                localctx = CPP14_v2Parser.Declspecifier5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1264
                self.match(CPP14_v2Parser.Typedef)
                pass
            elif token in [CPP14_v2Parser.Constexpr]:
                localctx = CPP14_v2Parser.Declspecifier6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1265
                self.match(CPP14_v2Parser.Constexpr)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_declspecifierseq

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Declspecifierseq2Context(DeclspecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclspecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierContext,0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifierseq2" ):
                listener.enterDeclspecifierseq2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifierseq2" ):
                listener.exitDeclspecifierseq2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifierseq2" ):
                return visitor.visitDeclspecifierseq2(self)
            else:
                return visitor.visitChildren(self)


    class Declspecifierseq1Context(DeclspecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclspecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifierseq1" ):
                listener.enterDeclspecifierseq1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifierseq1" ):
                listener.exitDeclspecifierseq1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifierseq1" ):
                return visitor.visitDeclspecifierseq1(self)
            else:
                return visitor.visitChildren(self)



    def declspecifierseq(self):

        localctx = CPP14_v2Parser.DeclspecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_declspecifierseq)
        try:
            self.state = 1275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Declspecifierseq1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1268
                self.declspecifier()
                self.state = 1270
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1269
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Declspecifierseq2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1272
                self.declspecifier()
                self.state = 1273
                self.declspecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageclassspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_storageclassspecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Storageclassspecifier5Context(StorageclassspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.StorageclassspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Mutable(self):
            return self.getToken(CPP14_v2Parser.Mutable, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageclassspecifier5" ):
                listener.enterStorageclassspecifier5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageclassspecifier5" ):
                listener.exitStorageclassspecifier5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageclassspecifier5" ):
                return visitor.visitStorageclassspecifier5(self)
            else:
                return visitor.visitChildren(self)


    class Storageclassspecifier1Context(StorageclassspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.StorageclassspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Register(self):
            return self.getToken(CPP14_v2Parser.Register, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageclassspecifier1" ):
                listener.enterStorageclassspecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageclassspecifier1" ):
                listener.exitStorageclassspecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageclassspecifier1" ):
                return visitor.visitStorageclassspecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Storageclassspecifier2Context(StorageclassspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.StorageclassspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Static(self):
            return self.getToken(CPP14_v2Parser.Static, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageclassspecifier2" ):
                listener.enterStorageclassspecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageclassspecifier2" ):
                listener.exitStorageclassspecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageclassspecifier2" ):
                return visitor.visitStorageclassspecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Storageclassspecifier3Context(StorageclassspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.StorageclassspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Thread_local(self):
            return self.getToken(CPP14_v2Parser.Thread_local, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageclassspecifier3" ):
                listener.enterStorageclassspecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageclassspecifier3" ):
                listener.exitStorageclassspecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageclassspecifier3" ):
                return visitor.visitStorageclassspecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Storageclassspecifier4Context(StorageclassspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.StorageclassspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Extern(self):
            return self.getToken(CPP14_v2Parser.Extern, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageclassspecifier4" ):
                listener.enterStorageclassspecifier4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageclassspecifier4" ):
                listener.exitStorageclassspecifier4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageclassspecifier4" ):
                return visitor.visitStorageclassspecifier4(self)
            else:
                return visitor.visitChildren(self)



    def storageclassspecifier(self):

        localctx = CPP14_v2Parser.StorageclassspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_storageclassspecifier)
        try:
            self.state = 1282
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Register]:
                localctx = CPP14_v2Parser.Storageclassspecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1277
                self.match(CPP14_v2Parser.Register)
                pass
            elif token in [CPP14_v2Parser.Static]:
                localctx = CPP14_v2Parser.Storageclassspecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1278
                self.match(CPP14_v2Parser.Static)
                pass
            elif token in [CPP14_v2Parser.Thread_local]:
                localctx = CPP14_v2Parser.Storageclassspecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1279
                self.match(CPP14_v2Parser.Thread_local)
                pass
            elif token in [CPP14_v2Parser.Extern]:
                localctx = CPP14_v2Parser.Storageclassspecifier4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1280
                self.match(CPP14_v2Parser.Extern)
                pass
            elif token in [CPP14_v2Parser.Mutable]:
                localctx = CPP14_v2Parser.Storageclassspecifier5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1281
                self.match(CPP14_v2Parser.Mutable)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_functionspecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Functionspecifier2Context(FunctionspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.FunctionspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Virtual(self):
            return self.getToken(CPP14_v2Parser.Virtual, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionspecifier2" ):
                listener.enterFunctionspecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionspecifier2" ):
                listener.exitFunctionspecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionspecifier2" ):
                return visitor.visitFunctionspecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Functionspecifier3Context(FunctionspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.FunctionspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Explicit(self):
            return self.getToken(CPP14_v2Parser.Explicit, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionspecifier3" ):
                listener.enterFunctionspecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionspecifier3" ):
                listener.exitFunctionspecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionspecifier3" ):
                return visitor.visitFunctionspecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Functionspecifier1Context(FunctionspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.FunctionspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Inline(self):
            return self.getToken(CPP14_v2Parser.Inline, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionspecifier1" ):
                listener.enterFunctionspecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionspecifier1" ):
                listener.exitFunctionspecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionspecifier1" ):
                return visitor.visitFunctionspecifier1(self)
            else:
                return visitor.visitChildren(self)



    def functionspecifier(self):

        localctx = CPP14_v2Parser.FunctionspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_functionspecifier)
        try:
            self.state = 1287
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Inline]:
                localctx = CPP14_v2Parser.Functionspecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1284
                self.match(CPP14_v2Parser.Inline)
                pass
            elif token in [CPP14_v2Parser.Virtual]:
                localctx = CPP14_v2Parser.Functionspecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1285
                self.match(CPP14_v2Parser.Virtual)
                pass
            elif token in [CPP14_v2Parser.Explicit]:
                localctx = CPP14_v2Parser.Functionspecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1286
                self.match(CPP14_v2Parser.Explicit)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedefnameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_typedefname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefname" ):
                listener.enterTypedefname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefname" ):
                listener.exitTypedefname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedefname" ):
                return visitor.visitTypedefname(self)
            else:
                return visitor.visitChildren(self)




    def typedefname(self):

        localctx = CPP14_v2Parser.TypedefnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_typedefname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.match(CPP14_v2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_typespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Typespecifier1Context(TypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TrailingtypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifier1" ):
                listener.enterTypespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifier1" ):
                listener.exitTypespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypespecifier1" ):
                return visitor.visitTypespecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Typespecifier3Context(TypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifier3" ):
                listener.enterTypespecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifier3" ):
                listener.exitTypespecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypespecifier3" ):
                return visitor.visitTypespecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Typespecifier2Context(TypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifier2" ):
                listener.enterTypespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifier2" ):
                listener.exitTypespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypespecifier2" ):
                return visitor.visitTypespecifier2(self)
            else:
                return visitor.visitChildren(self)



    def typespecifier(self):

        localctx = CPP14_v2Parser.TypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_typespecifier)
        try:
            self.state = 1294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Typespecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1291
                self.trailingtypespecifier()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Typespecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1292
                self.classspecifier()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Typespecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1293
                self.enumspecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingtypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_trailingtypespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Trailingtypespecifier1Context(TrailingtypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TrailingtypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifier1" ):
                listener.enterTrailingtypespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifier1" ):
                listener.exitTrailingtypespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifier1" ):
                return visitor.visitTrailingtypespecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Trailingtypespecifier2Context(TrailingtypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TrailingtypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def elaboratedtypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ElaboratedtypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifier2" ):
                listener.enterTrailingtypespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifier2" ):
                listener.exitTrailingtypespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifier2" ):
                return visitor.visitTrailingtypespecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Trailingtypespecifier3Context(TrailingtypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TrailingtypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypenamespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifier3" ):
                listener.enterTrailingtypespecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifier3" ):
                listener.exitTrailingtypespecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifier3" ):
                return visitor.visitTrailingtypespecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Trailingtypespecifier4Context(TrailingtypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TrailingtypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CvqualifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifier4" ):
                listener.enterTrailingtypespecifier4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifier4" ):
                listener.exitTrailingtypespecifier4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifier4" ):
                return visitor.visitTrailingtypespecifier4(self)
            else:
                return visitor.visitChildren(self)



    def trailingtypespecifier(self):

        localctx = CPP14_v2Parser.TrailingtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_trailingtypespecifier)
        try:
            self.state = 1300
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Auto, CPP14_v2Parser.Bool, CPP14_v2Parser.Char, CPP14_v2Parser.Char16, CPP14_v2Parser.Char32, CPP14_v2Parser.Decltype, CPP14_v2Parser.Double, CPP14_v2Parser.Float, CPP14_v2Parser.Int, CPP14_v2Parser.Long, CPP14_v2Parser.Short, CPP14_v2Parser.Signed, CPP14_v2Parser.Unsigned, CPP14_v2Parser.Void, CPP14_v2Parser.Wchar, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Trailingtypespecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1296
                self.simpletypespecifier()
                pass
            elif token in [CPP14_v2Parser.Class, CPP14_v2Parser.Enum, CPP14_v2Parser.Struct, CPP14_v2Parser.Union]:
                localctx = CPP14_v2Parser.Trailingtypespecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1297
                self.elaboratedtypespecifier()
                pass
            elif token in [CPP14_v2Parser.Typename_]:
                localctx = CPP14_v2Parser.Trailingtypespecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1298
                self.typenamespecifier()
                pass
            elif token in [CPP14_v2Parser.Const, CPP14_v2Parser.Volatile]:
                localctx = CPP14_v2Parser.Trailingtypespecifier4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1299
                self.cvqualifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_typespecifierseq

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Typespecifierseq1Context(TypespecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypespecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifierseq1" ):
                listener.enterTypespecifierseq1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifierseq1" ):
                listener.exitTypespecifierseq1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypespecifierseq1" ):
                return visitor.visitTypespecifierseq1(self)
            else:
                return visitor.visitChildren(self)


    class Typespecifierseq2Context(TypespecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypespecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierContext,0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifierseq2" ):
                listener.enterTypespecifierseq2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifierseq2" ):
                listener.exitTypespecifierseq2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypespecifierseq2" ):
                return visitor.visitTypespecifierseq2(self)
            else:
                return visitor.visitChildren(self)



    def typespecifierseq(self):

        localctx = CPP14_v2Parser.TypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_typespecifierseq)
        try:
            self.state = 1309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Typespecifierseq1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1302
                self.typespecifier()
                self.state = 1304
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 1303
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Typespecifierseq2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1306
                self.typespecifier()
                self.state = 1307
                self.typespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingtypespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_trailingtypespecifierseq

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Trailingtypespecifierseq1Context(TrailingtypespecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TrailingtypespecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TrailingtypespecifierContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifierseq1" ):
                listener.enterTrailingtypespecifierseq1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifierseq1" ):
                listener.exitTrailingtypespecifierseq1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifierseq1" ):
                return visitor.visitTrailingtypespecifierseq1(self)
            else:
                return visitor.visitChildren(self)


    class Trailingtypespecifierseq2Context(TrailingtypespecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TrailingtypespecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TrailingtypespecifierContext,0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TrailingtypespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifierseq2" ):
                listener.enterTrailingtypespecifierseq2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifierseq2" ):
                listener.exitTrailingtypespecifierseq2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifierseq2" ):
                return visitor.visitTrailingtypespecifierseq2(self)
            else:
                return visitor.visitChildren(self)



    def trailingtypespecifierseq(self):

        localctx = CPP14_v2Parser.TrailingtypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_trailingtypespecifierseq)
        try:
            self.state = 1318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Trailingtypespecifierseq1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1311
                self.trailingtypespecifier()
                self.state = 1313
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 1312
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Trailingtypespecifierseq2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1315
                self.trailingtypespecifier()
                self.state = 1316
                self.trailingtypespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpletypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_simpletypespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Simpletypespecifier17Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DecltypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier17" ):
                listener.enterSimpletypespecifier17(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier17" ):
                listener.exitSimpletypespecifier17(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier17" ):
                return visitor.visitSimpletypespecifier17(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier2Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)
        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier2" ):
                listener.enterSimpletypespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier2" ):
                listener.exitSimpletypespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier2" ):
                return visitor.visitSimpletypespecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier12Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Unsigned(self):
            return self.getToken(CPP14_v2Parser.Unsigned, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier12" ):
                listener.enterSimpletypespecifier12(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier12" ):
                listener.exitSimpletypespecifier12(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier12" ):
                return visitor.visitSimpletypespecifier12(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier3Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Char(self):
            return self.getToken(CPP14_v2Parser.Char, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier3" ):
                listener.enterSimpletypespecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier3" ):
                listener.exitSimpletypespecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier3" ):
                return visitor.visitSimpletypespecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier11Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Signed(self):
            return self.getToken(CPP14_v2Parser.Signed, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier11" ):
                listener.enterSimpletypespecifier11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier11" ):
                listener.exitSimpletypespecifier11(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier11" ):
                return visitor.visitSimpletypespecifier11(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier4Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Char16(self):
            return self.getToken(CPP14_v2Parser.Char16, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier4" ):
                listener.enterSimpletypespecifier4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier4" ):
                listener.exitSimpletypespecifier4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier4" ):
                return visitor.visitSimpletypespecifier4(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier10Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Long(self):
            return self.getToken(CPP14_v2Parser.Long, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier10" ):
                listener.enterSimpletypespecifier10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier10" ):
                listener.exitSimpletypespecifier10(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier10" ):
                return visitor.visitSimpletypespecifier10(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier5Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Char32(self):
            return self.getToken(CPP14_v2Parser.Char32, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier5" ):
                listener.enterSimpletypespecifier5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier5" ):
                listener.exitSimpletypespecifier5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier5" ):
                return visitor.visitSimpletypespecifier5(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier6Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Wchar(self):
            return self.getToken(CPP14_v2Parser.Wchar, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier6" ):
                listener.enterSimpletypespecifier6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier6" ):
                listener.exitSimpletypespecifier6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier6" ):
                return visitor.visitSimpletypespecifier6(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier16Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Auto(self):
            return self.getToken(CPP14_v2Parser.Auto, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier16" ):
                listener.enterSimpletypespecifier16(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier16" ):
                listener.exitSimpletypespecifier16(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier16" ):
                return visitor.visitSimpletypespecifier16(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier7Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Bool(self):
            return self.getToken(CPP14_v2Parser.Bool, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier7" ):
                listener.enterSimpletypespecifier7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier7" ):
                listener.exitSimpletypespecifier7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier7" ):
                return visitor.visitSimpletypespecifier7(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier15Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Void(self):
            return self.getToken(CPP14_v2Parser.Void, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier15" ):
                listener.enterSimpletypespecifier15(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier15" ):
                listener.exitSimpletypespecifier15(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier15" ):
                return visitor.visitSimpletypespecifier15(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier8Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Short(self):
            return self.getToken(CPP14_v2Parser.Short, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier8" ):
                listener.enterSimpletypespecifier8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier8" ):
                listener.exitSimpletypespecifier8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier8" ):
                return visitor.visitSimpletypespecifier8(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier14Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Double(self):
            return self.getToken(CPP14_v2Parser.Double, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier14" ):
                listener.enterSimpletypespecifier14(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier14" ):
                listener.exitSimpletypespecifier14(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier14" ):
                return visitor.visitSimpletypespecifier14(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier9Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Int(self):
            return self.getToken(CPP14_v2Parser.Int, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier9" ):
                listener.enterSimpletypespecifier9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier9" ):
                listener.exitSimpletypespecifier9(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier9" ):
                return visitor.visitSimpletypespecifier9(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier13Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Float(self):
            return self.getToken(CPP14_v2Parser.Float, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier13" ):
                listener.enterSimpletypespecifier13(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier13" ):
                listener.exitSimpletypespecifier13(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier13" ):
                return visitor.visitSimpletypespecifier13(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier1Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def thetypename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypenameContext,0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier1" ):
                listener.enterSimpletypespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier1" ):
                listener.exitSimpletypespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier1" ):
                return visitor.visitSimpletypespecifier1(self)
            else:
                return visitor.visitChildren(self)



    def simpletypespecifier(self):

        localctx = CPP14_v2Parser.SimpletypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_simpletypespecifier)
        try:
            self.state = 1343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Simpletypespecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1321
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 1320
                    self.nestednamespecifier(0)


                self.state = 1323
                self.thetypename()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Simpletypespecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1324
                self.nestednamespecifier(0)
                self.state = 1325
                self.match(CPP14_v2Parser.Template)
                self.state = 1326
                self.simpletemplateid()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Simpletypespecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1328
                self.match(CPP14_v2Parser.Char)
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Simpletypespecifier4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1329
                self.match(CPP14_v2Parser.Char16)
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Simpletypespecifier5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1330
                self.match(CPP14_v2Parser.Char32)
                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Simpletypespecifier6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1331
                self.match(CPP14_v2Parser.Wchar)
                pass

            elif la_ == 7:
                localctx = CPP14_v2Parser.Simpletypespecifier7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1332
                self.match(CPP14_v2Parser.Bool)
                pass

            elif la_ == 8:
                localctx = CPP14_v2Parser.Simpletypespecifier8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1333
                self.match(CPP14_v2Parser.Short)
                pass

            elif la_ == 9:
                localctx = CPP14_v2Parser.Simpletypespecifier9Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1334
                self.match(CPP14_v2Parser.Int)
                pass

            elif la_ == 10:
                localctx = CPP14_v2Parser.Simpletypespecifier10Context(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1335
                self.match(CPP14_v2Parser.Long)
                pass

            elif la_ == 11:
                localctx = CPP14_v2Parser.Simpletypespecifier11Context(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1336
                self.match(CPP14_v2Parser.Signed)
                pass

            elif la_ == 12:
                localctx = CPP14_v2Parser.Simpletypespecifier12Context(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1337
                self.match(CPP14_v2Parser.Unsigned)
                pass

            elif la_ == 13:
                localctx = CPP14_v2Parser.Simpletypespecifier13Context(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1338
                self.match(CPP14_v2Parser.Float)
                pass

            elif la_ == 14:
                localctx = CPP14_v2Parser.Simpletypespecifier14Context(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1339
                self.match(CPP14_v2Parser.Double)
                pass

            elif la_ == 15:
                localctx = CPP14_v2Parser.Simpletypespecifier15Context(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1340
                self.match(CPP14_v2Parser.Void)
                pass

            elif la_ == 16:
                localctx = CPP14_v2Parser.Simpletypespecifier16Context(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1341
                self.match(CPP14_v2Parser.Auto)
                pass

            elif la_ == 17:
                localctx = CPP14_v2Parser.Simpletypespecifier17Context(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1342
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThetypenameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_thetypename

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Thetypename1Context(ThetypenameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ThetypenameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypename1" ):
                listener.enterThetypename1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypename1" ):
                listener.exitThetypename1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThetypename1" ):
                return visitor.visitThetypename1(self)
            else:
                return visitor.visitChildren(self)


    class Thetypename2Context(ThetypenameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ThetypenameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypename2" ):
                listener.enterThetypename2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypename2" ):
                listener.exitThetypename2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThetypename2" ):
                return visitor.visitThetypename2(self)
            else:
                return visitor.visitChildren(self)


    class Thetypename3Context(ThetypenameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ThetypenameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typedefname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypedefnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypename3" ):
                listener.enterThetypename3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypename3" ):
                listener.exitThetypename3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThetypename3" ):
                return visitor.visitThetypename3(self)
            else:
                return visitor.visitChildren(self)


    class Thetypename4Context(ThetypenameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ThetypenameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypename4" ):
                listener.enterThetypename4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypename4" ):
                listener.exitThetypename4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThetypename4" ):
                return visitor.visitThetypename4(self)
            else:
                return visitor.visitChildren(self)



    def thetypename(self):

        localctx = CPP14_v2Parser.ThetypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_thetypename)
        try:
            self.state = 1349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Thetypename1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1345
                self.classname()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Thetypename2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1346
                self.enumname()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Thetypename3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1347
                self.typedefname()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Thetypename4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1348
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecltypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_decltypespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Decltypespecifier1Context(DecltypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DecltypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Decltype(self):
            return self.getToken(CPP14_v2Parser.Decltype, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecltypespecifier1" ):
                listener.enterDecltypespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecltypespecifier1" ):
                listener.exitDecltypespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecltypespecifier1" ):
                return visitor.visitDecltypespecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Decltypespecifier2Context(DecltypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DecltypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Decltype(self):
            return self.getToken(CPP14_v2Parser.Decltype, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def Auto(self):
            return self.getToken(CPP14_v2Parser.Auto, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecltypespecifier2" ):
                listener.enterDecltypespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecltypespecifier2" ):
                listener.exitDecltypespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecltypespecifier2" ):
                return visitor.visitDecltypespecifier2(self)
            else:
                return visitor.visitChildren(self)



    def decltypespecifier(self):

        localctx = CPP14_v2Parser.DecltypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_decltypespecifier)
        try:
            self.state = 1360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Decltypespecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1351
                self.match(CPP14_v2Parser.Decltype)
                self.state = 1352
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1353
                self.expression(0)
                self.state = 1354
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Decltypespecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1356
                self.match(CPP14_v2Parser.Decltype)
                self.state = 1357
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1358
                self.match(CPP14_v2Parser.Auto)
                self.state = 1359
                self.match(CPP14_v2Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElaboratedtypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_elaboratedtypespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Elaboratedtypespecifier1Context(ElaboratedtypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ElaboratedtypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classkey(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClasskeyContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElaboratedtypespecifier1" ):
                listener.enterElaboratedtypespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElaboratedtypespecifier1" ):
                listener.exitElaboratedtypespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElaboratedtypespecifier1" ):
                return visitor.visitElaboratedtypespecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Elaboratedtypespecifier2Context(ElaboratedtypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ElaboratedtypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classkey(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClasskeyContext,0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElaboratedtypespecifier2" ):
                listener.enterElaboratedtypespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElaboratedtypespecifier2" ):
                listener.exitElaboratedtypespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElaboratedtypespecifier2" ):
                return visitor.visitElaboratedtypespecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Elaboratedtypespecifier3Context(ElaboratedtypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ElaboratedtypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classkey(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClasskeyContext,0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElaboratedtypespecifier3" ):
                listener.enterElaboratedtypespecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElaboratedtypespecifier3" ):
                listener.exitElaboratedtypespecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElaboratedtypespecifier3" ):
                return visitor.visitElaboratedtypespecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Elaboratedtypespecifier4Context(ElaboratedtypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ElaboratedtypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Enum(self):
            return self.getToken(CPP14_v2Parser.Enum, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElaboratedtypespecifier4" ):
                listener.enterElaboratedtypespecifier4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElaboratedtypespecifier4" ):
                listener.exitElaboratedtypespecifier4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElaboratedtypespecifier4" ):
                return visitor.visitElaboratedtypespecifier4(self)
            else:
                return visitor.visitChildren(self)



    def elaboratedtypespecifier(self):

        localctx = CPP14_v2Parser.ElaboratedtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_elaboratedtypespecifier)
        self._la = 0 # Token type
        try:
            self.state = 1386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Elaboratedtypespecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1362
                self.classkey()
                self.state = 1364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1363
                    self.attributespecifierseq(0)


                self.state = 1367
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                if la_ == 1:
                    self.state = 1366
                    self.nestednamespecifier(0)


                self.state = 1369
                self.match(CPP14_v2Parser.Identifier)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Elaboratedtypespecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1371
                self.classkey()
                self.state = 1372
                self.simpletemplateid()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Elaboratedtypespecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1374
                self.classkey()
                self.state = 1375
                self.nestednamespecifier(0)
                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Template:
                    self.state = 1376
                    self.match(CPP14_v2Parser.Template)


                self.state = 1379
                self.simpletemplateid()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Elaboratedtypespecifier4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1381
                self.match(CPP14_v2Parser.Enum)
                self.state = 1383
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 1382
                    self.nestednamespecifier(0)


                self.state = 1385
                self.match(CPP14_v2Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumnameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_enumname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumname" ):
                listener.enterEnumname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumname" ):
                listener.exitEnumname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumname" ):
                return visitor.visitEnumname(self)
            else:
                return visitor.visitChildren(self)




    def enumname(self):

        localctx = CPP14_v2Parser.EnumnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_enumname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1388
            self.match(CPP14_v2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_enumspecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Enumspecifier2Context(EnumspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumhead(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumheadContext,0)

        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)
        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumeratorlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumspecifier2" ):
                listener.enterEnumspecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumspecifier2" ):
                listener.exitEnumspecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumspecifier2" ):
                return visitor.visitEnumspecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Enumspecifier1Context(EnumspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumhead(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumheadContext,0)

        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)
        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)
        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumeratorlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumspecifier1" ):
                listener.enterEnumspecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumspecifier1" ):
                listener.exitEnumspecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumspecifier1" ):
                return visitor.visitEnumspecifier1(self)
            else:
                return visitor.visitChildren(self)



    def enumspecifier(self):

        localctx = CPP14_v2Parser.EnumspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_enumspecifier)
        self._la = 0 # Token type
        try:
            self.state = 1403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Enumspecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1390
                self.enumhead()
                self.state = 1391
                self.match(CPP14_v2Parser.LeftBrace)
                self.state = 1393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Identifier:
                    self.state = 1392
                    self.enumeratorlist(0)


                self.state = 1395
                self.match(CPP14_v2Parser.RightBrace)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Enumspecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1397
                self.enumhead()
                self.state = 1398
                self.match(CPP14_v2Parser.LeftBrace)
                self.state = 1399
                self.enumeratorlist(0)
                self.state = 1400
                self.match(CPP14_v2Parser.Comma)
                self.state = 1401
                self.match(CPP14_v2Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumheadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_enumhead

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Enumhead2Context(EnumheadContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumheadContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumkey(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumkeyContext,0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def enumbase(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumbaseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumhead2" ):
                listener.enterEnumhead2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumhead2" ):
                listener.exitEnumhead2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumhead2" ):
                return visitor.visitEnumhead2(self)
            else:
                return visitor.visitChildren(self)


    class Enumhead1Context(EnumheadContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumheadContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumkey(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumkeyContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def enumbase(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumbaseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumhead1" ):
                listener.enterEnumhead1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumhead1" ):
                listener.exitEnumhead1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumhead1" ):
                return visitor.visitEnumhead1(self)
            else:
                return visitor.visitChildren(self)



    def enumhead(self):

        localctx = CPP14_v2Parser.EnumheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_enumhead)
        self._la = 0 # Token type
        try:
            self.state = 1424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Enumhead1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1405
                self.enumkey()
                self.state = 1407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1406
                    self.attributespecifierseq(0)


                self.state = 1410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Identifier:
                    self.state = 1409
                    self.match(CPP14_v2Parser.Identifier)


                self.state = 1413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Colon:
                    self.state = 1412
                    self.enumbase()


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Enumhead2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1415
                self.enumkey()
                self.state = 1417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1416
                    self.attributespecifierseq(0)


                self.state = 1419
                self.nestednamespecifier(0)
                self.state = 1420
                self.match(CPP14_v2Parser.Identifier)
                self.state = 1422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Colon:
                    self.state = 1421
                    self.enumbase()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpaqueenumdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumkeyContext,0)


        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enumbase(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumbaseContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_opaqueenumdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpaqueenumdeclaration" ):
                listener.enterOpaqueenumdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpaqueenumdeclaration" ):
                listener.exitOpaqueenumdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpaqueenumdeclaration" ):
                return visitor.visitOpaqueenumdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def opaqueenumdeclaration(self):

        localctx = CPP14_v2Parser.OpaqueenumdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_opaqueenumdeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1426
            self.enumkey()
            self.state = 1428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                self.state = 1427
                self.attributespecifierseq(0)


            self.state = 1430
            self.match(CPP14_v2Parser.Identifier)
            self.state = 1432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Colon:
                self.state = 1431
                self.enumbase()


            self.state = 1434
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumkeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_enumkey

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Enumkey3Context(EnumkeyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumkeyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Enum(self):
            return self.getToken(CPP14_v2Parser.Enum, 0)
        def Struct(self):
            return self.getToken(CPP14_v2Parser.Struct, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumkey3" ):
                listener.enterEnumkey3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumkey3" ):
                listener.exitEnumkey3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumkey3" ):
                return visitor.visitEnumkey3(self)
            else:
                return visitor.visitChildren(self)


    class Enumkey2Context(EnumkeyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumkeyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Enum(self):
            return self.getToken(CPP14_v2Parser.Enum, 0)
        def Class(self):
            return self.getToken(CPP14_v2Parser.Class, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumkey2" ):
                listener.enterEnumkey2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumkey2" ):
                listener.exitEnumkey2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumkey2" ):
                return visitor.visitEnumkey2(self)
            else:
                return visitor.visitChildren(self)


    class Enumkey1Context(EnumkeyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumkeyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Enum(self):
            return self.getToken(CPP14_v2Parser.Enum, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumkey1" ):
                listener.enterEnumkey1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumkey1" ):
                listener.exitEnumkey1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumkey1" ):
                return visitor.visitEnumkey1(self)
            else:
                return visitor.visitChildren(self)



    def enumkey(self):

        localctx = CPP14_v2Parser.EnumkeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_enumkey)
        try:
            self.state = 1441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Enumkey1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1436
                self.match(CPP14_v2Parser.Enum)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Enumkey2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1437
                self.match(CPP14_v2Parser.Enum)
                self.state = 1438
                self.match(CPP14_v2Parser.Class)
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Enumkey3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1439
                self.match(CPP14_v2Parser.Enum)
                self.state = 1440
                self.match(CPP14_v2Parser.Struct)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumbaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_enumbase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumbase" ):
                listener.enterEnumbase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumbase" ):
                listener.exitEnumbase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumbase" ):
                return visitor.visitEnumbase(self)
            else:
                return visitor.visitChildren(self)




    def enumbase(self):

        localctx = CPP14_v2Parser.EnumbaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_enumbase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self.match(CPP14_v2Parser.Colon)
            self.state = 1444
            self.typespecifierseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_enumeratorlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Enumeratorlist2Context(EnumeratorlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumeratorlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumeratorlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def enumeratordefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumeratordefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorlist2" ):
                listener.enterEnumeratorlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorlist2" ):
                listener.exitEnumeratorlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratorlist2" ):
                return visitor.visitEnumeratorlist2(self)
            else:
                return visitor.visitChildren(self)


    class Enumeratorlist1Context(EnumeratorlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumeratorlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumeratordefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumeratordefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorlist1" ):
                listener.enterEnumeratorlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorlist1" ):
                listener.exitEnumeratorlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratorlist1" ):
                return visitor.visitEnumeratorlist1(self)
            else:
                return visitor.visitChildren(self)



    def enumeratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.EnumeratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 176
        self.enterRecursionRule(localctx, 176, self.RULE_enumeratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Enumeratorlist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1447
            self.enumeratordefinition()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1454
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Enumeratorlist2Context(self, CPP14_v2Parser.EnumeratorlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enumeratorlist)
                    self.state = 1449
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1450
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 1451
                    self.enumeratordefinition() 
                self.state = 1456
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EnumeratordefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_enumeratordefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Enumeratordefinition2Context(EnumeratordefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumeratordefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumerator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumeratorContext,0)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratordefinition2" ):
                listener.enterEnumeratordefinition2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratordefinition2" ):
                listener.exitEnumeratordefinition2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratordefinition2" ):
                return visitor.visitEnumeratordefinition2(self)
            else:
                return visitor.visitChildren(self)


    class Enumeratordefinition1Context(EnumeratordefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumeratordefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumerator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumeratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratordefinition1" ):
                listener.enterEnumeratordefinition1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratordefinition1" ):
                listener.exitEnumeratordefinition1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratordefinition1" ):
                return visitor.visitEnumeratordefinition1(self)
            else:
                return visitor.visitChildren(self)



    def enumeratordefinition(self):

        localctx = CPP14_v2Parser.EnumeratordefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_enumeratordefinition)
        try:
            self.state = 1462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Enumeratordefinition1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1457
                self.enumerator()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Enumeratordefinition2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1458
                self.enumerator()
                self.state = 1459
                self.match(CPP14_v2Parser.Assign)
                self.state = 1460
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerator" ):
                return visitor.visitEnumerator(self)
            else:
                return visitor.visitChildren(self)




    def enumerator(self):

        localctx = CPP14_v2Parser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_enumerator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self.match(CPP14_v2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacenameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_namespacename

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Namespacename2Context(NamespacenameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NamespacenameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namespacealias(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacealiasContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacename2" ):
                listener.enterNamespacename2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacename2" ):
                listener.exitNamespacename2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacename2" ):
                return visitor.visitNamespacename2(self)
            else:
                return visitor.visitChildren(self)


    class Namespacename1Context(NamespacenameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NamespacenameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def originalnamespacename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.OriginalnamespacenameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacename1" ):
                listener.enterNamespacename1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacename1" ):
                listener.exitNamespacename1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacename1" ):
                return visitor.visitNamespacename1(self)
            else:
                return visitor.visitChildren(self)



    def namespacename(self):

        localctx = CPP14_v2Parser.NamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_namespacename)
        try:
            self.state = 1468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Namespacename1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1466
                self.originalnamespacename()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Namespacename2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1467
                self.namespacealias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OriginalnamespacenameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_originalnamespacename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOriginalnamespacename" ):
                listener.enterOriginalnamespacename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOriginalnamespacename" ):
                listener.exitOriginalnamespacename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOriginalnamespacename" ):
                return visitor.visitOriginalnamespacename(self)
            else:
                return visitor.visitChildren(self)




    def originalnamespacename(self):

        localctx = CPP14_v2Parser.OriginalnamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_originalnamespacename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1470
            self.match(CPP14_v2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_namespacedefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Namespacedefinition1Context(NamespacedefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NamespacedefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namednamespacedefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamednamespacedefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacedefinition1" ):
                listener.enterNamespacedefinition1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacedefinition1" ):
                listener.exitNamespacedefinition1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacedefinition1" ):
                return visitor.visitNamespacedefinition1(self)
            else:
                return visitor.visitChildren(self)


    class Namespacedefinition2Context(NamespacedefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NamespacedefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unnamednamespacedefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UnnamednamespacedefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacedefinition2" ):
                listener.enterNamespacedefinition2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacedefinition2" ):
                listener.exitNamespacedefinition2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacedefinition2" ):
                return visitor.visitNamespacedefinition2(self)
            else:
                return visitor.visitChildren(self)



    def namespacedefinition(self):

        localctx = CPP14_v2Parser.NamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_namespacedefinition)
        try:
            self.state = 1474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Namespacedefinition1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1472
                self.namednamespacedefinition()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Namespacedefinition2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1473
                self.unnamednamespacedefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamednamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_namednamespacedefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Namednamespacedefinition2Context(NamednamespacedefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NamednamespacedefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def extensionnamespacedefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExtensionnamespacedefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamednamespacedefinition2" ):
                listener.enterNamednamespacedefinition2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamednamespacedefinition2" ):
                listener.exitNamednamespacedefinition2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamednamespacedefinition2" ):
                return visitor.visitNamednamespacedefinition2(self)
            else:
                return visitor.visitChildren(self)


    class Namednamespacedefinition1Context(NamednamespacedefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NamednamespacedefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def originalnamespacedefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.OriginalnamespacedefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamednamespacedefinition1" ):
                listener.enterNamednamespacedefinition1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamednamespacedefinition1" ):
                listener.exitNamednamespacedefinition1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamednamespacedefinition1" ):
                return visitor.visitNamednamespacedefinition1(self)
            else:
                return visitor.visitChildren(self)



    def namednamespacedefinition(self):

        localctx = CPP14_v2Parser.NamednamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_namednamespacedefinition)
        try:
            self.state = 1478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Namednamespacedefinition1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1476
                self.originalnamespacedefinition()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Namednamespacedefinition2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1477
                self.extensionnamespacedefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OriginalnamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14_v2Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(CPP14_v2Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_originalnamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOriginalnamespacedefinition" ):
                listener.enterOriginalnamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOriginalnamespacedefinition" ):
                listener.exitOriginalnamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOriginalnamespacedefinition" ):
                return visitor.visitOriginalnamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def originalnamespacedefinition(self):

        localctx = CPP14_v2Parser.OriginalnamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_originalnamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Inline:
                self.state = 1480
                self.match(CPP14_v2Parser.Inline)


            self.state = 1483
            self.match(CPP14_v2Parser.Namespace)
            self.state = 1484
            self.match(CPP14_v2Parser.Identifier)
            self.state = 1485
            self.match(CPP14_v2Parser.LeftBrace)
            self.state = 1486
            self.namespacebody()
            self.state = 1487
            self.match(CPP14_v2Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionnamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14_v2Parser.Namespace, 0)

        def originalnamespacename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.OriginalnamespacenameContext,0)


        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(CPP14_v2Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_extensionnamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionnamespacedefinition" ):
                listener.enterExtensionnamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionnamespacedefinition" ):
                listener.exitExtensionnamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionnamespacedefinition" ):
                return visitor.visitExtensionnamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def extensionnamespacedefinition(self):

        localctx = CPP14_v2Parser.ExtensionnamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_extensionnamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Inline:
                self.state = 1489
                self.match(CPP14_v2Parser.Inline)


            self.state = 1492
            self.match(CPP14_v2Parser.Namespace)
            self.state = 1493
            self.originalnamespacename()
            self.state = 1494
            self.match(CPP14_v2Parser.LeftBrace)
            self.state = 1495
            self.namespacebody()
            self.state = 1496
            self.match(CPP14_v2Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnnamednamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14_v2Parser.Namespace, 0)

        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(CPP14_v2Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_unnamednamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnamednamespacedefinition" ):
                listener.enterUnnamednamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnamednamespacedefinition" ):
                listener.exitUnnamednamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnnamednamespacedefinition" ):
                return visitor.visitUnnamednamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def unnamednamespacedefinition(self):

        localctx = CPP14_v2Parser.UnnamednamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_unnamednamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Inline:
                self.state = 1498
                self.match(CPP14_v2Parser.Inline)


            self.state = 1501
            self.match(CPP14_v2Parser.Namespace)
            self.state = 1502
            self.match(CPP14_v2Parser.LeftBrace)
            self.state = 1503
            self.namespacebody()
            self.state = 1504
            self.match(CPP14_v2Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacebodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_namespacebody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacebody" ):
                listener.enterNamespacebody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacebody" ):
                listener.exitNamespacebody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacebody" ):
                return visitor.visitNamespacebody(self)
            else:
                return visitor.visitChildren(self)




    def namespacebody(self):

        localctx = CPP14_v2Parser.NamespacebodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_namespacebody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Asm) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Constexpr) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.Explicit) | (1 << CPP14_v2Parser.Extern) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Friend) | (1 << CPP14_v2Parser.Inline) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.Mutable) | (1 << CPP14_v2Parser.Namespace) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Register) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Static) | (1 << CPP14_v2Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14_v2Parser.Struct - 65)) | (1 << (CPP14_v2Parser.Template - 65)) | (1 << (CPP14_v2Parser.Thread_local - 65)) | (1 << (CPP14_v2Parser.Typedef - 65)) | (1 << (CPP14_v2Parser.Typename_ - 65)) | (1 << (CPP14_v2Parser.Union - 65)) | (1 << (CPP14_v2Parser.Unsigned - 65)) | (1 << (CPP14_v2Parser.Using - 65)) | (1 << (CPP14_v2Parser.Virtual - 65)) | (1 << (CPP14_v2Parser.Void - 65)) | (1 << (CPP14_v2Parser.Volatile - 65)) | (1 << (CPP14_v2Parser.Wchar - 65)) | (1 << (CPP14_v2Parser.LeftParen - 65)) | (1 << (CPP14_v2Parser.LeftBracket - 65)) | (1 << (CPP14_v2Parser.Star - 65)) | (1 << (CPP14_v2Parser.And - 65)) | (1 << (CPP14_v2Parser.Tilde - 65)) | (1 << (CPP14_v2Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14_v2Parser.Semi - 129)) | (1 << (CPP14_v2Parser.Ellipsis - 129)) | (1 << (CPP14_v2Parser.Identifier - 129)))) != 0):
                self.state = 1506
                self.declarationseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacealiasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_namespacealias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacealias" ):
                listener.enterNamespacealias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacealias" ):
                listener.exitNamespacealias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacealias" ):
                return visitor.visitNamespacealias(self)
            else:
                return visitor.visitChildren(self)




    def namespacealias(self):

        localctx = CPP14_v2Parser.NamespacealiasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_namespacealias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self.match(CPP14_v2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacealiasdefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14_v2Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)

        def qualifiednamespacespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.QualifiednamespacespecifierContext,0)


        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_namespacealiasdefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacealiasdefinition" ):
                listener.enterNamespacealiasdefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacealiasdefinition" ):
                listener.exitNamespacealiasdefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacealiasdefinition" ):
                return visitor.visitNamespacealiasdefinition(self)
            else:
                return visitor.visitChildren(self)




    def namespacealiasdefinition(self):

        localctx = CPP14_v2Parser.NamespacealiasdefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_namespacealiasdefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1511
            self.match(CPP14_v2Parser.Namespace)
            self.state = 1512
            self.match(CPP14_v2Parser.Identifier)
            self.state = 1513
            self.match(CPP14_v2Parser.Assign)
            self.state = 1514
            self.qualifiednamespacespecifier()
            self.state = 1515
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiednamespacespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespacename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacenameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_qualifiednamespacespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiednamespacespecifier" ):
                listener.enterQualifiednamespacespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiednamespacespecifier" ):
                listener.exitQualifiednamespacespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiednamespacespecifier" ):
                return visitor.visitQualifiednamespacespecifier(self)
            else:
                return visitor.visitChildren(self)




    def qualifiednamespacespecifier(self):

        localctx = CPP14_v2Parser.QualifiednamespacespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_qualifiednamespacespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1517
                self.nestednamespecifier(0)


            self.state = 1520
            self.namespacename()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_usingdeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Usingdeclaration1Context(UsingdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UsingdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(CPP14_v2Parser.Using, 0)
        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UnqualifiedidContext,0)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)
        def Typename_(self):
            return self.getToken(CPP14_v2Parser.Typename_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingdeclaration1" ):
                listener.enterUsingdeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingdeclaration1" ):
                listener.exitUsingdeclaration1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingdeclaration1" ):
                return visitor.visitUsingdeclaration1(self)
            else:
                return visitor.visitChildren(self)


    class Usingdeclaration2Context(UsingdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UsingdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(CPP14_v2Parser.Using, 0)
        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)
        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UnqualifiedidContext,0)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingdeclaration2" ):
                listener.enterUsingdeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingdeclaration2" ):
                listener.exitUsingdeclaration2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingdeclaration2" ):
                return visitor.visitUsingdeclaration2(self)
            else:
                return visitor.visitChildren(self)



    def usingdeclaration(self):

        localctx = CPP14_v2Parser.UsingdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_usingdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Usingdeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1522
                self.match(CPP14_v2Parser.Using)
                self.state = 1524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Typename_:
                    self.state = 1523
                    self.match(CPP14_v2Parser.Typename_)


                self.state = 1526
                self.nestednamespecifier(0)
                self.state = 1527
                self.unqualifiedid()
                self.state = 1528
                self.match(CPP14_v2Parser.Semi)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Usingdeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1530
                self.match(CPP14_v2Parser.Using)
                self.state = 1531
                self.match(CPP14_v2Parser.Doublecolon)
                self.state = 1532
                self.unqualifiedid()
                self.state = 1533
                self.match(CPP14_v2Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingdirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14_v2Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14_v2Parser.Namespace, 0)

        def namespacename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacenameContext,0)


        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_usingdirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingdirective" ):
                listener.enterUsingdirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingdirective" ):
                listener.exitUsingdirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingdirective" ):
                return visitor.visitUsingdirective(self)
            else:
                return visitor.visitChildren(self)




    def usingdirective(self):

        localctx = CPP14_v2Parser.UsingdirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_usingdirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                self.state = 1537
                self.attributespecifierseq(0)


            self.state = 1540
            self.match(CPP14_v2Parser.Using)
            self.state = 1541
            self.match(CPP14_v2Parser.Namespace)
            self.state = 1543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1542
                self.nestednamespecifier(0)


            self.state = 1545
            self.namespacename()
            self.state = 1546
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmdefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Asm(self):
            return self.getToken(CPP14_v2Parser.Asm, 0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def Stringliteral(self):
            return self.getToken(CPP14_v2Parser.Stringliteral, 0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_asmdefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsmdefinition" ):
                listener.enterAsmdefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsmdefinition" ):
                listener.exitAsmdefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmdefinition" ):
                return visitor.visitAsmdefinition(self)
            else:
                return visitor.visitChildren(self)




    def asmdefinition(self):

        localctx = CPP14_v2Parser.AsmdefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_asmdefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            self.match(CPP14_v2Parser.Asm)
            self.state = 1549
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 1550
            self.match(CPP14_v2Parser.Stringliteral)
            self.state = 1551
            self.match(CPP14_v2Parser.RightParen)
            self.state = 1552
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinkagespecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_linkagespecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Linkagespecification2Context(LinkagespecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LinkagespecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Extern(self):
            return self.getToken(CPP14_v2Parser.Extern, 0)
        def Stringliteral(self):
            return self.getToken(CPP14_v2Parser.Stringliteral, 0)
        def declaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkagespecification2" ):
                listener.enterLinkagespecification2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkagespecification2" ):
                listener.exitLinkagespecification2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinkagespecification2" ):
                return visitor.visitLinkagespecification2(self)
            else:
                return visitor.visitChildren(self)


    class Linkagespecification1Context(LinkagespecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LinkagespecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Extern(self):
            return self.getToken(CPP14_v2Parser.Extern, 0)
        def Stringliteral(self):
            return self.getToken(CPP14_v2Parser.Stringliteral, 0)
        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)
        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)
        def declarationseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkagespecification1" ):
                listener.enterLinkagespecification1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkagespecification1" ):
                listener.exitLinkagespecification1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinkagespecification1" ):
                return visitor.visitLinkagespecification1(self)
            else:
                return visitor.visitChildren(self)



    def linkagespecification(self):

        localctx = CPP14_v2Parser.LinkagespecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_linkagespecification)
        self._la = 0 # Token type
        try:
            self.state = 1564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Linkagespecification1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1554
                self.match(CPP14_v2Parser.Extern)
                self.state = 1555
                self.match(CPP14_v2Parser.Stringliteral)
                self.state = 1556
                self.match(CPP14_v2Parser.LeftBrace)
                self.state = 1558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Asm) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Constexpr) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.Explicit) | (1 << CPP14_v2Parser.Extern) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Friend) | (1 << CPP14_v2Parser.Inline) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.Mutable) | (1 << CPP14_v2Parser.Namespace) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Register) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Static) | (1 << CPP14_v2Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14_v2Parser.Struct - 65)) | (1 << (CPP14_v2Parser.Template - 65)) | (1 << (CPP14_v2Parser.Thread_local - 65)) | (1 << (CPP14_v2Parser.Typedef - 65)) | (1 << (CPP14_v2Parser.Typename_ - 65)) | (1 << (CPP14_v2Parser.Union - 65)) | (1 << (CPP14_v2Parser.Unsigned - 65)) | (1 << (CPP14_v2Parser.Using - 65)) | (1 << (CPP14_v2Parser.Virtual - 65)) | (1 << (CPP14_v2Parser.Void - 65)) | (1 << (CPP14_v2Parser.Volatile - 65)) | (1 << (CPP14_v2Parser.Wchar - 65)) | (1 << (CPP14_v2Parser.LeftParen - 65)) | (1 << (CPP14_v2Parser.LeftBracket - 65)) | (1 << (CPP14_v2Parser.Star - 65)) | (1 << (CPP14_v2Parser.And - 65)) | (1 << (CPP14_v2Parser.Tilde - 65)) | (1 << (CPP14_v2Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14_v2Parser.Semi - 129)) | (1 << (CPP14_v2Parser.Ellipsis - 129)) | (1 << (CPP14_v2Parser.Identifier - 129)))) != 0):
                    self.state = 1557
                    self.declarationseq(0)


                self.state = 1560
                self.match(CPP14_v2Parser.RightBrace)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Linkagespecification2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1561
                self.match(CPP14_v2Parser.Extern)
                self.state = 1562
                self.match(CPP14_v2Parser.Stringliteral)
                self.state = 1563
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attributespecifierseq

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Attributespecifierseq1Context(AttributespecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributespecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attributespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifierseq1" ):
                listener.enterAttributespecifierseq1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifierseq1" ):
                listener.exitAttributespecifierseq1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributespecifierseq1" ):
                return visitor.visitAttributespecifierseq1(self)
            else:
                return visitor.visitChildren(self)


    class Attributespecifierseq2Context(AttributespecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributespecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def attributespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifierseq2" ):
                listener.enterAttributespecifierseq2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifierseq2" ):
                listener.exitAttributespecifierseq2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributespecifierseq2" ):
                return visitor.visitAttributespecifierseq2(self)
            else:
                return visitor.visitChildren(self)



    def attributespecifierseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.AttributespecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 212
        self.enterRecursionRule(localctx, 212, self.RULE_attributespecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Attributespecifierseq1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1567
            self.attributespecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1573
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Attributespecifierseq2Context(self, CPP14_v2Parser.AttributespecifierseqContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_attributespecifierseq)
                    self.state = 1569
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1570
                    self.attributespecifier() 
                self.state = 1575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AttributespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attributespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Attributespecifier2Context(AttributespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def alignmentspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AlignmentspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifier2" ):
                listener.enterAttributespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifier2" ):
                listener.exitAttributespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributespecifier2" ):
                return visitor.visitAttributespecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Attributespecifier1Context(AttributespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14_v2Parser.LeftBracket)
            else:
                return self.getToken(CPP14_v2Parser.LeftBracket, i)
        def attributelist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributelistContext,0)

        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14_v2Parser.RightBracket)
            else:
                return self.getToken(CPP14_v2Parser.RightBracket, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifier1" ):
                listener.enterAttributespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifier1" ):
                listener.exitAttributespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributespecifier1" ):
                return visitor.visitAttributespecifier1(self)
            else:
                return visitor.visitChildren(self)



    def attributespecifier(self):

        localctx = CPP14_v2Parser.AttributespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_attributespecifier)
        try:
            self.state = 1583
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.LeftBracket]:
                localctx = CPP14_v2Parser.Attributespecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1576
                self.match(CPP14_v2Parser.LeftBracket)
                self.state = 1577
                self.match(CPP14_v2Parser.LeftBracket)
                self.state = 1578
                self.attributelist(0)
                self.state = 1579
                self.match(CPP14_v2Parser.RightBracket)
                self.state = 1580
                self.match(CPP14_v2Parser.RightBracket)
                pass
            elif token in [CPP14_v2Parser.Alignas]:
                localctx = CPP14_v2Parser.Attributespecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1582
                self.alignmentspecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_alignmentspecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Alignmentspecifier1Context(AlignmentspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AlignmentspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Alignas(self):
            return self.getToken(CPP14_v2Parser.Alignas, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentspecifier1" ):
                listener.enterAlignmentspecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentspecifier1" ):
                listener.exitAlignmentspecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlignmentspecifier1" ):
                return visitor.visitAlignmentspecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Alignmentspecifier2Context(AlignmentspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AlignmentspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Alignas(self):
            return self.getToken(CPP14_v2Parser.Alignas, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentspecifier2" ):
                listener.enterAlignmentspecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentspecifier2" ):
                listener.exitAlignmentspecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlignmentspecifier2" ):
                return visitor.visitAlignmentspecifier2(self)
            else:
                return visitor.visitChildren(self)



    def alignmentspecifier(self):

        localctx = CPP14_v2Parser.AlignmentspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_alignmentspecifier)
        self._la = 0 # Token type
        try:
            self.state = 1601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Alignmentspecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1585
                self.match(CPP14_v2Parser.Alignas)
                self.state = 1586
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1587
                self.thetypeid()
                self.state = 1589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Ellipsis:
                    self.state = 1588
                    self.match(CPP14_v2Parser.Ellipsis)


                self.state = 1591
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Alignmentspecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1593
                self.match(CPP14_v2Parser.Alignas)
                self.state = 1594
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1595
                self.constantexpression()
                self.state = 1597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Ellipsis:
                    self.state = 1596
                    self.match(CPP14_v2Parser.Ellipsis)


                self.state = 1599
                self.match(CPP14_v2Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributelistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attributelist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Attributelist3Context(AttributelistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributelistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attribute(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributeContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributelist3" ):
                listener.enterAttributelist3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributelist3" ):
                listener.exitAttributelist3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributelist3" ):
                return visitor.visitAttributelist3(self)
            else:
                return visitor.visitChildren(self)


    class Attributelist2Context(AttributelistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributelistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attributelist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributelistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def attribute(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributelist2" ):
                listener.enterAttributelist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributelist2" ):
                listener.exitAttributelist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributelist2" ):
                return visitor.visitAttributelist2(self)
            else:
                return visitor.visitChildren(self)


    class Attributelist4Context(AttributelistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributelistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attributelist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributelistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def attribute(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributeContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributelist4" ):
                listener.enterAttributelist4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributelist4" ):
                listener.exitAttributelist4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributelist4" ):
                return visitor.visitAttributelist4(self)
            else:
                return visitor.visitChildren(self)


    class Attributelist1Context(AttributelistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributelistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attribute(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributelist1" ):
                listener.enterAttributelist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributelist1" ):
                listener.exitAttributelist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributelist1" ):
                return visitor.visitAttributelist1(self)
            else:
                return visitor.visitChildren(self)



    def attributelist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.AttributelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 218
        self.enterRecursionRule(localctx, 218, self.RULE_attributelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Attributelist1Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1605
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1604
                    self.attribute()


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Attributelist3Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1607
                self.attribute()
                self.state = 1608
                self.match(CPP14_v2Parser.Ellipsis)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1624
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1622
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Attributelist2Context(self, CPP14_v2Parser.AttributelistContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1612
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1613
                        self.match(CPP14_v2Parser.Comma)
                        self.state = 1615
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                        if la_ == 1:
                            self.state = 1614
                            self.attribute()


                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Attributelist4Context(self, CPP14_v2Parser.AttributelistContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1617
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1618
                        self.match(CPP14_v2Parser.Comma)
                        self.state = 1619
                        self.attribute()
                        self.state = 1620
                        self.match(CPP14_v2Parser.Ellipsis)
                        pass

             
                self.state = 1626
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributetoken(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributetokenContext,0)


        def attributeargumentclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributeargumentclauseContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = CPP14_v2Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1627
            self.attributetoken()
            self.state = 1629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1628
                self.attributeargumentclause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributetokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attributetoken

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Attributetoken1Context(AttributetokenContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributetokenContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributetoken1" ):
                listener.enterAttributetoken1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributetoken1" ):
                listener.exitAttributetoken1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributetoken1" ):
                return visitor.visitAttributetoken1(self)
            else:
                return visitor.visitChildren(self)


    class Attributetoken2Context(AttributetokenContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributetokenContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attributescopedtoken(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributescopedtokenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributetoken2" ):
                listener.enterAttributetoken2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributetoken2" ):
                listener.exitAttributetoken2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributetoken2" ):
                return visitor.visitAttributetoken2(self)
            else:
                return visitor.visitChildren(self)



    def attributetoken(self):

        localctx = CPP14_v2Parser.AttributetokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_attributetoken)
        try:
            self.state = 1633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Attributetoken1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1631
                self.match(CPP14_v2Parser.Identifier)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Attributetoken2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1632
                self.attributescopedtoken()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributescopedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributenamespace(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributenamespaceContext,0)


        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attributescopedtoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributescopedtoken" ):
                listener.enterAttributescopedtoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributescopedtoken" ):
                listener.exitAttributescopedtoken(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributescopedtoken" ):
                return visitor.visitAttributescopedtoken(self)
            else:
                return visitor.visitChildren(self)




    def attributescopedtoken(self):

        localctx = CPP14_v2Parser.AttributescopedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_attributescopedtoken)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self.attributenamespace()
            self.state = 1636
            self.match(CPP14_v2Parser.Doublecolon)
            self.state = 1637
            self.match(CPP14_v2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributenamespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attributenamespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributenamespace" ):
                listener.enterAttributenamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributenamespace" ):
                listener.exitAttributenamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributenamespace" ):
                return visitor.visitAttributenamespace(self)
            else:
                return visitor.visitChildren(self)




    def attributenamespace(self):

        localctx = CPP14_v2Parser.AttributenamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_attributenamespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1639
            self.match(CPP14_v2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeargumentclauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BalancedtokenseqContext,0)


        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attributeargumentclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeargumentclause" ):
                listener.enterAttributeargumentclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeargumentclause" ):
                listener.exitAttributeargumentclause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeargumentclause" ):
                return visitor.visitAttributeargumentclause(self)
            else:
                return visitor.visitChildren(self)




    def attributeargumentclause(self):

        localctx = CPP14_v2Parser.AttributeargumentclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_attributeargumentclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1641
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 1642
            self.balancedtokenseq(0)
            self.state = 1643
            self.match(CPP14_v2Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BalancedtokenseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_balancedtokenseq

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Balancedtokenseq2Context(BalancedtokenseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BalancedtokenseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BalancedtokenseqContext,0)

        def balancedtoken(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BalancedtokenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtokenseq2" ):
                listener.enterBalancedtokenseq2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtokenseq2" ):
                listener.exitBalancedtokenseq2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtokenseq2" ):
                return visitor.visitBalancedtokenseq2(self)
            else:
                return visitor.visitChildren(self)


    class Balancedtokenseq1Context(BalancedtokenseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BalancedtokenseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def balancedtoken(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BalancedtokenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtokenseq1" ):
                listener.enterBalancedtokenseq1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtokenseq1" ):
                listener.exitBalancedtokenseq1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtokenseq1" ):
                return visitor.visitBalancedtokenseq1(self)
            else:
                return visitor.visitChildren(self)



    def balancedtokenseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.BalancedtokenseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 230
        self.enterRecursionRule(localctx, 230, self.RULE_balancedtokenseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Balancedtokenseq1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1646
                self.balancedtoken()


            self._ctx.stop = self._input.LT(-1)
            self.state = 1653
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Balancedtokenseq2Context(self, CPP14_v2Parser.BalancedtokenseqContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_balancedtokenseq)
                    self.state = 1649
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1650
                    self.balancedtoken() 
                self.state = 1655
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BalancedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_balancedtoken

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Balancedtoken3Context(BalancedtokenContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BalancedtokenContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)
        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BalancedtokenseqContext,0)

        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtoken3" ):
                listener.enterBalancedtoken3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtoken3" ):
                listener.exitBalancedtoken3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtoken3" ):
                return visitor.visitBalancedtoken3(self)
            else:
                return visitor.visitChildren(self)


    class Balancedtoken4Context(BalancedtokenContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BalancedtokenContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14_v2Parser.LeftParen)
            else:
                return self.getToken(CPP14_v2Parser.LeftParen, i)
        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14_v2Parser.RightParen)
            else:
                return self.getToken(CPP14_v2Parser.RightParen, i)
        def LeftBrace(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14_v2Parser.LeftBrace)
            else:
                return self.getToken(CPP14_v2Parser.LeftBrace, i)
        def RightBrace(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14_v2Parser.RightBrace)
            else:
                return self.getToken(CPP14_v2Parser.RightBrace, i)
        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14_v2Parser.LeftBracket)
            else:
                return self.getToken(CPP14_v2Parser.LeftBracket, i)
        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14_v2Parser.RightBracket)
            else:
                return self.getToken(CPP14_v2Parser.RightBracket, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtoken4" ):
                listener.enterBalancedtoken4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtoken4" ):
                listener.exitBalancedtoken4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtoken4" ):
                return visitor.visitBalancedtoken4(self)
            else:
                return visitor.visitChildren(self)


    class Balancedtoken1Context(BalancedtokenContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BalancedtokenContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BalancedtokenseqContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtoken1" ):
                listener.enterBalancedtoken1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtoken1" ):
                listener.exitBalancedtoken1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtoken1" ):
                return visitor.visitBalancedtoken1(self)
            else:
                return visitor.visitChildren(self)


    class Balancedtoken2Context(BalancedtokenContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BalancedtokenContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BalancedtokenseqContext,0)

        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtoken2" ):
                listener.enterBalancedtoken2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtoken2" ):
                listener.exitBalancedtoken2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtoken2" ):
                return visitor.visitBalancedtoken2(self)
            else:
                return visitor.visitChildren(self)



    def balancedtoken(self):

        localctx = CPP14_v2Parser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_balancedtoken)
        self._la = 0 # Token type
        try:
            self.state = 1673
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.LeftParen]:
                localctx = CPP14_v2Parser.Balancedtoken1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1656
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1657
                self.balancedtokenseq(0)
                self.state = 1658
                self.match(CPP14_v2Parser.RightParen)
                pass
            elif token in [CPP14_v2Parser.LeftBracket]:
                localctx = CPP14_v2Parser.Balancedtoken2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1660
                self.match(CPP14_v2Parser.LeftBracket)
                self.state = 1661
                self.balancedtokenseq(0)
                self.state = 1662
                self.match(CPP14_v2Parser.RightBracket)
                pass
            elif token in [CPP14_v2Parser.LeftBrace]:
                localctx = CPP14_v2Parser.Balancedtoken3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1664
                self.match(CPP14_v2Parser.LeftBrace)
                self.state = 1665
                self.balancedtokenseq(0)
                self.state = 1666
                self.match(CPP14_v2Parser.RightBrace)
                pass
            elif token in [CPP14_v2Parser.T__0, CPP14_v2Parser.T__1, CPP14_v2Parser.T__2, CPP14_v2Parser.T__3, CPP14_v2Parser.T__4, CPP14_v2Parser.T__5, CPP14_v2Parser.MultiLineMacro, CPP14_v2Parser.Directive, CPP14_v2Parser.Alignas, CPP14_v2Parser.Alignof, CPP14_v2Parser.Asm, CPP14_v2Parser.Auto, CPP14_v2Parser.Bool, CPP14_v2Parser.Break, CPP14_v2Parser.Case, CPP14_v2Parser.Catch, CPP14_v2Parser.Char, CPP14_v2Parser.Char16, CPP14_v2Parser.Char32, CPP14_v2Parser.Class, CPP14_v2Parser.Const, CPP14_v2Parser.Constexpr, CPP14_v2Parser.Const_cast, CPP14_v2Parser.Continue, CPP14_v2Parser.Decltype, CPP14_v2Parser.Default, CPP14_v2Parser.Delete, CPP14_v2Parser.Do, CPP14_v2Parser.Double, CPP14_v2Parser.Dynamic_cast, CPP14_v2Parser.Else, CPP14_v2Parser.Enum, CPP14_v2Parser.Explicit, CPP14_v2Parser.Export, CPP14_v2Parser.Extern, CPP14_v2Parser.False1, CPP14_v2Parser.Final, CPP14_v2Parser.Float, CPP14_v2Parser.For, CPP14_v2Parser.Friend, CPP14_v2Parser.Goto, CPP14_v2Parser.If, CPP14_v2Parser.Inline, CPP14_v2Parser.Int, CPP14_v2Parser.Long, CPP14_v2Parser.Mutable, CPP14_v2Parser.Namespace, CPP14_v2Parser.New, CPP14_v2Parser.Noexcept, CPP14_v2Parser.Nullptr, CPP14_v2Parser.Operator, CPP14_v2Parser.Override, CPP14_v2Parser.Private, CPP14_v2Parser.Protected, CPP14_v2Parser.Public, CPP14_v2Parser.Register, CPP14_v2Parser.Reinterpret_cast, CPP14_v2Parser.Return, CPP14_v2Parser.Short, CPP14_v2Parser.Signed, CPP14_v2Parser.Sizeof, CPP14_v2Parser.Static, CPP14_v2Parser.Static_assert, CPP14_v2Parser.Static_cast, CPP14_v2Parser.Struct, CPP14_v2Parser.Switch, CPP14_v2Parser.Template, CPP14_v2Parser.This, CPP14_v2Parser.Thread_local, CPP14_v2Parser.Throw, CPP14_v2Parser.True1, CPP14_v2Parser.Try, CPP14_v2Parser.Typedef, CPP14_v2Parser.Typeid_, CPP14_v2Parser.Typename_, CPP14_v2Parser.Union, CPP14_v2Parser.Unsigned, CPP14_v2Parser.Using, CPP14_v2Parser.Virtual, CPP14_v2Parser.Void, CPP14_v2Parser.Volatile, CPP14_v2Parser.Wchar, CPP14_v2Parser.While, CPP14_v2Parser.Plus, CPP14_v2Parser.Minus, CPP14_v2Parser.Star, CPP14_v2Parser.Div, CPP14_v2Parser.Mod, CPP14_v2Parser.Caret, CPP14_v2Parser.And, CPP14_v2Parser.Or, CPP14_v2Parser.Tilde, CPP14_v2Parser.Not, CPP14_v2Parser.Assign, CPP14_v2Parser.Less, CPP14_v2Parser.Greater, CPP14_v2Parser.PlusAssign, CPP14_v2Parser.MinusAssign, CPP14_v2Parser.StarAssign, CPP14_v2Parser.DivAssign, CPP14_v2Parser.ModAssign, CPP14_v2Parser.XorAssign, CPP14_v2Parser.AndAssign, CPP14_v2Parser.OrAssign, CPP14_v2Parser.LeftShift, CPP14_v2Parser.RightShift, CPP14_v2Parser.LeftShiftAssign, CPP14_v2Parser.RightShiftAssign, CPP14_v2Parser.Equal, CPP14_v2Parser.NotEqual, CPP14_v2Parser.LessEqual, CPP14_v2Parser.GreaterEqual, CPP14_v2Parser.AndAnd, CPP14_v2Parser.OrOr, CPP14_v2Parser.PlusPlus, CPP14_v2Parser.MinusMinus, CPP14_v2Parser.Comma, CPP14_v2Parser.ArrowStar, CPP14_v2Parser.Arrow, CPP14_v2Parser.Question, CPP14_v2Parser.Colon, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Semi, CPP14_v2Parser.Dot, CPP14_v2Parser.DotStar, CPP14_v2Parser.Ellipsis, CPP14_v2Parser.Identifier, CPP14_v2Parser.Integerliteral, CPP14_v2Parser.Decimalliteral, CPP14_v2Parser.Octalliteral, CPP14_v2Parser.Hexadecimalliteral, CPP14_v2Parser.Binaryliteral, CPP14_v2Parser.Integersuffix, CPP14_v2Parser.Characterliteral, CPP14_v2Parser.Floatingliteral, CPP14_v2Parser.Stringliteral, CPP14_v2Parser.Userdefinedintegerliteral, CPP14_v2Parser.Userdefinedfloatingliteral, CPP14_v2Parser.Userdefinedstringliteral, CPP14_v2Parser.Userdefinedcharacterliteral, CPP14_v2Parser.Whitespace, CPP14_v2Parser.Newline, CPP14_v2Parser.BlockComment, CPP14_v2Parser.LineComment]:
                localctx = CPP14_v2Parser.Balancedtoken4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1669 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1668
                        _la = self._input.LA(1)
                        if _la <= 0 or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (CPP14_v2Parser.LeftParen - 84)) | (1 << (CPP14_v2Parser.RightParen - 84)) | (1 << (CPP14_v2Parser.LeftBracket - 84)) | (1 << (CPP14_v2Parser.RightBracket - 84)) | (1 << (CPP14_v2Parser.LeftBrace - 84)) | (1 << (CPP14_v2Parser.RightBrace - 84)))) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1671 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitdeclaratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_initdeclaratorlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Initdeclaratorlist2Context(InitdeclaratorlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitdeclaratorlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitdeclaratorlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def initdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitdeclaratorlist2" ):
                listener.enterInitdeclaratorlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitdeclaratorlist2" ):
                listener.exitInitdeclaratorlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitdeclaratorlist2" ):
                return visitor.visitInitdeclaratorlist2(self)
            else:
                return visitor.visitChildren(self)


    class Initdeclaratorlist1Context(InitdeclaratorlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitdeclaratorlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def initdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitdeclaratorlist1" ):
                listener.enterInitdeclaratorlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitdeclaratorlist1" ):
                listener.exitInitdeclaratorlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitdeclaratorlist1" ):
                return visitor.visitInitdeclaratorlist1(self)
            else:
                return visitor.visitChildren(self)



    def initdeclaratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.InitdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 234
        self.enterRecursionRule(localctx, 234, self.RULE_initdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Initdeclaratorlist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1676
            self.initdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1683
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Initdeclaratorlist2Context(self, CPP14_v2Parser.InitdeclaratorlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initdeclaratorlist)
                    self.state = 1678
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1679
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 1680
                    self.initdeclarator() 
                self.state = 1685
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InitdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)


        def initializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_initdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitdeclarator" ):
                listener.enterInitdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitdeclarator" ):
                listener.exitInitdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitdeclarator" ):
                return visitor.visitInitdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def initdeclarator(self):

        localctx = CPP14_v2Parser.InitdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_initdeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1686
            self.declarator()
            self.state = 1688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1687
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_declarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Declarator2Context(DeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrdeclaratorContext,0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParametersandqualifiersContext,0)

        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TrailingreturntypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator2" ):
                listener.enterDeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator2" ):
                listener.exitDeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarator2" ):
                return visitor.visitDeclarator2(self)
            else:
                return visitor.visitChildren(self)


    class Declarator1Context(DeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtrdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator1" ):
                listener.enterDeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator1" ):
                listener.exitDeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarator1" ):
                return visitor.visitDeclarator1(self)
            else:
                return visitor.visitChildren(self)



    def declarator(self):

        localctx = CPP14_v2Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_declarator)
        try:
            self.state = 1695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Declarator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1690
                self.ptrdeclarator()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Declarator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1691
                self.noptrdeclarator(0)
                self.state = 1692
                self.parametersandqualifiers()
                self.state = 1693
                self.trailingreturntype()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_ptrdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Ptrdeclarator1Context(PtrdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PtrdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrdeclarator1" ):
                listener.enterPtrdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrdeclarator1" ):
                listener.exitPtrdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrdeclarator1" ):
                return visitor.visitPtrdeclarator1(self)
            else:
                return visitor.visitChildren(self)


    class Ptrdeclarator2Context(PtrdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PtrdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtroperatorContext,0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtrdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrdeclarator2" ):
                listener.enterPtrdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrdeclarator2" ):
                listener.exitPtrdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrdeclarator2" ):
                return visitor.visitPtrdeclarator2(self)
            else:
                return visitor.visitChildren(self)



    def ptrdeclarator(self):

        localctx = CPP14_v2Parser.PtrdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_ptrdeclarator)
        try:
            self.state = 1701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Ptrdeclarator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1697
                self.noptrdeclarator(0)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Ptrdeclarator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1698
                self.ptroperator()
                self.state = 1699
                self.ptrdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_noptrdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Noptrdeclarator1Context(NoptrdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaratorid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratoridContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrdeclarator1" ):
                listener.enterNoptrdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrdeclarator1" ):
                listener.exitNoptrdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrdeclarator1" ):
                return visitor.visitNoptrdeclarator1(self)
            else:
                return visitor.visitChildren(self)


    class Noptrdeclarator4Context(NoptrdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtrdeclaratorContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrdeclarator4" ):
                listener.enterNoptrdeclarator4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrdeclarator4" ):
                listener.exitNoptrdeclarator4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrdeclarator4" ):
                return visitor.visitNoptrdeclarator4(self)
            else:
                return visitor.visitChildren(self)


    class Noptrdeclarator2Context(NoptrdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrdeclaratorContext,0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParametersandqualifiersContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrdeclarator2" ):
                listener.enterNoptrdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrdeclarator2" ):
                listener.exitNoptrdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrdeclarator2" ):
                return visitor.visitNoptrdeclarator2(self)
            else:
                return visitor.visitChildren(self)


    class Noptrdeclarator3Context(NoptrdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrdeclaratorContext,0)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrdeclarator3" ):
                listener.enterNoptrdeclarator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrdeclarator3" ):
                listener.exitNoptrdeclarator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrdeclarator3" ):
                return visitor.visitNoptrdeclarator3(self)
            else:
                return visitor.visitChildren(self)



    def noptrdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.NoptrdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 242
        self.enterRecursionRule(localctx, 242, self.RULE_noptrdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1712
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Decltype, CPP14_v2Parser.Operator, CPP14_v2Parser.Tilde, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Ellipsis, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Noptrdeclarator1Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1704
                self.declaratorid()
                self.state = 1706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                if la_ == 1:
                    self.state = 1705
                    self.attributespecifierseq(0)


                pass
            elif token in [CPP14_v2Parser.LeftParen]:
                localctx = CPP14_v2Parser.Noptrdeclarator4Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1708
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1709
                self.ptrdeclarator()
                self.state = 1710
                self.match(CPP14_v2Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1727
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1725
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Noptrdeclarator2Context(self, CPP14_v2Parser.NoptrdeclaratorContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1714
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1715
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Noptrdeclarator3Context(self, CPP14_v2Parser.NoptrdeclaratorContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1716
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1717
                        self.match(CPP14_v2Parser.LeftBracket)
                        self.state = 1719
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                            self.state = 1718
                            self.constantexpression()


                        self.state = 1721
                        self.match(CPP14_v2Parser.RightBracket)
                        self.state = 1723
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                        if la_ == 1:
                            self.state = 1722
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1729
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParametersandqualifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParameterdeclarationclauseContext,0)


        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CvqualifierseqContext,0)


        def refqualifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.RefqualifierContext,0)


        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExceptionspecificationContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_parametersandqualifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParametersandqualifiers" ):
                listener.enterParametersandqualifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParametersandqualifiers" ):
                listener.exitParametersandqualifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParametersandqualifiers" ):
                return visitor.visitParametersandqualifiers(self)
            else:
                return visitor.visitChildren(self)




    def parametersandqualifiers(self):

        localctx = CPP14_v2Parser.ParametersandqualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_parametersandqualifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1730
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 1731
            self.parameterdeclarationclause()
            self.state = 1732
            self.match(CPP14_v2Parser.RightParen)
            self.state = 1734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.state = 1733
                self.cvqualifierseq()


            self.state = 1737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1736
                self.refqualifier()


            self.state = 1740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 1739
                self.exceptionspecification()


            self.state = 1743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1742
                self.attributespecifierseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingreturntypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Arrow(self):
            return self.getToken(CPP14_v2Parser.Arrow, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TrailingtypespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_trailingreturntype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingreturntype" ):
                listener.enterTrailingreturntype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingreturntype" ):
                listener.exitTrailingreturntype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingreturntype" ):
                return visitor.visitTrailingreturntype(self)
            else:
                return visitor.visitChildren(self)




    def trailingreturntype(self):

        localctx = CPP14_v2Parser.TrailingreturntypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_trailingreturntype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.match(CPP14_v2Parser.Arrow)
            self.state = 1746
            self.trailingtypespecifierseq()
            self.state = 1748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1747
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtroperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_ptroperator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Ptroperator1Context(PtroperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PtroperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Star(self):
            return self.getToken(CPP14_v2Parser.Star, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CvqualifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtroperator1" ):
                listener.enterPtroperator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtroperator1" ):
                listener.exitPtroperator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtroperator1" ):
                return visitor.visitPtroperator1(self)
            else:
                return visitor.visitChildren(self)


    class Ptroperator2Context(PtroperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PtroperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def And(self):
            return self.getToken(CPP14_v2Parser.And, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtroperator2" ):
                listener.enterPtroperator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtroperator2" ):
                listener.exitPtroperator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtroperator2" ):
                return visitor.visitPtroperator2(self)
            else:
                return visitor.visitChildren(self)


    class Ptroperator3Context(PtroperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PtroperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtroperator3" ):
                listener.enterPtroperator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtroperator3" ):
                listener.exitPtroperator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtroperator3" ):
                return visitor.visitPtroperator3(self)
            else:
                return visitor.visitChildren(self)


    class Ptroperato4Context(PtroperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PtroperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def Star(self):
            return self.getToken(CPP14_v2Parser.Star, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CvqualifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtroperato4" ):
                listener.enterPtroperato4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtroperato4" ):
                listener.exitPtroperato4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtroperato4" ):
                return visitor.visitPtroperato4(self)
            else:
                return visitor.visitChildren(self)



    def ptroperator(self):

        localctx = CPP14_v2Parser.PtroperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_ptroperator)
        try:
            self.state = 1773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Star]:
                localctx = CPP14_v2Parser.Ptroperator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1750
                self.match(CPP14_v2Parser.Star)
                self.state = 1752
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 1751
                    self.attributespecifierseq(0)


                self.state = 1755
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1754
                    self.cvqualifierseq()


                pass
            elif token in [CPP14_v2Parser.And]:
                localctx = CPP14_v2Parser.Ptroperator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1757
                self.match(CPP14_v2Parser.And)
                self.state = 1759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
                if la_ == 1:
                    self.state = 1758
                    self.attributespecifierseq(0)


                pass
            elif token in [CPP14_v2Parser.T__2]:
                localctx = CPP14_v2Parser.Ptroperator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1761
                self.match(CPP14_v2Parser.T__2)
                self.state = 1763
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1762
                    self.attributespecifierseq(0)


                pass
            elif token in [CPP14_v2Parser.Decltype, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Ptroperato4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1765
                self.nestednamespecifier(0)
                self.state = 1766
                self.match(CPP14_v2Parser.Star)
                self.state = 1768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1767
                    self.attributespecifierseq(0)


                self.state = 1771
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1770
                    self.cvqualifierseq()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CvqualifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CvqualifierContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CvqualifierseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_cvqualifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifierseq" ):
                listener.enterCvqualifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifierseq" ):
                listener.exitCvqualifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCvqualifierseq" ):
                return visitor.visitCvqualifierseq(self)
            else:
                return visitor.visitChildren(self)




    def cvqualifierseq(self):

        localctx = CPP14_v2Parser.CvqualifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_cvqualifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self.cvqualifier()
            self.state = 1777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1776
                self.cvqualifierseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CvqualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_cvqualifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Cvqualifier2Context(CvqualifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CvqualifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Volatile(self):
            return self.getToken(CPP14_v2Parser.Volatile, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifier2" ):
                listener.enterCvqualifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifier2" ):
                listener.exitCvqualifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCvqualifier2" ):
                return visitor.visitCvqualifier2(self)
            else:
                return visitor.visitChildren(self)


    class Cvqualifier1Context(CvqualifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CvqualifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Const(self):
            return self.getToken(CPP14_v2Parser.Const, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifier1" ):
                listener.enterCvqualifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifier1" ):
                listener.exitCvqualifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCvqualifier1" ):
                return visitor.visitCvqualifier1(self)
            else:
                return visitor.visitChildren(self)



    def cvqualifier(self):

        localctx = CPP14_v2Parser.CvqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_cvqualifier)
        try:
            self.state = 1781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Const]:
                localctx = CPP14_v2Parser.Cvqualifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1779
                self.match(CPP14_v2Parser.Const)
                pass
            elif token in [CPP14_v2Parser.Volatile]:
                localctx = CPP14_v2Parser.Cvqualifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1780
                self.match(CPP14_v2Parser.Volatile)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefqualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_refqualifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Refqualifier1Context(RefqualifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.RefqualifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def And(self):
            return self.getToken(CPP14_v2Parser.And, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefqualifier1" ):
                listener.enterRefqualifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefqualifier1" ):
                listener.exitRefqualifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefqualifier1" ):
                return visitor.visitRefqualifier1(self)
            else:
                return visitor.visitChildren(self)


    class Refqualifier2Context(RefqualifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.RefqualifierContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefqualifier2" ):
                listener.enterRefqualifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefqualifier2" ):
                listener.exitRefqualifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefqualifier2" ):
                return visitor.visitRefqualifier2(self)
            else:
                return visitor.visitChildren(self)



    def refqualifier(self):

        localctx = CPP14_v2Parser.RefqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_refqualifier)
        try:
            self.state = 1785
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.And]:
                localctx = CPP14_v2Parser.Refqualifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1783
                self.match(CPP14_v2Parser.And)
                pass
            elif token in [CPP14_v2Parser.T__2]:
                localctx = CPP14_v2Parser.Refqualifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1784
                self.match(CPP14_v2Parser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratoridContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.IdexpressionContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_declaratorid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaratorid" ):
                listener.enterDeclaratorid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaratorid" ):
                listener.exitDeclaratorid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaratorid" ):
                return visitor.visitDeclaratorid(self)
            else:
                return visitor.visitChildren(self)




    def declaratorid(self):

        localctx = CPP14_v2Parser.DeclaratoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_declaratorid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Ellipsis:
                self.state = 1787
                self.match(CPP14_v2Parser.Ellipsis)


            self.state = 1790
            self.idexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThetypeidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_thetypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypeid" ):
                listener.enterThetypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypeid" ):
                listener.exitThetypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThetypeid" ):
                return visitor.visitThetypeid(self)
            else:
                return visitor.visitChildren(self)




    def thetypeid(self):

        localctx = CPP14_v2Parser.ThetypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_thetypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1792
            self.typespecifierseq()
            self.state = 1794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.state = 1793
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_abstractdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Abstractdeclarator2Context(AbstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AbstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParametersandqualifiersContext,0)

        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TrailingreturntypeContext,0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrabstractdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractdeclarator2" ):
                listener.enterAbstractdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractdeclarator2" ):
                listener.exitAbstractdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractdeclarator2" ):
                return visitor.visitAbstractdeclarator2(self)
            else:
                return visitor.visitChildren(self)


    class Abstractdeclarator1Context(AbstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AbstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtrabstractdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractdeclarator1" ):
                listener.enterAbstractdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractdeclarator1" ):
                listener.exitAbstractdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractdeclarator1" ):
                return visitor.visitAbstractdeclarator1(self)
            else:
                return visitor.visitChildren(self)


    class Abstractdeclarator3Context(AbstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AbstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AbstractpackdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractdeclarator3" ):
                listener.enterAbstractdeclarator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractdeclarator3" ):
                listener.exitAbstractdeclarator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractdeclarator3" ):
                return visitor.visitAbstractdeclarator3(self)
            else:
                return visitor.visitChildren(self)



    def abstractdeclarator(self):

        localctx = CPP14_v2Parser.AbstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_abstractdeclarator)
        try:
            self.state = 1804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Abstractdeclarator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1796
                self.ptrabstractdeclarator()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Abstractdeclarator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1798
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1797
                    self.noptrabstractdeclarator(0)


                self.state = 1800
                self.parametersandqualifiers()
                self.state = 1801
                self.trailingreturntype()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Abstractdeclarator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1803
                self.abstractpackdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_ptrabstractdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Ptrabstractdeclarator2Context(PtrabstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PtrabstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtroperatorContext,0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtrabstractdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrabstractdeclarator2" ):
                listener.enterPtrabstractdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrabstractdeclarator2" ):
                listener.exitPtrabstractdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrabstractdeclarator2" ):
                return visitor.visitPtrabstractdeclarator2(self)
            else:
                return visitor.visitChildren(self)


    class Ptrabstractdeclarator1Context(PtrabstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PtrabstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrabstractdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrabstractdeclarator1" ):
                listener.enterPtrabstractdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrabstractdeclarator1" ):
                listener.exitPtrabstractdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrabstractdeclarator1" ):
                return visitor.visitPtrabstractdeclarator1(self)
            else:
                return visitor.visitChildren(self)



    def ptrabstractdeclarator(self):

        localctx = CPP14_v2Parser.PtrabstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_ptrabstractdeclarator)
        try:
            self.state = 1811
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.LeftParen, CPP14_v2Parser.LeftBracket]:
                localctx = CPP14_v2Parser.Ptrabstractdeclarator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1806
                self.noptrabstractdeclarator(0)
                pass
            elif token in [CPP14_v2Parser.T__2, CPP14_v2Parser.Decltype, CPP14_v2Parser.Star, CPP14_v2Parser.And, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Ptrabstractdeclarator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1807
                self.ptroperator()
                self.state = 1809
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1808
                    self.ptrabstractdeclarator()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_noptrabstractdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Noptrabstractdeclarator4Context(NoptrabstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrabstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractdeclarator4" ):
                listener.enterNoptrabstractdeclarator4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractdeclarator4" ):
                listener.exitNoptrabstractdeclarator4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractdeclarator4" ):
                return visitor.visitNoptrabstractdeclarator4(self)
            else:
                return visitor.visitChildren(self)


    class Noptrabstractdeclarator5Context(NoptrabstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrabstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtrabstractdeclaratorContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractdeclarator5" ):
                listener.enterNoptrabstractdeclarator5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractdeclarator5" ):
                listener.exitNoptrabstractdeclarator5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractdeclarator5" ):
                return visitor.visitNoptrabstractdeclarator5(self)
            else:
                return visitor.visitChildren(self)


    class Noptrabstractdeclarator2Context(NoptrabstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrabstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParametersandqualifiersContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractdeclarator2" ):
                listener.enterNoptrabstractdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractdeclarator2" ):
                listener.exitNoptrabstractdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractdeclarator2" ):
                return visitor.visitNoptrabstractdeclarator2(self)
            else:
                return visitor.visitChildren(self)


    class Noptrabstractdeclarator3Context(NoptrabstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrabstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrabstractdeclaratorContext,0)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractdeclarator3" ):
                listener.enterNoptrabstractdeclarator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractdeclarator3" ):
                listener.exitNoptrabstractdeclarator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractdeclarator3" ):
                return visitor.visitNoptrabstractdeclarator3(self)
            else:
                return visitor.visitChildren(self)


    class Noptrabstractdeclarator1Context(NoptrabstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrabstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrabstractdeclaratorContext,0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParametersandqualifiersContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractdeclarator1" ):
                listener.enterNoptrabstractdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractdeclarator1" ):
                listener.exitNoptrabstractdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractdeclarator1" ):
                return visitor.visitNoptrabstractdeclarator1(self)
            else:
                return visitor.visitChildren(self)



    def noptrabstractdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.NoptrabstractdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 264
        self.enterRecursionRule(localctx, 264, self.RULE_noptrabstractdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Noptrabstractdeclarator2Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1814
                self.parametersandqualifiers()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Noptrabstractdeclarator4Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1815
                self.match(CPP14_v2Parser.LeftBracket)
                self.state = 1817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 1816
                    self.constantexpression()


                self.state = 1819
                self.match(CPP14_v2Parser.RightBracket)
                self.state = 1821
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1820
                    self.attributespecifierseq(0)


                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Noptrabstractdeclarator5Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1823
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1824
                self.ptrabstractdeclarator()
                self.state = 1825
                self.match(CPP14_v2Parser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1842
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1840
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Noptrabstractdeclarator1Context(self, CPP14_v2Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1829
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1830
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Noptrabstractdeclarator3Context(self, CPP14_v2Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1831
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1832
                        self.match(CPP14_v2Parser.LeftBracket)
                        self.state = 1834
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                            self.state = 1833
                            self.constantexpression()


                        self.state = 1836
                        self.match(CPP14_v2Parser.RightBracket)
                        self.state = 1838
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                        if la_ == 1:
                            self.state = 1837
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1844
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AbstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_abstractpackdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Abstractpackdeclarator2Context(AbstractpackdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AbstractpackdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtroperatorContext,0)

        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AbstractpackdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractpackdeclarator2" ):
                listener.enterAbstractpackdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractpackdeclarator2" ):
                listener.exitAbstractpackdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractpackdeclarator2" ):
                return visitor.visitAbstractpackdeclarator2(self)
            else:
                return visitor.visitChildren(self)


    class Abstractpackdeclarator1Context(AbstractpackdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AbstractpackdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrabstractpackdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractpackdeclarator1" ):
                listener.enterAbstractpackdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractpackdeclarator1" ):
                listener.exitAbstractpackdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractpackdeclarator1" ):
                return visitor.visitAbstractpackdeclarator1(self)
            else:
                return visitor.visitChildren(self)



    def abstractpackdeclarator(self):

        localctx = CPP14_v2Parser.AbstractpackdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_abstractpackdeclarator)
        try:
            self.state = 1849
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Ellipsis]:
                localctx = CPP14_v2Parser.Abstractpackdeclarator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1845
                self.noptrabstractpackdeclarator(0)
                pass
            elif token in [CPP14_v2Parser.T__2, CPP14_v2Parser.Decltype, CPP14_v2Parser.Star, CPP14_v2Parser.And, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Abstractpackdeclarator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1846
                self.ptroperator()
                self.state = 1847
                self.abstractpackdeclarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrabstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_noptrabstractpackdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Noptrabstractpackdeclarator3Context(NoptrabstractpackdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrabstractpackdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractpackdeclarator3" ):
                listener.enterNoptrabstractpackdeclarator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractpackdeclarator3" ):
                listener.exitNoptrabstractpackdeclarator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractpackdeclarator3" ):
                return visitor.visitNoptrabstractpackdeclarator3(self)
            else:
                return visitor.visitChildren(self)


    class Noptrabstractpackdeclarator1Context(NoptrabstractpackdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrabstractpackdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrabstractpackdeclaratorContext,0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParametersandqualifiersContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractpackdeclarator1" ):
                listener.enterNoptrabstractpackdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractpackdeclarator1" ):
                listener.exitNoptrabstractpackdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractpackdeclarator1" ):
                return visitor.visitNoptrabstractpackdeclarator1(self)
            else:
                return visitor.visitChildren(self)


    class Noptrabstractpackdeclarator2Context(NoptrabstractpackdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrabstractpackdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrabstractpackdeclaratorContext,0)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractpackdeclarator2" ):
                listener.enterNoptrabstractpackdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractpackdeclarator2" ):
                listener.exitNoptrabstractpackdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractpackdeclarator2" ):
                return visitor.visitNoptrabstractpackdeclarator2(self)
            else:
                return visitor.visitChildren(self)



    def noptrabstractpackdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.NoptrabstractpackdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 268
        self.enterRecursionRule(localctx, 268, self.RULE_noptrabstractpackdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Noptrabstractpackdeclarator3Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1852
            self.match(CPP14_v2Parser.Ellipsis)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1867
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,217,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1865
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Noptrabstractpackdeclarator1Context(self, CPP14_v2Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1854
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1855
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Noptrabstractpackdeclarator2Context(self, CPP14_v2Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1856
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1857
                        self.match(CPP14_v2Parser.LeftBracket)
                        self.state = 1859
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                            self.state = 1858
                            self.constantexpression()


                        self.state = 1861
                        self.match(CPP14_v2Parser.RightBracket)
                        self.state = 1863
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                        if la_ == 1:
                            self.state = 1862
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,217,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterdeclarationclauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_parameterdeclarationclause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Parameterdeclarationclause2Context(ParameterdeclarationclauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ParameterdeclarationclauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParameterdeclarationlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationclause2" ):
                listener.enterParameterdeclarationclause2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationclause2" ):
                listener.exitParameterdeclarationclause2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclarationclause2" ):
                return visitor.visitParameterdeclarationclause2(self)
            else:
                return visitor.visitChildren(self)


    class Parameterdeclarationclause1Context(ParameterdeclarationclauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ParameterdeclarationclauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParameterdeclarationlistContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationclause1" ):
                listener.enterParameterdeclarationclause1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationclause1" ):
                listener.exitParameterdeclarationclause1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclarationclause1" ):
                return visitor.visitParameterdeclarationclause1(self)
            else:
                return visitor.visitChildren(self)



    def parameterdeclarationclause(self):

        localctx = CPP14_v2Parser.ParameterdeclarationclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_parameterdeclarationclause)
        self._la = 0 # Token type
        try:
            self.state = 1880
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Parameterdeclarationclause1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & ((1 << (CPP14_v2Parser.Alignas - 9)) | (1 << (CPP14_v2Parser.Auto - 9)) | (1 << (CPP14_v2Parser.Bool - 9)) | (1 << (CPP14_v2Parser.Char - 9)) | (1 << (CPP14_v2Parser.Char16 - 9)) | (1 << (CPP14_v2Parser.Char32 - 9)) | (1 << (CPP14_v2Parser.Class - 9)) | (1 << (CPP14_v2Parser.Const - 9)) | (1 << (CPP14_v2Parser.Constexpr - 9)) | (1 << (CPP14_v2Parser.Decltype - 9)) | (1 << (CPP14_v2Parser.Double - 9)) | (1 << (CPP14_v2Parser.Enum - 9)) | (1 << (CPP14_v2Parser.Explicit - 9)) | (1 << (CPP14_v2Parser.Extern - 9)) | (1 << (CPP14_v2Parser.Float - 9)) | (1 << (CPP14_v2Parser.Friend - 9)) | (1 << (CPP14_v2Parser.Inline - 9)) | (1 << (CPP14_v2Parser.Int - 9)) | (1 << (CPP14_v2Parser.Long - 9)) | (1 << (CPP14_v2Parser.Mutable - 9)) | (1 << (CPP14_v2Parser.Register - 9)) | (1 << (CPP14_v2Parser.Short - 9)) | (1 << (CPP14_v2Parser.Signed - 9)) | (1 << (CPP14_v2Parser.Static - 9)) | (1 << (CPP14_v2Parser.Struct - 9)) | (1 << (CPP14_v2Parser.Thread_local - 9)))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CPP14_v2Parser.Typedef - 73)) | (1 << (CPP14_v2Parser.Typename_ - 73)) | (1 << (CPP14_v2Parser.Union - 73)) | (1 << (CPP14_v2Parser.Unsigned - 73)) | (1 << (CPP14_v2Parser.Virtual - 73)) | (1 << (CPP14_v2Parser.Void - 73)) | (1 << (CPP14_v2Parser.Volatile - 73)) | (1 << (CPP14_v2Parser.Wchar - 73)) | (1 << (CPP14_v2Parser.LeftBracket - 73)) | (1 << (CPP14_v2Parser.Doublecolon - 73)) | (1 << (CPP14_v2Parser.Identifier - 73)))) != 0):
                    self.state = 1870
                    self.parameterdeclarationlist(0)


                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Ellipsis:
                    self.state = 1873
                    self.match(CPP14_v2Parser.Ellipsis)


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Parameterdeclarationclause2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1876
                self.parameterdeclarationlist(0)
                self.state = 1877
                self.match(CPP14_v2Parser.Comma)
                self.state = 1878
                self.match(CPP14_v2Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterdeclarationlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_parameterdeclarationlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Parameterdeclarationlist1Context(ParameterdeclarationlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ParameterdeclarationlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParameterdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationlist1" ):
                listener.enterParameterdeclarationlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationlist1" ):
                listener.exitParameterdeclarationlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclarationlist1" ):
                return visitor.visitParameterdeclarationlist1(self)
            else:
                return visitor.visitChildren(self)


    class Parameterdeclarationlist2Context(ParameterdeclarationlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ParameterdeclarationlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParameterdeclarationlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParameterdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationlist2" ):
                listener.enterParameterdeclarationlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationlist2" ):
                listener.exitParameterdeclarationlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclarationlist2" ):
                return visitor.visitParameterdeclarationlist2(self)
            else:
                return visitor.visitChildren(self)



    def parameterdeclarationlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.ParameterdeclarationlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 272
        self.enterRecursionRule(localctx, 272, self.RULE_parameterdeclarationlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Parameterdeclarationlist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1883
            self.parameterdeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1890
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Parameterdeclarationlist2Context(self, CPP14_v2Parser.ParameterdeclarationlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_parameterdeclarationlist)
                    self.state = 1885
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1886
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 1887
                    self.parameterdeclaration() 
                self.state = 1892
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_parameterdeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Parameterdeclaration1Context(ParameterdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ParameterdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclaration1" ):
                listener.enterParameterdeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclaration1" ):
                listener.exitParameterdeclaration1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclaration1" ):
                return visitor.visitParameterdeclaration1(self)
            else:
                return visitor.visitChildren(self)


    class Parameterdeclaration2Context(ParameterdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ParameterdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def initializerclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerclauseContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclaration2" ):
                listener.enterParameterdeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclaration2" ):
                listener.exitParameterdeclaration2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclaration2" ):
                return visitor.visitParameterdeclaration2(self)
            else:
                return visitor.visitChildren(self)


    class Parameterdeclaration3Context(ParameterdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ParameterdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AbstractdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclaration3" ):
                listener.enterParameterdeclaration3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclaration3" ):
                listener.exitParameterdeclaration3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclaration3" ):
                return visitor.visitParameterdeclaration3(self)
            else:
                return visitor.visitChildren(self)


    class Parameterdeclaration4Context(ParameterdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ParameterdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def initializerclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerclauseContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AbstractdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclaration4" ):
                listener.enterParameterdeclaration4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclaration4" ):
                listener.exitParameterdeclaration4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclaration4" ):
                return visitor.visitParameterdeclaration4(self)
            else:
                return visitor.visitChildren(self)



    def parameterdeclaration(self):

        localctx = CPP14_v2Parser.ParameterdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_parameterdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Parameterdeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1893
                    self.attributespecifierseq(0)


                self.state = 1896
                self.declspecifierseq()
                self.state = 1897
                self.declarator()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Parameterdeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1899
                    self.attributespecifierseq(0)


                self.state = 1902
                self.declspecifierseq()
                self.state = 1903
                self.declarator()
                self.state = 1904
                self.match(CPP14_v2Parser.Assign)
                self.state = 1905
                self.initializerclause()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Parameterdeclaration3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1907
                    self.attributespecifierseq(0)


                self.state = 1910
                self.declspecifierseq()
                self.state = 1912
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 1911
                    self.abstractdeclarator()


                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Parameterdeclaration4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1914
                    self.attributespecifierseq(0)


                self.state = 1917
                self.declspecifierseq()
                self.state = 1919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.T__2 or _la==CPP14_v2Parser.Decltype or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (CPP14_v2Parser.LeftParen - 84)) | (1 << (CPP14_v2Parser.LeftBracket - 84)) | (1 << (CPP14_v2Parser.Star - 84)) | (1 << (CPP14_v2Parser.And - 84)) | (1 << (CPP14_v2Parser.Doublecolon - 84)) | (1 << (CPP14_v2Parser.Ellipsis - 84)) | (1 << (CPP14_v2Parser.Identifier - 84)))) != 0):
                    self.state = 1918
                    self.abstractdeclarator()


                self.state = 1921
                self.match(CPP14_v2Parser.Assign)
                self.state = 1922
                self.initializerclause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiondefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)


        def functionbody(self):
            return self.getTypedRuleContext(CPP14_v2Parser.FunctionbodyContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)


        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.VirtspecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_functiondefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiondefinition" ):
                listener.enterFunctiondefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiondefinition" ):
                listener.exitFunctiondefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiondefinition" ):
                return visitor.visitFunctiondefinition(self)
            else:
                return visitor.visitChildren(self)




    def functiondefinition(self):

        localctx = CPP14_v2Parser.FunctiondefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_functiondefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                self.state = 1926
                self.attributespecifierseq(0)


            self.state = 1930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 1929
                self.declspecifierseq()


            self.state = 1932
            self.declarator()
            self.state = 1934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Final or _la==CPP14_v2Parser.Override:
                self.state = 1933
                self.virtspecifierseq(0)


            self.state = 1936
            self.functionbody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionbodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_functionbody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Functionbody1Context(FunctionbodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.FunctionbodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CompoundstatementContext,0)

        def ctorinitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CtorinitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionbody1" ):
                listener.enterFunctionbody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionbody1" ):
                listener.exitFunctionbody1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionbody1" ):
                return visitor.visitFunctionbody1(self)
            else:
                return visitor.visitChildren(self)


    class Functionbody2Context(FunctionbodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.FunctionbodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functiontryblock(self):
            return self.getTypedRuleContext(CPP14_v2Parser.FunctiontryblockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionbody2" ):
                listener.enterFunctionbody2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionbody2" ):
                listener.exitFunctionbody2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionbody2" ):
                return visitor.visitFunctionbody2(self)
            else:
                return visitor.visitChildren(self)


    class Functionbody3Context(FunctionbodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.FunctionbodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def Default(self):
            return self.getToken(CPP14_v2Parser.Default, 0)
        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionbody3" ):
                listener.enterFunctionbody3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionbody3" ):
                listener.exitFunctionbody3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionbody3" ):
                return visitor.visitFunctionbody3(self)
            else:
                return visitor.visitChildren(self)


    class Functionbody4Context(FunctionbodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.FunctionbodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def Delete(self):
            return self.getToken(CPP14_v2Parser.Delete, 0)
        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionbody4" ):
                listener.enterFunctionbody4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionbody4" ):
                listener.exitFunctionbody4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionbody4" ):
                return visitor.visitFunctionbody4(self)
            else:
                return visitor.visitChildren(self)



    def functionbody(self):

        localctx = CPP14_v2Parser.FunctionbodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_functionbody)
        self._la = 0 # Token type
        try:
            self.state = 1949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Functionbody1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Colon:
                    self.state = 1938
                    self.ctorinitializer()


                self.state = 1941
                self.compoundstatement()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Functionbody2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1942
                self.functiontryblock()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Functionbody3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1943
                self.match(CPP14_v2Parser.Assign)
                self.state = 1944
                self.match(CPP14_v2Parser.Default)
                self.state = 1945
                self.match(CPP14_v2Parser.Semi)
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Functionbody4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1946
                self.match(CPP14_v2Parser.Assign)
                self.state = 1947
                self.match(CPP14_v2Parser.Delete)
                self.state = 1948
                self.match(CPP14_v2Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_initializer

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Initializer2Context(InitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expressionlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionlistContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer2" ):
                listener.enterInitializer2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer2" ):
                listener.exitInitializer2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer2" ):
                return visitor.visitInitializer2(self)
            else:
                return visitor.visitChildren(self)


    class Initializer1Context(InitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BraceorequalinitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer1" ):
                listener.enterInitializer1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer1" ):
                listener.exitInitializer1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer1" ):
                return visitor.visitInitializer1(self)
            else:
                return visitor.visitChildren(self)



    def initializer(self):

        localctx = CPP14_v2Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_initializer)
        try:
            self.state = 1956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.LeftBrace, CPP14_v2Parser.Assign]:
                localctx = CPP14_v2Parser.Initializer1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1951
                self.braceorequalinitializer()
                pass
            elif token in [CPP14_v2Parser.LeftParen]:
                localctx = CPP14_v2Parser.Initializer2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1952
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1953
                self.expressionlist()
                self.state = 1954
                self.match(CPP14_v2Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BraceorequalinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_braceorequalinitializer

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Braceorequalinitializer1Context(BraceorequalinitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BraceorequalinitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def initializerclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerclauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraceorequalinitializer1" ):
                listener.enterBraceorequalinitializer1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraceorequalinitializer1" ):
                listener.exitBraceorequalinitializer1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBraceorequalinitializer1" ):
                return visitor.visitBraceorequalinitializer1(self)
            else:
                return visitor.visitChildren(self)


    class Braceorequalinitializer2Context(BraceorequalinitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BraceorequalinitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraceorequalinitializer2" ):
                listener.enterBraceorequalinitializer2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraceorequalinitializer2" ):
                listener.exitBraceorequalinitializer2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBraceorequalinitializer2" ):
                return visitor.visitBraceorequalinitializer2(self)
            else:
                return visitor.visitChildren(self)



    def braceorequalinitializer(self):

        localctx = CPP14_v2Parser.BraceorequalinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_braceorequalinitializer)
        try:
            self.state = 1961
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Assign]:
                localctx = CPP14_v2Parser.Braceorequalinitializer1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1958
                self.match(CPP14_v2Parser.Assign)
                self.state = 1959
                self.initializerclause()
                pass
            elif token in [CPP14_v2Parser.LeftBrace]:
                localctx = CPP14_v2Parser.Braceorequalinitializer2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1960
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerclauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_initializerclause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Initializerclause2Context(InitializerclauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitializerclauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerclause2" ):
                listener.enterInitializerclause2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerclause2" ):
                listener.exitInitializerclause2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerclause2" ):
                return visitor.visitInitializerclause2(self)
            else:
                return visitor.visitChildren(self)


    class Initializerclause1Context(InitializerclauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitializerclauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AssignmentexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerclause1" ):
                listener.enterInitializerclause1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerclause1" ):
                listener.exitInitializerclause1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerclause1" ):
                return visitor.visitInitializerclause1(self)
            else:
                return visitor.visitChildren(self)



    def initializerclause(self):

        localctx = CPP14_v2Parser.InitializerclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_initializerclause)
        try:
            self.state = 1965
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.T__0, CPP14_v2Parser.T__1, CPP14_v2Parser.Alignof, CPP14_v2Parser.Auto, CPP14_v2Parser.Bool, CPP14_v2Parser.Char, CPP14_v2Parser.Char16, CPP14_v2Parser.Char32, CPP14_v2Parser.Const_cast, CPP14_v2Parser.Decltype, CPP14_v2Parser.Delete, CPP14_v2Parser.Double, CPP14_v2Parser.Dynamic_cast, CPP14_v2Parser.False1, CPP14_v2Parser.Float, CPP14_v2Parser.Int, CPP14_v2Parser.Long, CPP14_v2Parser.New, CPP14_v2Parser.Noexcept, CPP14_v2Parser.Nullptr, CPP14_v2Parser.Operator, CPP14_v2Parser.Reinterpret_cast, CPP14_v2Parser.Short, CPP14_v2Parser.Signed, CPP14_v2Parser.Sizeof, CPP14_v2Parser.Static_cast, CPP14_v2Parser.This, CPP14_v2Parser.Throw, CPP14_v2Parser.True1, CPP14_v2Parser.Typeid_, CPP14_v2Parser.Typename_, CPP14_v2Parser.Unsigned, CPP14_v2Parser.Void, CPP14_v2Parser.Wchar, CPP14_v2Parser.LeftParen, CPP14_v2Parser.LeftBracket, CPP14_v2Parser.Plus, CPP14_v2Parser.Minus, CPP14_v2Parser.Star, CPP14_v2Parser.And, CPP14_v2Parser.Or, CPP14_v2Parser.Tilde, CPP14_v2Parser.PlusPlus, CPP14_v2Parser.MinusMinus, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier, CPP14_v2Parser.Integerliteral, CPP14_v2Parser.Characterliteral, CPP14_v2Parser.Floatingliteral, CPP14_v2Parser.Stringliteral, CPP14_v2Parser.Userdefinedintegerliteral, CPP14_v2Parser.Userdefinedfloatingliteral, CPP14_v2Parser.Userdefinedstringliteral, CPP14_v2Parser.Userdefinedcharacterliteral]:
                localctx = CPP14_v2Parser.Initializerclause1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1963
                self.assignmentexpression()
                pass
            elif token in [CPP14_v2Parser.LeftBrace]:
                localctx = CPP14_v2Parser.Initializerclause2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1964
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_initializerlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Initializerlist1Context(InitializerlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitializerlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerclauseContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerlist1" ):
                listener.enterInitializerlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerlist1" ):
                listener.exitInitializerlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerlist1" ):
                return visitor.visitInitializerlist1(self)
            else:
                return visitor.visitChildren(self)


    class Initializerlist2Context(InitializerlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitializerlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def initializerclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerclauseContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerlist2" ):
                listener.enterInitializerlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerlist2" ):
                listener.exitInitializerlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerlist2" ):
                return visitor.visitInitializerlist2(self)
            else:
                return visitor.visitChildren(self)



    def initializerlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.InitializerlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 286
        self.enterRecursionRule(localctx, 286, self.RULE_initializerlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Initializerlist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1968
            self.initializerclause()
            self.state = 1970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.state = 1969
                self.match(CPP14_v2Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 1980
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,239,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Initializerlist2Context(self, CPP14_v2Parser.InitializerlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initializerlist)
                    self.state = 1972
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1973
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 1974
                    self.initializerclause()
                    self.state = 1976
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                    if la_ == 1:
                        self.state = 1975
                        self.match(CPP14_v2Parser.Ellipsis)

             
                self.state = 1982
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,239,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BracedinitlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_bracedinitlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Bracedinitlist1Context(BracedinitlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BracedinitlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)
        def initializerlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerlistContext,0)

        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)
        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracedinitlist1" ):
                listener.enterBracedinitlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracedinitlist1" ):
                listener.exitBracedinitlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracedinitlist1" ):
                return visitor.visitBracedinitlist1(self)
            else:
                return visitor.visitChildren(self)


    class Bracedinitlist2Context(BracedinitlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BracedinitlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)
        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracedinitlist2" ):
                listener.enterBracedinitlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracedinitlist2" ):
                listener.exitBracedinitlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracedinitlist2" ):
                return visitor.visitBracedinitlist2(self)
            else:
                return visitor.visitChildren(self)



    def bracedinitlist(self):

        localctx = CPP14_v2Parser.BracedinitlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_bracedinitlist)
        self._la = 0 # Token type
        try:
            self.state = 1992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Bracedinitlist1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1983
                self.match(CPP14_v2Parser.LeftBrace)
                self.state = 1984
                self.initializerlist(0)
                self.state = 1986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Comma:
                    self.state = 1985
                    self.match(CPP14_v2Parser.Comma)


                self.state = 1988
                self.match(CPP14_v2Parser.RightBrace)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Bracedinitlist2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1990
                self.match(CPP14_v2Parser.LeftBrace)
                self.state = 1991
                self.match(CPP14_v2Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassnameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_classname

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Classname2Context(ClassnameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClassnameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassname2" ):
                listener.enterClassname2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassname2" ):
                listener.exitClassname2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassname2" ):
                return visitor.visitClassname2(self)
            else:
                return visitor.visitChildren(self)


    class Classname1Context(ClassnameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClassnameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassname1" ):
                listener.enterClassname1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassname1" ):
                listener.exitClassname1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassname1" ):
                return visitor.visitClassname1(self)
            else:
                return visitor.visitChildren(self)



    def classname(self):

        localctx = CPP14_v2Parser.ClassnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_classname)
        try:
            self.state = 1996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Classname1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1994
                self.match(CPP14_v2Parser.Identifier)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Classname2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1995
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classhead(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassheadContext,0)


        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)

        def memberspecification(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MemberspecificationContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_classspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassspecifier" ):
                listener.enterClassspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassspecifier" ):
                listener.exitClassspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassspecifier" ):
                return visitor.visitClassspecifier(self)
            else:
                return visitor.visitChildren(self)




    def classspecifier(self):

        localctx = CPP14_v2Parser.ClassspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_classspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1998
            self.classhead()
            self.state = 1999
            self.match(CPP14_v2Parser.LeftBrace)
            self.state = 2001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Constexpr) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.Explicit) | (1 << CPP14_v2Parser.Extern) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Friend) | (1 << CPP14_v2Parser.Inline) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.Mutable) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Private) | (1 << CPP14_v2Parser.Protected) | (1 << CPP14_v2Parser.Public) | (1 << CPP14_v2Parser.Register) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Static) | (1 << CPP14_v2Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14_v2Parser.Struct - 65)) | (1 << (CPP14_v2Parser.Template - 65)) | (1 << (CPP14_v2Parser.Thread_local - 65)) | (1 << (CPP14_v2Parser.Typedef - 65)) | (1 << (CPP14_v2Parser.Typename_ - 65)) | (1 << (CPP14_v2Parser.Union - 65)) | (1 << (CPP14_v2Parser.Unsigned - 65)) | (1 << (CPP14_v2Parser.Using - 65)) | (1 << (CPP14_v2Parser.Virtual - 65)) | (1 << (CPP14_v2Parser.Void - 65)) | (1 << (CPP14_v2Parser.Volatile - 65)) | (1 << (CPP14_v2Parser.Wchar - 65)) | (1 << (CPP14_v2Parser.LeftParen - 65)) | (1 << (CPP14_v2Parser.LeftBracket - 65)) | (1 << (CPP14_v2Parser.Star - 65)) | (1 << (CPP14_v2Parser.And - 65)) | (1 << (CPP14_v2Parser.Tilde - 65)) | (1 << (CPP14_v2Parser.Colon - 65)) | (1 << (CPP14_v2Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14_v2Parser.Semi - 129)) | (1 << (CPP14_v2Parser.Ellipsis - 129)) | (1 << (CPP14_v2Parser.Identifier - 129)))) != 0):
                self.state = 2000
                self.memberspecification()


            self.state = 2003
            self.match(CPP14_v2Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassheadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_classhead

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Classhead2Context(ClassheadContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClassheadContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classkey(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClasskeyContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def baseclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BaseclauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasshead2" ):
                listener.enterClasshead2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasshead2" ):
                listener.exitClasshead2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClasshead2" ):
                return visitor.visitClasshead2(self)
            else:
                return visitor.visitChildren(self)


    class Classhead1Context(ClassheadContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClassheadContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classkey(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClasskeyContext,0)

        def classheadname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassheadnameContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def classvirtspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassvirtspecifierContext,0)

        def baseclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BaseclauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasshead1" ):
                listener.enterClasshead1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasshead1" ):
                listener.exitClasshead1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClasshead1" ):
                return visitor.visitClasshead1(self)
            else:
                return visitor.visitChildren(self)



    def classhead(self):

        localctx = CPP14_v2Parser.ClassheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_classhead)
        self._la = 0 # Token type
        try:
            self.state = 2023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Classhead1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2005
                self.classkey()
                self.state = 2007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 2006
                    self.attributespecifierseq(0)


                self.state = 2009
                self.classheadname()
                self.state = 2011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Final:
                    self.state = 2010
                    self.classvirtspecifier()


                self.state = 2014
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Colon:
                    self.state = 2013
                    self.baseclause()


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Classhead2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2016
                self.classkey()
                self.state = 2018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 2017
                    self.attributespecifierseq(0)


                self.state = 2021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Colon:
                    self.state = 2020
                    self.baseclause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassheadnameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassnameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_classheadname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassheadname" ):
                listener.enterClassheadname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassheadname" ):
                listener.exitClassheadname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassheadname" ):
                return visitor.visitClassheadname(self)
            else:
                return visitor.visitChildren(self)




    def classheadname(self):

        localctx = CPP14_v2Parser.ClassheadnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_classheadname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.state = 2025
                self.nestednamespecifier(0)


            self.state = 2028
            self.classname()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassvirtspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(CPP14_v2Parser.Final, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_classvirtspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassvirtspecifier" ):
                listener.enterClassvirtspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassvirtspecifier" ):
                listener.exitClassvirtspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassvirtspecifier" ):
                return visitor.visitClassvirtspecifier(self)
            else:
                return visitor.visitChildren(self)




    def classvirtspecifier(self):

        localctx = CPP14_v2Parser.ClassvirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_classvirtspecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2030
            self.match(CPP14_v2Parser.Final)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClasskeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_classkey

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Classkey3Context(ClasskeyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClasskeyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Union(self):
            return self.getToken(CPP14_v2Parser.Union, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasskey3" ):
                listener.enterClasskey3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasskey3" ):
                listener.exitClasskey3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClasskey3" ):
                return visitor.visitClasskey3(self)
            else:
                return visitor.visitChildren(self)


    class Classkey1Context(ClasskeyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClasskeyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Class(self):
            return self.getToken(CPP14_v2Parser.Class, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasskey1" ):
                listener.enterClasskey1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasskey1" ):
                listener.exitClasskey1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClasskey1" ):
                return visitor.visitClasskey1(self)
            else:
                return visitor.visitChildren(self)


    class Classkey2Context(ClasskeyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClasskeyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Struct(self):
            return self.getToken(CPP14_v2Parser.Struct, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasskey2" ):
                listener.enterClasskey2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasskey2" ):
                listener.exitClasskey2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClasskey2" ):
                return visitor.visitClasskey2(self)
            else:
                return visitor.visitChildren(self)



    def classkey(self):

        localctx = CPP14_v2Parser.ClasskeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_classkey)
        try:
            self.state = 2035
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Class]:
                localctx = CPP14_v2Parser.Classkey1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2032
                self.match(CPP14_v2Parser.Class)
                pass
            elif token in [CPP14_v2Parser.Struct]:
                localctx = CPP14_v2Parser.Classkey2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2033
                self.match(CPP14_v2Parser.Struct)
                pass
            elif token in [CPP14_v2Parser.Union]:
                localctx = CPP14_v2Parser.Classkey3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2034
                self.match(CPP14_v2Parser.Union)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_memberspecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Memberspecification1Context(MemberspecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberspecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def memberdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MemberdeclarationContext,0)

        def memberspecification(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MemberspecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberspecification1" ):
                listener.enterMemberspecification1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberspecification1" ):
                listener.exitMemberspecification1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberspecification1" ):
                return visitor.visitMemberspecification1(self)
            else:
                return visitor.visitChildren(self)


    class Memberspecification2Context(MemberspecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberspecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AccessspecifierContext,0)

        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)
        def memberspecification(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MemberspecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberspecification2" ):
                listener.enterMemberspecification2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberspecification2" ):
                listener.exitMemberspecification2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberspecification2" ):
                return visitor.visitMemberspecification2(self)
            else:
                return visitor.visitChildren(self)



    def memberspecification(self):

        localctx = CPP14_v2Parser.MemberspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_memberspecification)
        self._la = 0 # Token type
        try:
            self.state = 2046
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.T__2, CPP14_v2Parser.Alignas, CPP14_v2Parser.Auto, CPP14_v2Parser.Bool, CPP14_v2Parser.Char, CPP14_v2Parser.Char16, CPP14_v2Parser.Char32, CPP14_v2Parser.Class, CPP14_v2Parser.Const, CPP14_v2Parser.Constexpr, CPP14_v2Parser.Decltype, CPP14_v2Parser.Double, CPP14_v2Parser.Enum, CPP14_v2Parser.Explicit, CPP14_v2Parser.Extern, CPP14_v2Parser.Float, CPP14_v2Parser.Friend, CPP14_v2Parser.Inline, CPP14_v2Parser.Int, CPP14_v2Parser.Long, CPP14_v2Parser.Mutable, CPP14_v2Parser.Operator, CPP14_v2Parser.Register, CPP14_v2Parser.Short, CPP14_v2Parser.Signed, CPP14_v2Parser.Static, CPP14_v2Parser.Static_assert, CPP14_v2Parser.Struct, CPP14_v2Parser.Template, CPP14_v2Parser.Thread_local, CPP14_v2Parser.Typedef, CPP14_v2Parser.Typename_, CPP14_v2Parser.Union, CPP14_v2Parser.Unsigned, CPP14_v2Parser.Using, CPP14_v2Parser.Virtual, CPP14_v2Parser.Void, CPP14_v2Parser.Volatile, CPP14_v2Parser.Wchar, CPP14_v2Parser.LeftParen, CPP14_v2Parser.LeftBracket, CPP14_v2Parser.Star, CPP14_v2Parser.And, CPP14_v2Parser.Tilde, CPP14_v2Parser.Colon, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Semi, CPP14_v2Parser.Ellipsis, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Memberspecification1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2037
                self.memberdeclaration()
                self.state = 2039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Constexpr) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.Explicit) | (1 << CPP14_v2Parser.Extern) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Friend) | (1 << CPP14_v2Parser.Inline) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.Mutable) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Private) | (1 << CPP14_v2Parser.Protected) | (1 << CPP14_v2Parser.Public) | (1 << CPP14_v2Parser.Register) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Static) | (1 << CPP14_v2Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14_v2Parser.Struct - 65)) | (1 << (CPP14_v2Parser.Template - 65)) | (1 << (CPP14_v2Parser.Thread_local - 65)) | (1 << (CPP14_v2Parser.Typedef - 65)) | (1 << (CPP14_v2Parser.Typename_ - 65)) | (1 << (CPP14_v2Parser.Union - 65)) | (1 << (CPP14_v2Parser.Unsigned - 65)) | (1 << (CPP14_v2Parser.Using - 65)) | (1 << (CPP14_v2Parser.Virtual - 65)) | (1 << (CPP14_v2Parser.Void - 65)) | (1 << (CPP14_v2Parser.Volatile - 65)) | (1 << (CPP14_v2Parser.Wchar - 65)) | (1 << (CPP14_v2Parser.LeftParen - 65)) | (1 << (CPP14_v2Parser.LeftBracket - 65)) | (1 << (CPP14_v2Parser.Star - 65)) | (1 << (CPP14_v2Parser.And - 65)) | (1 << (CPP14_v2Parser.Tilde - 65)) | (1 << (CPP14_v2Parser.Colon - 65)) | (1 << (CPP14_v2Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14_v2Parser.Semi - 129)) | (1 << (CPP14_v2Parser.Ellipsis - 129)) | (1 << (CPP14_v2Parser.Identifier - 129)))) != 0):
                    self.state = 2038
                    self.memberspecification()


                pass
            elif token in [CPP14_v2Parser.Private, CPP14_v2Parser.Protected, CPP14_v2Parser.Public]:
                localctx = CPP14_v2Parser.Memberspecification2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2041
                self.accessspecifier()
                self.state = 2042
                self.match(CPP14_v2Parser.Colon)
                self.state = 2044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Constexpr) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.Explicit) | (1 << CPP14_v2Parser.Extern) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Friend) | (1 << CPP14_v2Parser.Inline) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.Mutable) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Private) | (1 << CPP14_v2Parser.Protected) | (1 << CPP14_v2Parser.Public) | (1 << CPP14_v2Parser.Register) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Static) | (1 << CPP14_v2Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14_v2Parser.Struct - 65)) | (1 << (CPP14_v2Parser.Template - 65)) | (1 << (CPP14_v2Parser.Thread_local - 65)) | (1 << (CPP14_v2Parser.Typedef - 65)) | (1 << (CPP14_v2Parser.Typename_ - 65)) | (1 << (CPP14_v2Parser.Union - 65)) | (1 << (CPP14_v2Parser.Unsigned - 65)) | (1 << (CPP14_v2Parser.Using - 65)) | (1 << (CPP14_v2Parser.Virtual - 65)) | (1 << (CPP14_v2Parser.Void - 65)) | (1 << (CPP14_v2Parser.Volatile - 65)) | (1 << (CPP14_v2Parser.Wchar - 65)) | (1 << (CPP14_v2Parser.LeftParen - 65)) | (1 << (CPP14_v2Parser.LeftBracket - 65)) | (1 << (CPP14_v2Parser.Star - 65)) | (1 << (CPP14_v2Parser.And - 65)) | (1 << (CPP14_v2Parser.Tilde - 65)) | (1 << (CPP14_v2Parser.Colon - 65)) | (1 << (CPP14_v2Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14_v2Parser.Semi - 129)) | (1 << (CPP14_v2Parser.Ellipsis - 129)) | (1 << (CPP14_v2Parser.Identifier - 129)))) != 0):
                    self.state = 2043
                    self.memberspecification()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_memberdeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Memberdeclaration4Context(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def static_assertdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.Static_assertdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration4" ):
                listener.enterMemberdeclaration4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration4" ):
                listener.exitMemberdeclaration4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaration4" ):
                return visitor.visitMemberdeclaration4(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclaration5Context(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templatedeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplatedeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration5" ):
                listener.enterMemberdeclaration5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration5" ):
                listener.exitMemberdeclaration5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaration5" ):
                return visitor.visitMemberdeclaration5(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclaration6Context(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aliasdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AliasdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration6" ):
                listener.enterMemberdeclaration6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration6" ):
                listener.exitMemberdeclaration6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaration6" ):
                return visitor.visitMemberdeclaration6(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclaration7Context(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def emptydeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EmptydeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration7" ):
                listener.enterMemberdeclaration7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration7" ):
                listener.exitMemberdeclaration7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaration7" ):
                return visitor.visitMemberdeclaration7(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclaration1Context(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)

        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MemberdeclaratorlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration1" ):
                listener.enterMemberdeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration1" ):
                listener.exitMemberdeclaration1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaration1" ):
                return visitor.visitMemberdeclaration1(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclaration2Context(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.FunctiondefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration2" ):
                listener.enterMemberdeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration2" ):
                listener.exitMemberdeclaration2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaration2" ):
                return visitor.visitMemberdeclaration2(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclaration3Context(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def usingdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UsingdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration3" ):
                listener.enterMemberdeclaration3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration3" ):
                listener.exitMemberdeclaration3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaration3" ):
                return visitor.visitMemberdeclaration3(self)
            else:
                return visitor.visitChildren(self)



    def memberdeclaration(self):

        localctx = CPP14_v2Parser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_memberdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Memberdeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2049
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                if la_ == 1:
                    self.state = 2048
                    self.attributespecifierseq(0)


                self.state = 2052
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 2051
                    self.declspecifierseq()


                self.state = 2055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Operator))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (CPP14_v2Parser.LeftParen - 84)) | (1 << (CPP14_v2Parser.LeftBracket - 84)) | (1 << (CPP14_v2Parser.Star - 84)) | (1 << (CPP14_v2Parser.And - 84)) | (1 << (CPP14_v2Parser.Tilde - 84)) | (1 << (CPP14_v2Parser.Colon - 84)) | (1 << (CPP14_v2Parser.Doublecolon - 84)) | (1 << (CPP14_v2Parser.Ellipsis - 84)) | (1 << (CPP14_v2Parser.Identifier - 84)))) != 0):
                    self.state = 2054
                    self.memberdeclaratorlist(0)


                self.state = 2057
                self.match(CPP14_v2Parser.Semi)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Memberdeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2058
                self.functiondefinition()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Memberdeclaration3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2059
                self.usingdeclaration()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Memberdeclaration4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2060
                self.static_assertdeclaration()
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Memberdeclaration5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2061
                self.templatedeclaration()
                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Memberdeclaration6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2062
                self.aliasdeclaration()
                pass

            elif la_ == 7:
                localctx = CPP14_v2Parser.Memberdeclaration7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2063
                self.emptydeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberdeclaratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_memberdeclaratorlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Memberdeclaratorlis1Context(MemberdeclaratorlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclaratorlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def memberdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MemberdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaratorlis1" ):
                listener.enterMemberdeclaratorlis1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaratorlis1" ):
                listener.exitMemberdeclaratorlis1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaratorlis1" ):
                return visitor.visitMemberdeclaratorlis1(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclaratorlis2Context(MemberdeclaratorlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclaratorlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MemberdeclaratorlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def memberdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MemberdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaratorlis2" ):
                listener.enterMemberdeclaratorlis2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaratorlis2" ):
                listener.exitMemberdeclaratorlis2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaratorlis2" ):
                return visitor.visitMemberdeclaratorlis2(self)
            else:
                return visitor.visitChildren(self)



    def memberdeclaratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.MemberdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 306
        self.enterRecursionRule(localctx, 306, self.RULE_memberdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Memberdeclaratorlis1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2067
            self.memberdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2074
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Memberdeclaratorlis2Context(self, CPP14_v2Parser.MemberdeclaratorlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_memberdeclaratorlist)
                    self.state = 2069
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2070
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 2071
                    self.memberdeclarator() 
                self.state = 2076
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MemberdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_memberdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Memberdeclarator3Context(MemberdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclarator3" ):
                listener.enterMemberdeclarator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclarator3" ):
                listener.exitMemberdeclarator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclarator3" ):
                return visitor.visitMemberdeclarator3(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclarator1Context(MemberdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.VirtspecifierseqContext,0)

        def purespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PurespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclarator1" ):
                listener.enterMemberdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclarator1" ):
                listener.exitMemberdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclarator1" ):
                return visitor.visitMemberdeclarator1(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclarator2Context(MemberdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)

        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BraceorequalinitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclarator2" ):
                listener.enterMemberdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclarator2" ):
                listener.exitMemberdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclarator2" ):
                return visitor.visitMemberdeclarator2(self)
            else:
                return visitor.visitChildren(self)



    def memberdeclarator(self):

        localctx = CPP14_v2Parser.MemberdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_memberdeclarator)
        self._la = 0 # Token type
        try:
            self.state = 2096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Memberdeclarator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2077
                self.declarator()
                self.state = 2079
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                if la_ == 1:
                    self.state = 2078
                    self.virtspecifierseq(0)


                self.state = 2082
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                if la_ == 1:
                    self.state = 2081
                    self.purespecifier()


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Memberdeclarator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2084
                self.declarator()
                self.state = 2086
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                if la_ == 1:
                    self.state = 2085
                    self.braceorequalinitializer()


                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Memberdeclarator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Identifier:
                    self.state = 2088
                    self.match(CPP14_v2Parser.Identifier)


                self.state = 2092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 2091
                    self.attributespecifierseq(0)


                self.state = 2094
                self.match(CPP14_v2Parser.Colon)
                self.state = 2095
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VirtspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_virtspecifierseq

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Virtspecifierseq1Context(VirtspecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.VirtspecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def virtspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.VirtspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifierseq1" ):
                listener.enterVirtspecifierseq1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifierseq1" ):
                listener.exitVirtspecifierseq1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVirtspecifierseq1" ):
                return visitor.visitVirtspecifierseq1(self)
            else:
                return visitor.visitChildren(self)


    class Virtspecifierseq2Context(VirtspecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.VirtspecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.VirtspecifierseqContext,0)

        def virtspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.VirtspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifierseq2" ):
                listener.enterVirtspecifierseq2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifierseq2" ):
                listener.exitVirtspecifierseq2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVirtspecifierseq2" ):
                return visitor.visitVirtspecifierseq2(self)
            else:
                return visitor.visitChildren(self)



    def virtspecifierseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.VirtspecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 310
        self.enterRecursionRule(localctx, 310, self.RULE_virtspecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Virtspecifierseq1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2099
            self.virtspecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2105
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,266,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Virtspecifierseq2Context(self, CPP14_v2Parser.VirtspecifierseqContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_virtspecifierseq)
                    self.state = 2101
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2102
                    self.virtspecifier() 
                self.state = 2107
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,266,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class VirtspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_virtspecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Virtspecifier1Context(VirtspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.VirtspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Override(self):
            return self.getToken(CPP14_v2Parser.Override, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifier1" ):
                listener.enterVirtspecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifier1" ):
                listener.exitVirtspecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVirtspecifier1" ):
                return visitor.visitVirtspecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Virtspecifier2Context(VirtspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.VirtspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Final(self):
            return self.getToken(CPP14_v2Parser.Final, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifier2" ):
                listener.enterVirtspecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifier2" ):
                listener.exitVirtspecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVirtspecifier2" ):
                return visitor.visitVirtspecifier2(self)
            else:
                return visitor.visitChildren(self)



    def virtspecifier(self):

        localctx = CPP14_v2Parser.VirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_virtspecifier)
        try:
            self.state = 2110
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Override]:
                localctx = CPP14_v2Parser.Virtspecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2108
                self.match(CPP14_v2Parser.Override)
                pass
            elif token in [CPP14_v2Parser.Final]:
                localctx = CPP14_v2Parser.Virtspecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2109
                self.match(CPP14_v2Parser.Final)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PurespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None # Token

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)

        def Octalliteral(self):
            return self.getToken(CPP14_v2Parser.Octalliteral, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_purespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPurespecifier" ):
                listener.enterPurespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPurespecifier" ):
                listener.exitPurespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPurespecifier" ):
                return visitor.visitPurespecifier(self)
            else:
                return visitor.visitChildren(self)




    def purespecifier(self):

        localctx = CPP14_v2Parser.PurespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_purespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2112
            self.match(CPP14_v2Parser.Assign)
            self.state = 2113
            localctx.val = self.match(CPP14_v2Parser.Octalliteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseclauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BasespecifierlistContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_baseclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseclause" ):
                listener.enterBaseclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseclause" ):
                listener.exitBaseclause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBaseclause" ):
                return visitor.visitBaseclause(self)
            else:
                return visitor.visitChildren(self)




    def baseclause(self):

        localctx = CPP14_v2Parser.BaseclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_baseclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2115
            self.match(CPP14_v2Parser.Colon)
            self.state = 2116
            self.basespecifierlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasespecifierlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_basespecifierlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Basespecifierlist2Context(BasespecifierlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BasespecifierlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BasespecifierlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def basespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BasespecifierContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifierlist2" ):
                listener.enterBasespecifierlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifierlist2" ):
                listener.exitBasespecifierlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasespecifierlist2" ):
                return visitor.visitBasespecifierlist2(self)
            else:
                return visitor.visitChildren(self)


    class Basespecifierlist1Context(BasespecifierlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BasespecifierlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def basespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BasespecifierContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifierlist1" ):
                listener.enterBasespecifierlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifierlist1" ):
                listener.exitBasespecifierlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasespecifierlist1" ):
                return visitor.visitBasespecifierlist1(self)
            else:
                return visitor.visitChildren(self)



    def basespecifierlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.BasespecifierlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 318
        self.enterRecursionRule(localctx, 318, self.RULE_basespecifierlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Basespecifierlist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2119
            self.basespecifier()
            self.state = 2121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.state = 2120
                self.match(CPP14_v2Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2131
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,270,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Basespecifierlist2Context(self, CPP14_v2Parser.BasespecifierlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_basespecifierlist)
                    self.state = 2123
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2124
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 2125
                    self.basespecifier()
                    self.state = 2127
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                    if la_ == 1:
                        self.state = 2126
                        self.match(CPP14_v2Parser.Ellipsis)

             
                self.state = 2133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,270,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BasespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_basespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Basespecifier2Context(BasespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BasespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Virtual(self):
            return self.getToken(CPP14_v2Parser.Virtual, 0)
        def basetypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BasetypespecifierContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AccessspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifier2" ):
                listener.enterBasespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifier2" ):
                listener.exitBasespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasespecifier2" ):
                return visitor.visitBasespecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Basespecifier1Context(BasespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BasespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def basetypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BasetypespecifierContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifier1" ):
                listener.enterBasespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifier1" ):
                listener.exitBasespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasespecifier1" ):
                return visitor.visitBasespecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Basespecifier3Context(BasespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BasespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AccessspecifierContext,0)

        def basetypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BasetypespecifierContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def Virtual(self):
            return self.getToken(CPP14_v2Parser.Virtual, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifier3" ):
                listener.enterBasespecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifier3" ):
                listener.exitBasespecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasespecifier3" ):
                return visitor.visitBasespecifier3(self)
            else:
                return visitor.visitChildren(self)



    def basespecifier(self):

        localctx = CPP14_v2Parser.BasespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_basespecifier)
        self._la = 0 # Token type
        try:
            self.state = 2155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Basespecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 2134
                    self.attributespecifierseq(0)


                self.state = 2137
                self.basetypespecifier()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Basespecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 2138
                    self.attributespecifierseq(0)


                self.state = 2141
                self.match(CPP14_v2Parser.Virtual)
                self.state = 2143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.Private) | (1 << CPP14_v2Parser.Protected) | (1 << CPP14_v2Parser.Public))) != 0):
                    self.state = 2142
                    self.accessspecifier()


                self.state = 2145
                self.basetypespecifier()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Basespecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 2146
                    self.attributespecifierseq(0)


                self.state = 2149
                self.accessspecifier()
                self.state = 2151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Virtual:
                    self.state = 2150
                    self.match(CPP14_v2Parser.Virtual)


                self.state = 2153
                self.basetypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassordecltypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_classordecltype

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Classordecltype2Context(ClassordecltypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClassordecltypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DecltypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassordecltype2" ):
                listener.enterClassordecltype2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassordecltype2" ):
                listener.exitClassordecltype2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassordecltype2" ):
                return visitor.visitClassordecltype2(self)
            else:
                return visitor.visitChildren(self)


    class Classordecltype1Context(ClassordecltypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClassordecltypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassnameContext,0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassordecltype1" ):
                listener.enterClassordecltype1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassordecltype1" ):
                listener.exitClassordecltype1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassordecltype1" ):
                return visitor.visitClassordecltype1(self)
            else:
                return visitor.visitChildren(self)



    def classordecltype(self):

        localctx = CPP14_v2Parser.ClassordecltypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_classordecltype)
        try:
            self.state = 2162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Classordecltype1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2158
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
                if la_ == 1:
                    self.state = 2157
                    self.nestednamespecifier(0)


                self.state = 2160
                self.classname()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Classordecltype2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2161
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasetypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassordecltypeContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_basetypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasetypespecifier" ):
                listener.enterBasetypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasetypespecifier" ):
                listener.exitBasetypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasetypespecifier" ):
                return visitor.visitBasetypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def basetypespecifier(self):

        localctx = CPP14_v2Parser.BasetypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_basetypespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2164
            self.classordecltype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_accessspecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Accessspecifier2Context(AccessspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AccessspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Protected(self):
            return self.getToken(CPP14_v2Parser.Protected, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessspecifier2" ):
                listener.enterAccessspecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessspecifier2" ):
                listener.exitAccessspecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessspecifier2" ):
                return visitor.visitAccessspecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Accessspecifier3Context(AccessspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AccessspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Public(self):
            return self.getToken(CPP14_v2Parser.Public, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessspecifier3" ):
                listener.enterAccessspecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessspecifier3" ):
                listener.exitAccessspecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessspecifier3" ):
                return visitor.visitAccessspecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Accessspecifier1Context(AccessspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AccessspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Private(self):
            return self.getToken(CPP14_v2Parser.Private, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessspecifier1" ):
                listener.enterAccessspecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessspecifier1" ):
                listener.exitAccessspecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessspecifier1" ):
                return visitor.visitAccessspecifier1(self)
            else:
                return visitor.visitChildren(self)



    def accessspecifier(self):

        localctx = CPP14_v2Parser.AccessspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_accessspecifier)
        try:
            self.state = 2169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Private]:
                localctx = CPP14_v2Parser.Accessspecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2166
                self.match(CPP14_v2Parser.Private)
                pass
            elif token in [CPP14_v2Parser.Protected]:
                localctx = CPP14_v2Parser.Accessspecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2167
                self.match(CPP14_v2Parser.Protected)
                pass
            elif token in [CPP14_v2Parser.Public]:
                localctx = CPP14_v2Parser.Accessspecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2168
                self.match(CPP14_v2Parser.Public)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversionfunctionidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14_v2Parser.Operator, 0)

        def conversiontypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConversiontypeidContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_conversionfunctionid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversionfunctionid" ):
                listener.enterConversionfunctionid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversionfunctionid" ):
                listener.exitConversionfunctionid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversionfunctionid" ):
                return visitor.visitConversionfunctionid(self)
            else:
                return visitor.visitChildren(self)




    def conversionfunctionid(self):

        localctx = CPP14_v2Parser.ConversionfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_conversionfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2171
            self.match(CPP14_v2Parser.Operator)
            self.state = 2172
            self.conversiontypeid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversiontypeidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierseqContext,0)


        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConversiondeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_conversiontypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversiontypeid" ):
                listener.enterConversiontypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversiontypeid" ):
                listener.exitConversiontypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversiontypeid" ):
                return visitor.visitConversiontypeid(self)
            else:
                return visitor.visitChildren(self)




    def conversiontypeid(self):

        localctx = CPP14_v2Parser.ConversiontypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_conversiontypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2174
            self.typespecifierseq()
            self.state = 2176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.state = 2175
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversiondeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtroperatorContext,0)


        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConversiondeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_conversiondeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversiondeclarator" ):
                listener.enterConversiondeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversiondeclarator" ):
                listener.exitConversiondeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversiondeclarator" ):
                return visitor.visitConversiondeclarator(self)
            else:
                return visitor.visitChildren(self)




    def conversiondeclarator(self):

        localctx = CPP14_v2Parser.ConversiondeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_conversiondeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2178
            self.ptroperator()
            self.state = 2180
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.state = 2179
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtorinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MeminitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_ctorinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtorinitializer" ):
                listener.enterCtorinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtorinitializer" ):
                listener.exitCtorinitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtorinitializer" ):
                return visitor.visitCtorinitializer(self)
            else:
                return visitor.visitChildren(self)




    def ctorinitializer(self):

        localctx = CPP14_v2Parser.CtorinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_ctorinitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2182
            self.match(CPP14_v2Parser.Colon)
            self.state = 2183
            self.meminitializerlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_meminitializerlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Meminitializerlist1Context(MeminitializerlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MeminitializerlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def meminitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MeminitializerContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerlist1" ):
                listener.enterMeminitializerlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerlist1" ):
                listener.exitMeminitializerlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializerlist1" ):
                return visitor.visitMeminitializerlist1(self)
            else:
                return visitor.visitChildren(self)


    class Meminitializerlist2Context(MeminitializerlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MeminitializerlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def meminitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MeminitializerContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MeminitializerlistContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerlist2" ):
                listener.enterMeminitializerlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerlist2" ):
                listener.exitMeminitializerlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializerlist2" ):
                return visitor.visitMeminitializerlist2(self)
            else:
                return visitor.visitChildren(self)



    def meminitializerlist(self):

        localctx = CPP14_v2Parser.MeminitializerlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_meminitializerlist)
        self._la = 0 # Token type
        try:
            self.state = 2196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Meminitializerlist1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2185
                self.meminitializer()
                self.state = 2187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Ellipsis:
                    self.state = 2186
                    self.match(CPP14_v2Parser.Ellipsis)


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Meminitializerlist2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2189
                self.meminitializer()
                self.state = 2191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Ellipsis:
                    self.state = 2190
                    self.match(CPP14_v2Parser.Ellipsis)


                self.state = 2193
                self.match(CPP14_v2Parser.Comma)
                self.state = 2194
                self.meminitializerlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_meminitializer

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Meminitializer2Context(MeminitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MeminitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def meminitializerid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MeminitializeridContext,0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializer2" ):
                listener.enterMeminitializer2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializer2" ):
                listener.exitMeminitializer2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializer2" ):
                return visitor.visitMeminitializer2(self)
            else:
                return visitor.visitChildren(self)


    class Meminitializer1Context(MeminitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MeminitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def meminitializerid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MeminitializeridContext,0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def expressionlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializer1" ):
                listener.enterMeminitializer1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializer1" ):
                listener.exitMeminitializer1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializer1" ):
                return visitor.visitMeminitializer1(self)
            else:
                return visitor.visitChildren(self)



    def meminitializer(self):

        localctx = CPP14_v2Parser.MeminitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_meminitializer)
        self._la = 0 # Token type
        try:
            self.state = 2208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Meminitializer1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2198
                self.meminitializerid()
                self.state = 2199
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 2201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.LeftBrace - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 2200
                    self.expressionlist()


                self.state = 2203
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Meminitializer2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2205
                self.meminitializerid()
                self.state = 2206
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializeridContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_meminitializerid

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Meminitializerid1Context(MeminitializeridContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MeminitializeridContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassordecltypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerid1" ):
                listener.enterMeminitializerid1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerid1" ):
                listener.exitMeminitializerid1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializerid1" ):
                return visitor.visitMeminitializerid1(self)
            else:
                return visitor.visitChildren(self)


    class Meminitializerid2Context(MeminitializeridContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MeminitializeridContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerid2" ):
                listener.enterMeminitializerid2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerid2" ):
                listener.exitMeminitializerid2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializerid2" ):
                return visitor.visitMeminitializerid2(self)
            else:
                return visitor.visitChildren(self)



    def meminitializerid(self):

        localctx = CPP14_v2Parser.MeminitializeridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_meminitializerid)
        try:
            self.state = 2212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Meminitializerid1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2210
                self.classordecltype()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Meminitializerid2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2211
                self.match(CPP14_v2Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorfunctionidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14_v2Parser.Operator, 0)

        def theoperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TheoperatorContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_operatorfunctionid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorfunctionid" ):
                listener.enterOperatorfunctionid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorfunctionid" ):
                listener.exitOperatorfunctionid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperatorfunctionid" ):
                return visitor.visitOperatorfunctionid(self)
            else:
                return visitor.visitChildren(self)




    def operatorfunctionid(self):

        localctx = CPP14_v2Parser.OperatorfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_operatorfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2214
            self.match(CPP14_v2Parser.Operator)
            self.state = 2215
            self.theoperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteraloperatoridContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_literaloperatorid

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Literaloperatorid2Context(LiteraloperatoridContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteraloperatoridContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Operator(self):
            return self.getToken(CPP14_v2Parser.Operator, 0)
        def Userdefinedstringliteral(self):
            return self.getToken(CPP14_v2Parser.Userdefinedstringliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteraloperatorid2" ):
                listener.enterLiteraloperatorid2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteraloperatorid2" ):
                listener.exitLiteraloperatorid2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteraloperatorid2" ):
                return visitor.visitLiteraloperatorid2(self)
            else:
                return visitor.visitChildren(self)


    class Literaloperatorid1Context(LiteraloperatoridContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteraloperatoridContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Operator(self):
            return self.getToken(CPP14_v2Parser.Operator, 0)
        def Stringliteral(self):
            return self.getToken(CPP14_v2Parser.Stringliteral, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteraloperatorid1" ):
                listener.enterLiteraloperatorid1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteraloperatorid1" ):
                listener.exitLiteraloperatorid1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteraloperatorid1" ):
                return visitor.visitLiteraloperatorid1(self)
            else:
                return visitor.visitChildren(self)



    def literaloperatorid(self):

        localctx = CPP14_v2Parser.LiteraloperatoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_literaloperatorid)
        try:
            self.state = 2222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Literaloperatorid1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2217
                self.match(CPP14_v2Parser.Operator)
                self.state = 2218
                self.match(CPP14_v2Parser.Stringliteral)
                self.state = 2219
                self.match(CPP14_v2Parser.Identifier)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Literaloperatorid2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2220
                self.match(CPP14_v2Parser.Operator)
                self.state = 2221
                self.match(CPP14_v2Parser.Userdefinedstringliteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplatedeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateparameterlistContext,0)


        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_templatedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplatedeclaration" ):
                listener.enterTemplatedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplatedeclaration" ):
                listener.exitTemplatedeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplatedeclaration" ):
                return visitor.visitTemplatedeclaration(self)
            else:
                return visitor.visitChildren(self)




    def templatedeclaration(self):

        localctx = CPP14_v2Parser.TemplatedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_templatedeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2224
            self.match(CPP14_v2Parser.Template)
            self.state = 2225
            self.match(CPP14_v2Parser.Less)
            self.state = 2226
            self.templateparameterlist(0)
            self.state = 2227
            self.match(CPP14_v2Parser.Greater)
            self.state = 2228
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateparameterlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_templateparameterlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Templateparameterlist1Context(TemplateparameterlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateparameterlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templateparameter(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateparameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameterlist1" ):
                listener.enterTemplateparameterlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameterlist1" ):
                listener.exitTemplateparameterlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateparameterlist1" ):
                return visitor.visitTemplateparameterlist1(self)
            else:
                return visitor.visitChildren(self)


    class Templateparameterlist2Context(TemplateparameterlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateparameterlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateparameterlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def templateparameter(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateparameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameterlist2" ):
                listener.enterTemplateparameterlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameterlist2" ):
                listener.exitTemplateparameterlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateparameterlist2" ):
                return visitor.visitTemplateparameterlist2(self)
            else:
                return visitor.visitChildren(self)



    def templateparameterlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.TemplateparameterlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 348
        self.enterRecursionRule(localctx, 348, self.RULE_templateparameterlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Templateparameterlist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2231
            self.templateparameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2238
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,289,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Templateparameterlist2Context(self, CPP14_v2Parser.TemplateparameterlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateparameterlist)
                    self.state = 2233
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2234
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 2235
                    self.templateparameter() 
                self.state = 2240
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,289,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TemplateparameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_templateparameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Templateparameter1Context(TemplateparameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateparameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeparameter(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypeparameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameter1" ):
                listener.enterTemplateparameter1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameter1" ):
                listener.exitTemplateparameter1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateparameter1" ):
                return visitor.visitTemplateparameter1(self)
            else:
                return visitor.visitChildren(self)


    class Templateparameter2Context(TemplateparameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateparameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParameterdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameter2" ):
                listener.enterTemplateparameter2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameter2" ):
                listener.exitTemplateparameter2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateparameter2" ):
                return visitor.visitTemplateparameter2(self)
            else:
                return visitor.visitChildren(self)



    def templateparameter(self):

        localctx = CPP14_v2Parser.TemplateparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_templateparameter)
        try:
            self.state = 2243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Templateparameter1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2241
                self.typeparameter()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Templateparameter2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2242
                self.parameterdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeparameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_typeparameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Typeparameter1Context(TypeparameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypeparameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Class(self):
            return self.getToken(CPP14_v2Parser.Class, 0)
        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeparameter1" ):
                listener.enterTypeparameter1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeparameter1" ):
                listener.exitTypeparameter1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeparameter1" ):
                return visitor.visitTypeparameter1(self)
            else:
                return visitor.visitChildren(self)


    class Typeparameter2Context(TypeparameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypeparameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Class(self):
            return self.getToken(CPP14_v2Parser.Class, 0)
        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeparameter2" ):
                listener.enterTypeparameter2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeparameter2" ):
                listener.exitTypeparameter2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeparameter2" ):
                return visitor.visitTypeparameter2(self)
            else:
                return visitor.visitChildren(self)


    class Typeparameter3Context(TypeparameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypeparameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Typename_(self):
            return self.getToken(CPP14_v2Parser.Typename_, 0)
        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeparameter3" ):
                listener.enterTypeparameter3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeparameter3" ):
                listener.exitTypeparameter3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeparameter3" ):
                return visitor.visitTypeparameter3(self)
            else:
                return visitor.visitChildren(self)


    class Typeparameter4Context(TypeparameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypeparameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Typename_(self):
            return self.getToken(CPP14_v2Parser.Typename_, 0)
        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeparameter4" ):
                listener.enterTypeparameter4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeparameter4" ):
                listener.exitTypeparameter4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeparameter4" ):
                return visitor.visitTypeparameter4(self)
            else:
                return visitor.visitChildren(self)


    class Typeparameter5Context(TypeparameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypeparameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)
        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateparameterlistContext,0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def Class(self):
            return self.getToken(CPP14_v2Parser.Class, 0)
        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeparameter5" ):
                listener.enterTypeparameter5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeparameter5" ):
                listener.exitTypeparameter5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeparameter5" ):
                return visitor.visitTypeparameter5(self)
            else:
                return visitor.visitChildren(self)


    class Typeparameter6Context(TypeparameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypeparameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)
        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateparameterlistContext,0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def Class(self):
            return self.getToken(CPP14_v2Parser.Class, 0)
        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def idexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.IdexpressionContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeparameter6" ):
                listener.enterTypeparameter6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeparameter6" ):
                listener.exitTypeparameter6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeparameter6" ):
                return visitor.visitTypeparameter6(self)
            else:
                return visitor.visitChildren(self)



    def typeparameter(self):

        localctx = CPP14_v2Parser.TypeparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_typeparameter)
        self._la = 0 # Token type
        try:
            self.state = 2293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Typeparameter1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2245
                self.match(CPP14_v2Parser.Class)
                self.state = 2247
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
                if la_ == 1:
                    self.state = 2246
                    self.match(CPP14_v2Parser.Ellipsis)


                self.state = 2250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
                if la_ == 1:
                    self.state = 2249
                    self.match(CPP14_v2Parser.Identifier)


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Typeparameter2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2252
                self.match(CPP14_v2Parser.Class)
                self.state = 2254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Identifier:
                    self.state = 2253
                    self.match(CPP14_v2Parser.Identifier)


                self.state = 2256
                self.match(CPP14_v2Parser.Assign)
                self.state = 2257
                self.thetypeid()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Typeparameter3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2258
                self.match(CPP14_v2Parser.Typename_)
                self.state = 2260
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                if la_ == 1:
                    self.state = 2259
                    self.match(CPP14_v2Parser.Ellipsis)


                self.state = 2263
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
                if la_ == 1:
                    self.state = 2262
                    self.match(CPP14_v2Parser.Identifier)


                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Typeparameter4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2265
                self.match(CPP14_v2Parser.Typename_)
                self.state = 2267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Identifier:
                    self.state = 2266
                    self.match(CPP14_v2Parser.Identifier)


                self.state = 2269
                self.match(CPP14_v2Parser.Assign)
                self.state = 2270
                self.thetypeid()
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Typeparameter5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2271
                self.match(CPP14_v2Parser.Template)
                self.state = 2272
                self.match(CPP14_v2Parser.Less)
                self.state = 2273
                self.templateparameterlist(0)
                self.state = 2274
                self.match(CPP14_v2Parser.Greater)
                self.state = 2275
                self.match(CPP14_v2Parser.Class)
                self.state = 2277
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                if la_ == 1:
                    self.state = 2276
                    self.match(CPP14_v2Parser.Ellipsis)


                self.state = 2280
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
                if la_ == 1:
                    self.state = 2279
                    self.match(CPP14_v2Parser.Identifier)


                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Typeparameter6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2282
                self.match(CPP14_v2Parser.Template)
                self.state = 2283
                self.match(CPP14_v2Parser.Less)
                self.state = 2284
                self.templateparameterlist(0)
                self.state = 2285
                self.match(CPP14_v2Parser.Greater)
                self.state = 2286
                self.match(CPP14_v2Parser.Class)
                self.state = 2288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Identifier:
                    self.state = 2287
                    self.match(CPP14_v2Parser.Identifier)


                self.state = 2290
                self.match(CPP14_v2Parser.Assign)
                self.state = 2291
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpletemplateidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templatename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplatenameContext,0)


        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateargumentlistContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_simpletemplateid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletemplateid" ):
                listener.enterSimpletemplateid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletemplateid" ):
                listener.exitSimpletemplateid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletemplateid" ):
                return visitor.visitSimpletemplateid(self)
            else:
                return visitor.visitChildren(self)




    def simpletemplateid(self):

        localctx = CPP14_v2Parser.SimpletemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_simpletemplateid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2295
            self.templatename()
            self.state = 2296
            self.match(CPP14_v2Parser.Less)
            self.state = 2298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.Struct - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Union - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Volatile - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                self.state = 2297
                self.templateargumentlist(0)


            self.state = 2300
            self.match(CPP14_v2Parser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_templateid

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Templateid3Context(TemplateidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literaloperatorid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LiteraloperatoridContext,0)

        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateargumentlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateid3" ):
                listener.enterTemplateid3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateid3" ):
                listener.exitTemplateid3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateid3" ):
                return visitor.visitTemplateid3(self)
            else:
                return visitor.visitChildren(self)


    class Templateid1Context(TemplateidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateid1" ):
                listener.enterTemplateid1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateid1" ):
                listener.exitTemplateid1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateid1" ):
                return visitor.visitTemplateid1(self)
            else:
                return visitor.visitChildren(self)


    class Templateid2Context(TemplateidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def operatorfunctionid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.OperatorfunctionidContext,0)

        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateargumentlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateid2" ):
                listener.enterTemplateid2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateid2" ):
                listener.exitTemplateid2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateid2" ):
                return visitor.visitTemplateid2(self)
            else:
                return visitor.visitChildren(self)



    def templateid(self):

        localctx = CPP14_v2Parser.TemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_templateid)
        self._la = 0 # Token type
        try:
            self.state = 2317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Templateid1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2302
                self.simpletemplateid()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Templateid2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2303
                self.operatorfunctionid()
                self.state = 2304
                self.match(CPP14_v2Parser.Less)
                self.state = 2306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.Struct - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Union - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Volatile - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 2305
                    self.templateargumentlist(0)


                self.state = 2308
                self.match(CPP14_v2Parser.Greater)
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Templateid3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2310
                self.literaloperatorid()
                self.state = 2311
                self.match(CPP14_v2Parser.Less)
                self.state = 2313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.Struct - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Union - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Volatile - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 2312
                    self.templateargumentlist(0)


                self.state = 2315
                self.match(CPP14_v2Parser.Greater)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplatenameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_templatename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplatename" ):
                listener.enterTemplatename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplatename" ):
                listener.exitTemplatename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplatename" ):
                return visitor.visitTemplatename(self)
            else:
                return visitor.visitChildren(self)




    def templatename(self):

        localctx = CPP14_v2Parser.TemplatenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_templatename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2319
            self.match(CPP14_v2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateargumentlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_templateargumentlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Templateargumentlist2Context(TemplateargumentlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateargumentlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateargumentlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def templateargument(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateargumentContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargumentlist2" ):
                listener.enterTemplateargumentlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargumentlist2" ):
                listener.exitTemplateargumentlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateargumentlist2" ):
                return visitor.visitTemplateargumentlist2(self)
            else:
                return visitor.visitChildren(self)


    class Templateargumentlist1Context(TemplateargumentlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateargumentlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templateargument(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateargumentContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargumentlist1" ):
                listener.enterTemplateargumentlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargumentlist1" ):
                listener.exitTemplateargumentlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateargumentlist1" ):
                return visitor.visitTemplateargumentlist1(self)
            else:
                return visitor.visitChildren(self)



    def templateargumentlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.TemplateargumentlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 360
        self.enterRecursionRule(localctx, 360, self.RULE_templateargumentlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Templateargumentlist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2322
            self.templateargument()
            self.state = 2324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.state = 2323
                self.match(CPP14_v2Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2334
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,307,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Templateargumentlist2Context(self, CPP14_v2Parser.TemplateargumentlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateargumentlist)
                    self.state = 2326
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2327
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 2328
                    self.templateargument()
                    self.state = 2330
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
                    if la_ == 1:
                        self.state = 2329
                        self.match(CPP14_v2Parser.Ellipsis)

             
                self.state = 2336
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,307,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TemplateargumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_templateargument

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Templateargument3Context(TemplateargumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateargumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.IdexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargument3" ):
                listener.enterTemplateargument3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargument3" ):
                listener.exitTemplateargument3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateargument3" ):
                return visitor.visitTemplateargument3(self)
            else:
                return visitor.visitChildren(self)


    class Templateargument2Context(TemplateargumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateargumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargument2" ):
                listener.enterTemplateargument2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargument2" ):
                listener.exitTemplateargument2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateargument2" ):
                return visitor.visitTemplateargument2(self)
            else:
                return visitor.visitChildren(self)


    class Templateargument1Context(TemplateargumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateargumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargument1" ):
                listener.enterTemplateargument1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargument1" ):
                listener.exitTemplateargument1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateargument1" ):
                return visitor.visitTemplateargument1(self)
            else:
                return visitor.visitChildren(self)



    def templateargument(self):

        localctx = CPP14_v2Parser.TemplateargumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_templateargument)
        try:
            self.state = 2340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Templateargument1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2337
                self.thetypeid()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Templateargument2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2338
                self.constantexpression()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Templateargument3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2339
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypenamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_typenamespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Typenamespecifier2Context(TypenamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypenamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Typename_(self):
            return self.getToken(CPP14_v2Parser.Typename_, 0)
        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypenamespecifier2" ):
                listener.enterTypenamespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypenamespecifier2" ):
                listener.exitTypenamespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypenamespecifier2" ):
                return visitor.visitTypenamespecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Typenamespecifier1Context(TypenamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypenamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Typename_(self):
            return self.getToken(CPP14_v2Parser.Typename_, 0)
        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypenamespecifier1" ):
                listener.enterTypenamespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypenamespecifier1" ):
                listener.exitTypenamespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypenamespecifier1" ):
                return visitor.visitTypenamespecifier1(self)
            else:
                return visitor.visitChildren(self)



    def typenamespecifier(self):

        localctx = CPP14_v2Parser.TypenamespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_typenamespecifier)
        self._la = 0 # Token type
        try:
            self.state = 2353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Typenamespecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2342
                self.match(CPP14_v2Parser.Typename_)
                self.state = 2343
                self.nestednamespecifier(0)
                self.state = 2344
                self.match(CPP14_v2Parser.Identifier)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Typenamespecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2346
                self.match(CPP14_v2Parser.Typename_)
                self.state = 2347
                self.nestednamespecifier(0)
                self.state = 2349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Template:
                    self.state = 2348
                    self.match(CPP14_v2Parser.Template)


                self.state = 2351
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitinstantiationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationContext,0)


        def Extern(self):
            return self.getToken(CPP14_v2Parser.Extern, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_explicitinstantiation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitinstantiation" ):
                listener.enterExplicitinstantiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitinstantiation" ):
                listener.exitExplicitinstantiation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitinstantiation" ):
                return visitor.visitExplicitinstantiation(self)
            else:
                return visitor.visitChildren(self)




    def explicitinstantiation(self):

        localctx = CPP14_v2Parser.ExplicitinstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_explicitinstantiation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Extern:
                self.state = 2355
                self.match(CPP14_v2Parser.Extern)


            self.state = 2358
            self.match(CPP14_v2Parser.Template)
            self.state = 2359
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitspecializationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_explicitspecialization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitspecialization" ):
                listener.enterExplicitspecialization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitspecialization" ):
                listener.exitExplicitspecialization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitspecialization" ):
                return visitor.visitExplicitspecialization(self)
            else:
                return visitor.visitChildren(self)




    def explicitspecialization(self):

        localctx = CPP14_v2Parser.ExplicitspecializationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_explicitspecialization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2361
            self.match(CPP14_v2Parser.Template)
            self.state = 2362
            self.match(CPP14_v2Parser.Less)
            self.state = 2363
            self.match(CPP14_v2Parser.Greater)
            self.state = 2364
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryblockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14_v2Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CompoundstatementContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.HandlerseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_tryblock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryblock" ):
                listener.enterTryblock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryblock" ):
                listener.exitTryblock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryblock" ):
                return visitor.visitTryblock(self)
            else:
                return visitor.visitChildren(self)




    def tryblock(self):

        localctx = CPP14_v2Parser.TryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_tryblock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2366
            self.match(CPP14_v2Parser.Try)
            self.state = 2367
            self.compoundstatement()
            self.state = 2368
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiontryblockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14_v2Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CompoundstatementContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.HandlerseqContext,0)


        def ctorinitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CtorinitializerContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_functiontryblock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiontryblock" ):
                listener.enterFunctiontryblock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiontryblock" ):
                listener.exitFunctiontryblock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiontryblock" ):
                return visitor.visitFunctiontryblock(self)
            else:
                return visitor.visitChildren(self)




    def functiontryblock(self):

        localctx = CPP14_v2Parser.FunctiontryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_functiontryblock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2370
            self.match(CPP14_v2Parser.Try)
            self.state = 2372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Colon:
                self.state = 2371
                self.ctorinitializer()


            self.state = 2374
            self.compoundstatement()
            self.state = 2375
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handler(self):
            return self.getTypedRuleContext(CPP14_v2Parser.HandlerContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.HandlerseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_handlerseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerseq" ):
                listener.enterHandlerseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerseq" ):
                listener.exitHandlerseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerseq" ):
                return visitor.visitHandlerseq(self)
            else:
                return visitor.visitChildren(self)




    def handlerseq(self):

        localctx = CPP14_v2Parser.HandlerseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_handlerseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2377
            self.handler()
            self.state = 2379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 2378
                self.handlerseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(CPP14_v2Parser.Catch, 0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def exceptiondeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExceptiondeclarationContext,0)


        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CompoundstatementContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandler" ):
                listener.enterHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandler" ):
                listener.exitHandler(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandler" ):
                return visitor.visitHandler(self)
            else:
                return visitor.visitChildren(self)




    def handler(self):

        localctx = CPP14_v2Parser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_handler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2381
            self.match(CPP14_v2Parser.Catch)
            self.state = 2382
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 2383
            self.exceptiondeclaration()
            self.state = 2384
            self.match(CPP14_v2Parser.RightParen)
            self.state = 2385
            self.compoundstatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptiondeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_exceptiondeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Exceptiondeclaration3Context(ExceptiondeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ExceptiondeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptiondeclaration3" ):
                listener.enterExceptiondeclaration3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptiondeclaration3" ):
                listener.exitExceptiondeclaration3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptiondeclaration3" ):
                return visitor.visitExceptiondeclaration3(self)
            else:
                return visitor.visitChildren(self)


    class Exceptiondeclaration1Context(ExceptiondeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ExceptiondeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierseqContext,0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptiondeclaration1" ):
                listener.enterExceptiondeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptiondeclaration1" ):
                listener.exitExceptiondeclaration1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptiondeclaration1" ):
                return visitor.visitExceptiondeclaration1(self)
            else:
                return visitor.visitChildren(self)


    class Exceptiondeclaration2Context(ExceptiondeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ExceptiondeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierseqContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AbstractdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptiondeclaration2" ):
                listener.enterExceptiondeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptiondeclaration2" ):
                listener.exitExceptiondeclaration2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptiondeclaration2" ):
                return visitor.visitExceptiondeclaration2(self)
            else:
                return visitor.visitChildren(self)



    def exceptiondeclaration(self):

        localctx = CPP14_v2Parser.ExceptiondeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_exceptiondeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Exceptiondeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 2387
                    self.attributespecifierseq(0)


                self.state = 2390
                self.typespecifierseq()
                self.state = 2391
                self.declarator()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Exceptiondeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 2393
                    self.attributespecifierseq(0)


                self.state = 2396
                self.typespecifierseq()
                self.state = 2398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.T__2 or _la==CPP14_v2Parser.Decltype or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (CPP14_v2Parser.LeftParen - 84)) | (1 << (CPP14_v2Parser.LeftBracket - 84)) | (1 << (CPP14_v2Parser.Star - 84)) | (1 << (CPP14_v2Parser.And - 84)) | (1 << (CPP14_v2Parser.Doublecolon - 84)) | (1 << (CPP14_v2Parser.Ellipsis - 84)) | (1 << (CPP14_v2Parser.Identifier - 84)))) != 0):
                    self.state = 2397
                    self.abstractdeclarator()


                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Exceptiondeclaration3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2400
                self.match(CPP14_v2Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14_v2Parser.Throw, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AssignmentexpressionContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_throwexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowexpression" ):
                listener.enterThrowexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowexpression" ):
                listener.exitThrowexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowexpression" ):
                return visitor.visitThrowexpression(self)
            else:
                return visitor.visitChildren(self)




    def throwexpression(self):

        localctx = CPP14_v2Parser.ThrowexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_throwexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2403
            self.match(CPP14_v2Parser.Throw)
            self.state = 2405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.state = 2404
                self.assignmentexpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_exceptionspecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Exceptionspecification2Context(ExceptionspecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ExceptionspecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noexceptspecification(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoexceptspecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionspecification2" ):
                listener.enterExceptionspecification2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionspecification2" ):
                listener.exitExceptionspecification2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptionspecification2" ):
                return visitor.visitExceptionspecification2(self)
            else:
                return visitor.visitChildren(self)


    class Exceptionspecification1Context(ExceptionspecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ExceptionspecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dynamicexceptionspecification(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DynamicexceptionspecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionspecification1" ):
                listener.enterExceptionspecification1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionspecification1" ):
                listener.exitExceptionspecification1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptionspecification1" ):
                return visitor.visitExceptionspecification1(self)
            else:
                return visitor.visitChildren(self)



    def exceptionspecification(self):

        localctx = CPP14_v2Parser.ExceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_exceptionspecification)
        try:
            self.state = 2409
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Throw]:
                localctx = CPP14_v2Parser.Exceptionspecification1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2407
                self.dynamicexceptionspecification()
                pass
            elif token in [CPP14_v2Parser.Noexcept]:
                localctx = CPP14_v2Parser.Exceptionspecification2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2408
                self.noexceptspecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicexceptionspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14_v2Parser.Throw, 0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypeidlistContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_dynamicexceptionspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicexceptionspecification" ):
                listener.enterDynamicexceptionspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicexceptionspecification" ):
                listener.exitDynamicexceptionspecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicexceptionspecification" ):
                return visitor.visitDynamicexceptionspecification(self)
            else:
                return visitor.visitChildren(self)




    def dynamicexceptionspecification(self):

        localctx = CPP14_v2Parser.DynamicexceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_dynamicexceptionspecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2411
            self.match(CPP14_v2Parser.Throw)
            self.state = 2412
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 2414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & ((1 << (CPP14_v2Parser.Auto - 12)) | (1 << (CPP14_v2Parser.Bool - 12)) | (1 << (CPP14_v2Parser.Char - 12)) | (1 << (CPP14_v2Parser.Char16 - 12)) | (1 << (CPP14_v2Parser.Char32 - 12)) | (1 << (CPP14_v2Parser.Class - 12)) | (1 << (CPP14_v2Parser.Const - 12)) | (1 << (CPP14_v2Parser.Decltype - 12)) | (1 << (CPP14_v2Parser.Double - 12)) | (1 << (CPP14_v2Parser.Enum - 12)) | (1 << (CPP14_v2Parser.Float - 12)) | (1 << (CPP14_v2Parser.Int - 12)) | (1 << (CPP14_v2Parser.Long - 12)) | (1 << (CPP14_v2Parser.Short - 12)) | (1 << (CPP14_v2Parser.Signed - 12)) | (1 << (CPP14_v2Parser.Struct - 12)) | (1 << (CPP14_v2Parser.Typename_ - 12)))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (CPP14_v2Parser.Union - 76)) | (1 << (CPP14_v2Parser.Unsigned - 76)) | (1 << (CPP14_v2Parser.Void - 76)) | (1 << (CPP14_v2Parser.Volatile - 76)) | (1 << (CPP14_v2Parser.Wchar - 76)) | (1 << (CPP14_v2Parser.Doublecolon - 76)) | (1 << (CPP14_v2Parser.Identifier - 76)))) != 0):
                self.state = 2413
                self.typeidlist(0)


            self.state = 2416
            self.match(CPP14_v2Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeidlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_typeidlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Typeidlist2Context(TypeidlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypeidlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypeidlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidlist2" ):
                listener.enterTypeidlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidlist2" ):
                listener.exitTypeidlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeidlist2" ):
                return visitor.visitTypeidlist2(self)
            else:
                return visitor.visitChildren(self)


    class Typeidlist1Context(TypeidlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypeidlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidlist1" ):
                listener.enterTypeidlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidlist1" ):
                listener.exitTypeidlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeidlist1" ):
                return visitor.visitTypeidlist1(self)
            else:
                return visitor.visitChildren(self)



    def typeidlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.TypeidlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 386
        self.enterRecursionRule(localctx, 386, self.RULE_typeidlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Typeidlist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2419
            self.thetypeid()
            self.state = 2421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
            if la_ == 1:
                self.state = 2420
                self.match(CPP14_v2Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2431
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,323,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Typeidlist2Context(self, CPP14_v2Parser.TypeidlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeidlist)
                    self.state = 2423
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2424
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 2425
                    self.thetypeid()
                    self.state = 2427
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                    if la_ == 1:
                        self.state = 2426
                        self.match(CPP14_v2Parser.Ellipsis)

             
                self.state = 2433
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,323,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NoexceptspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_noexceptspecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Noexceptspecification1Context(NoexceptspecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoexceptspecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Noexcept(self):
            return self.getToken(CPP14_v2Parser.Noexcept, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoexceptspecification1" ):
                listener.enterNoexceptspecification1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoexceptspecification1" ):
                listener.exitNoexceptspecification1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoexceptspecification1" ):
                return visitor.visitNoexceptspecification1(self)
            else:
                return visitor.visitChildren(self)


    class Noexceptspecification2Context(NoexceptspecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoexceptspecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Noexcept(self):
            return self.getToken(CPP14_v2Parser.Noexcept, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoexceptspecification2" ):
                listener.enterNoexceptspecification2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoexceptspecification2" ):
                listener.exitNoexceptspecification2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoexceptspecification2" ):
                return visitor.visitNoexceptspecification2(self)
            else:
                return visitor.visitChildren(self)



    def noexceptspecification(self):

        localctx = CPP14_v2Parser.NoexceptspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_noexceptspecification)
        try:
            self.state = 2440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Noexceptspecification1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2434
                self.match(CPP14_v2Parser.Noexcept)
                self.state = 2435
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 2436
                self.constantexpression()
                self.state = 2437
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Noexceptspecification2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2439
                self.match(CPP14_v2Parser.Noexcept)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TheoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_theoperator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Theoperator1Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(CPP14_v2Parser.New, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator1" ):
                listener.enterTheoperator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator1" ):
                listener.exitTheoperator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator1" ):
                return visitor.visitTheoperator1(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator2Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Delete(self):
            return self.getToken(CPP14_v2Parser.Delete, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator2" ):
                listener.enterTheoperator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator2" ):
                listener.exitTheoperator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator2" ):
                return visitor.visitTheoperator2(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator3Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(CPP14_v2Parser.New, 0)
        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator3" ):
                listener.enterTheoperator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator3" ):
                listener.exitTheoperator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator3" ):
                return visitor.visitTheoperator3(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator4Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Delete(self):
            return self.getToken(CPP14_v2Parser.Delete, 0)
        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator4" ):
                listener.enterTheoperator4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator4" ):
                listener.exitTheoperator4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator4" ):
                return visitor.visitTheoperator4(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator24Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def XorAssign(self):
            return self.getToken(CPP14_v2Parser.XorAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator24" ):
                listener.enterTheoperator24(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator24" ):
                listener.exitTheoperator24(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator24" ):
                return visitor.visitTheoperator24(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator23Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ModAssign(self):
            return self.getToken(CPP14_v2Parser.ModAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator23" ):
                listener.enterTheoperator23(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator23" ):
                listener.exitTheoperator23(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator23" ):
                return visitor.visitTheoperator23(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator45Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator45" ):
                listener.enterTheoperator45(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator45" ):
                listener.exitTheoperator45(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator45" ):
                return visitor.visitTheoperator45(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator22Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DivAssign(self):
            return self.getToken(CPP14_v2Parser.DivAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator22" ):
                listener.enterTheoperator22(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator22" ):
                listener.exitTheoperator22(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator22" ):
                return visitor.visitTheoperator22(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator44Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator44" ):
                listener.enterTheoperator44(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator44" ):
                listener.exitTheoperator44(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator44" ):
                return visitor.visitTheoperator44(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator21Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StarAssign(self):
            return self.getToken(CPP14_v2Parser.StarAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator21" ):
                listener.enterTheoperator21(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator21" ):
                listener.exitTheoperator21(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator21" ):
                return visitor.visitTheoperator21(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator43Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(CPP14_v2Parser.Arrow, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator43" ):
                listener.enterTheoperator43(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator43" ):
                listener.exitTheoperator43(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator43" ):
                return visitor.visitTheoperator43(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator20Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MinusAssign(self):
            return self.getToken(CPP14_v2Parser.MinusAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator20" ):
                listener.enterTheoperator20(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator20" ):
                listener.exitTheoperator20(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator20" ):
                return visitor.visitTheoperator20(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator42Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ArrowStar(self):
            return self.getToken(CPP14_v2Parser.ArrowStar, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator42" ):
                listener.enterTheoperator42(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator42" ):
                listener.exitTheoperator42(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator42" ):
                return visitor.visitTheoperator42(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator41Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator41" ):
                listener.enterTheoperator41(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator41" ):
                listener.exitTheoperator41(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator41" ):
                return visitor.visitTheoperator41(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator40Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MinusMinus(self):
            return self.getToken(CPP14_v2Parser.MinusMinus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator40" ):
                listener.enterTheoperator40(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator40" ):
                listener.exitTheoperator40(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator40" ):
                return visitor.visitTheoperator40(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator29Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RightShiftAssign(self):
            return self.getToken(CPP14_v2Parser.RightShiftAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator29" ):
                listener.enterTheoperator29(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator29" ):
                listener.exitTheoperator29(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator29" ):
                return visitor.visitTheoperator29(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator28Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RightShift(self):
            return self.getToken(CPP14_v2Parser.RightShift, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator28" ):
                listener.enterTheoperator28(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator28" ):
                listener.exitTheoperator28(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator28" ):
                return visitor.visitTheoperator28(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator27Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftShift(self):
            return self.getToken(CPP14_v2Parser.LeftShift, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator27" ):
                listener.enterTheoperator27(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator27" ):
                listener.exitTheoperator27(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator27" ):
                return visitor.visitTheoperator27(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator26Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OrAssign(self):
            return self.getToken(CPP14_v2Parser.OrAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator26" ):
                listener.enterTheoperator26(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator26" ):
                listener.exitTheoperator26(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator26" ):
                return visitor.visitTheoperator26(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator25Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AndAssign(self):
            return self.getToken(CPP14_v2Parser.AndAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator25" ):
                listener.enterTheoperator25(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator25" ):
                listener.exitTheoperator25(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator25" ):
                return visitor.visitTheoperator25(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator13Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Tilde(self):
            return self.getToken(CPP14_v2Parser.Tilde, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator13" ):
                listener.enterTheoperator13(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator13" ):
                listener.exitTheoperator13(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator13" ):
                return visitor.visitTheoperator13(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator35Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator35" ):
                listener.enterTheoperator35(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator35" ):
                listener.exitTheoperator35(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator35" ):
                return visitor.visitTheoperator35(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator12Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Or(self):
            return self.getToken(CPP14_v2Parser.Or, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator12" ):
                listener.enterTheoperator12(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator12" ):
                listener.exitTheoperator12(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator12" ):
                return visitor.visitTheoperator12(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator34Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GreaterEqual(self):
            return self.getToken(CPP14_v2Parser.GreaterEqual, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator34" ):
                listener.enterTheoperator34(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator34" ):
                listener.exitTheoperator34(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator34" ):
                return visitor.visitTheoperator34(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator11Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def And(self):
            return self.getToken(CPP14_v2Parser.And, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator11" ):
                listener.enterTheoperator11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator11" ):
                listener.exitTheoperator11(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator11" ):
                return visitor.visitTheoperator11(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator33Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LessEqual(self):
            return self.getToken(CPP14_v2Parser.LessEqual, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator33" ):
                listener.enterTheoperator33(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator33" ):
                listener.exitTheoperator33(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator33" ):
                return visitor.visitTheoperator33(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator10Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Caret(self):
            return self.getToken(CPP14_v2Parser.Caret, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator10" ):
                listener.enterTheoperator10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator10" ):
                listener.exitTheoperator10(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator10" ):
                return visitor.visitTheoperator10(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator32Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NotEqual(self):
            return self.getToken(CPP14_v2Parser.NotEqual, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator32" ):
                listener.enterTheoperator32(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator32" ):
                listener.exitTheoperator32(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator32" ):
                return visitor.visitTheoperator32(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator31Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Equal(self):
            return self.getToken(CPP14_v2Parser.Equal, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator31" ):
                listener.enterTheoperator31(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator31" ):
                listener.exitTheoperator31(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator31" ):
                return visitor.visitTheoperator31(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator30Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftShiftAssign(self):
            return self.getToken(CPP14_v2Parser.LeftShiftAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator30" ):
                listener.enterTheoperator30(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator30" ):
                listener.exitTheoperator30(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator30" ):
                return visitor.visitTheoperator30(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator9Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Mod(self):
            return self.getToken(CPP14_v2Parser.Mod, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator9" ):
                listener.enterTheoperator9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator9" ):
                listener.exitTheoperator9(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator9" ):
                return visitor.visitTheoperator9(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator19Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PlusAssign(self):
            return self.getToken(CPP14_v2Parser.PlusAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator19" ):
                listener.enterTheoperator19(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator19" ):
                listener.exitTheoperator19(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator19" ):
                return visitor.visitTheoperator19(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator18Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator18" ):
                listener.enterTheoperator18(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator18" ):
                listener.exitTheoperator18(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator18" ):
                return visitor.visitTheoperator18(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator5Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Plus(self):
            return self.getToken(CPP14_v2Parser.Plus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator5" ):
                listener.enterTheoperator5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator5" ):
                listener.exitTheoperator5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator5" ):
                return visitor.visitTheoperator5(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator17Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator17" ):
                listener.enterTheoperator17(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator17" ):
                listener.exitTheoperator17(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator17" ):
                return visitor.visitTheoperator17(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator39Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PlusPlus(self):
            return self.getToken(CPP14_v2Parser.PlusPlus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator39" ):
                listener.enterTheoperator39(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator39" ):
                listener.exitTheoperator39(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator39" ):
                return visitor.visitTheoperator39(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator6Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Minus(self):
            return self.getToken(CPP14_v2Parser.Minus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator6" ):
                listener.enterTheoperator6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator6" ):
                listener.exitTheoperator6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator6" ):
                return visitor.visitTheoperator6(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator16Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator16" ):
                listener.enterTheoperator16(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator16" ):
                listener.exitTheoperator16(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator16" ):
                return visitor.visitTheoperator16(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator38Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator38" ):
                listener.enterTheoperator38(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator38" ):
                listener.exitTheoperator38(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator38" ):
                return visitor.visitTheoperator38(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator7Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Star(self):
            return self.getToken(CPP14_v2Parser.Star, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator7" ):
                listener.enterTheoperator7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator7" ):
                listener.exitTheoperator7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator7" ):
                return visitor.visitTheoperator7(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator15Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator15" ):
                listener.enterTheoperator15(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator15" ):
                listener.exitTheoperator15(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator15" ):
                return visitor.visitTheoperator15(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator37Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator37" ):
                listener.enterTheoperator37(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator37" ):
                listener.exitTheoperator37(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator37" ):
                return visitor.visitTheoperator37(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator8Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Div(self):
            return self.getToken(CPP14_v2Parser.Div, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator8" ):
                listener.enterTheoperator8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator8" ):
                listener.exitTheoperator8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator8" ):
                return visitor.visitTheoperator8(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator14Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator14" ):
                listener.enterTheoperator14(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator14" ):
                listener.exitTheoperator14(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator14" ):
                return visitor.visitTheoperator14(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator36Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator36" ):
                listener.enterTheoperator36(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator36" ):
                listener.exitTheoperator36(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator36" ):
                return visitor.visitTheoperator36(self)
            else:
                return visitor.visitChildren(self)



    def theoperator(self):

        localctx = CPP14_v2Parser.TheoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_theoperator)
        try:
            self.state = 2493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Theoperator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2442
                self.match(CPP14_v2Parser.New)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Theoperator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2443
                self.match(CPP14_v2Parser.Delete)
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Theoperator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2444
                self.match(CPP14_v2Parser.New)
                self.state = 2445
                self.match(CPP14_v2Parser.LeftBracket)
                self.state = 2446
                self.match(CPP14_v2Parser.RightBracket)
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Theoperator4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2447
                self.match(CPP14_v2Parser.Delete)
                self.state = 2448
                self.match(CPP14_v2Parser.LeftBracket)
                self.state = 2449
                self.match(CPP14_v2Parser.RightBracket)
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Theoperator5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2450
                self.match(CPP14_v2Parser.Plus)
                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Theoperator6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2451
                self.match(CPP14_v2Parser.Minus)
                pass

            elif la_ == 7:
                localctx = CPP14_v2Parser.Theoperator7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2452
                self.match(CPP14_v2Parser.Star)
                pass

            elif la_ == 8:
                localctx = CPP14_v2Parser.Theoperator8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2453
                self.match(CPP14_v2Parser.Div)
                pass

            elif la_ == 9:
                localctx = CPP14_v2Parser.Theoperator9Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2454
                self.match(CPP14_v2Parser.Mod)
                pass

            elif la_ == 10:
                localctx = CPP14_v2Parser.Theoperator10Context(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2455
                self.match(CPP14_v2Parser.Caret)
                pass

            elif la_ == 11:
                localctx = CPP14_v2Parser.Theoperator11Context(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2456
                self.match(CPP14_v2Parser.And)
                pass

            elif la_ == 12:
                localctx = CPP14_v2Parser.Theoperator12Context(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2457
                self.match(CPP14_v2Parser.Or)
                pass

            elif la_ == 13:
                localctx = CPP14_v2Parser.Theoperator13Context(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2458
                self.match(CPP14_v2Parser.Tilde)
                pass

            elif la_ == 14:
                localctx = CPP14_v2Parser.Theoperator14Context(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2459
                self.match(CPP14_v2Parser.T__0)
                pass

            elif la_ == 15:
                localctx = CPP14_v2Parser.Theoperator15Context(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 2460
                self.match(CPP14_v2Parser.T__1)
                pass

            elif la_ == 16:
                localctx = CPP14_v2Parser.Theoperator16Context(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 2461
                self.match(CPP14_v2Parser.Assign)
                pass

            elif la_ == 17:
                localctx = CPP14_v2Parser.Theoperator17Context(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 2462
                self.match(CPP14_v2Parser.Less)
                pass

            elif la_ == 18:
                localctx = CPP14_v2Parser.Theoperator18Context(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 2463
                self.match(CPP14_v2Parser.Greater)
                pass

            elif la_ == 19:
                localctx = CPP14_v2Parser.Theoperator19Context(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 2464
                self.match(CPP14_v2Parser.PlusAssign)
                pass

            elif la_ == 20:
                localctx = CPP14_v2Parser.Theoperator20Context(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 2465
                self.match(CPP14_v2Parser.MinusAssign)
                pass

            elif la_ == 21:
                localctx = CPP14_v2Parser.Theoperator21Context(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 2466
                self.match(CPP14_v2Parser.StarAssign)
                pass

            elif la_ == 22:
                localctx = CPP14_v2Parser.Theoperator22Context(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 2467
                self.match(CPP14_v2Parser.DivAssign)
                pass

            elif la_ == 23:
                localctx = CPP14_v2Parser.Theoperator23Context(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 2468
                self.match(CPP14_v2Parser.ModAssign)
                pass

            elif la_ == 24:
                localctx = CPP14_v2Parser.Theoperator24Context(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 2469
                self.match(CPP14_v2Parser.XorAssign)
                pass

            elif la_ == 25:
                localctx = CPP14_v2Parser.Theoperator25Context(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 2470
                self.match(CPP14_v2Parser.AndAssign)
                pass

            elif la_ == 26:
                localctx = CPP14_v2Parser.Theoperator26Context(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 2471
                self.match(CPP14_v2Parser.OrAssign)
                pass

            elif la_ == 27:
                localctx = CPP14_v2Parser.Theoperator27Context(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 2472
                self.match(CPP14_v2Parser.LeftShift)
                pass

            elif la_ == 28:
                localctx = CPP14_v2Parser.Theoperator28Context(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 2473
                self.match(CPP14_v2Parser.RightShift)
                pass

            elif la_ == 29:
                localctx = CPP14_v2Parser.Theoperator29Context(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 2474
                self.match(CPP14_v2Parser.RightShiftAssign)
                pass

            elif la_ == 30:
                localctx = CPP14_v2Parser.Theoperator30Context(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 2475
                self.match(CPP14_v2Parser.LeftShiftAssign)
                pass

            elif la_ == 31:
                localctx = CPP14_v2Parser.Theoperator31Context(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 2476
                self.match(CPP14_v2Parser.Equal)
                pass

            elif la_ == 32:
                localctx = CPP14_v2Parser.Theoperator32Context(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 2477
                self.match(CPP14_v2Parser.NotEqual)
                pass

            elif la_ == 33:
                localctx = CPP14_v2Parser.Theoperator33Context(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 2478
                self.match(CPP14_v2Parser.LessEqual)
                pass

            elif la_ == 34:
                localctx = CPP14_v2Parser.Theoperator34Context(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 2479
                self.match(CPP14_v2Parser.GreaterEqual)
                pass

            elif la_ == 35:
                localctx = CPP14_v2Parser.Theoperator35Context(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 2480
                self.match(CPP14_v2Parser.T__2)
                pass

            elif la_ == 36:
                localctx = CPP14_v2Parser.Theoperator36Context(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 2481
                self.match(CPP14_v2Parser.T__3)
                pass

            elif la_ == 37:
                localctx = CPP14_v2Parser.Theoperator37Context(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 2482
                self.match(CPP14_v2Parser.T__4)
                pass

            elif la_ == 38:
                localctx = CPP14_v2Parser.Theoperator38Context(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 2483
                self.match(CPP14_v2Parser.T__5)
                pass

            elif la_ == 39:
                localctx = CPP14_v2Parser.Theoperator39Context(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 2484
                self.match(CPP14_v2Parser.PlusPlus)
                pass

            elif la_ == 40:
                localctx = CPP14_v2Parser.Theoperator40Context(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 2485
                self.match(CPP14_v2Parser.MinusMinus)
                pass

            elif la_ == 41:
                localctx = CPP14_v2Parser.Theoperator41Context(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 2486
                self.match(CPP14_v2Parser.Comma)
                pass

            elif la_ == 42:
                localctx = CPP14_v2Parser.Theoperator42Context(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 2487
                self.match(CPP14_v2Parser.ArrowStar)
                pass

            elif la_ == 43:
                localctx = CPP14_v2Parser.Theoperator43Context(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 2488
                self.match(CPP14_v2Parser.Arrow)
                pass

            elif la_ == 44:
                localctx = CPP14_v2Parser.Theoperator44Context(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 2489
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 2490
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 45:
                localctx = CPP14_v2Parser.Theoperator45Context(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 2491
                self.match(CPP14_v2Parser.LeftBracket)
                self.state = 2492
                self.match(CPP14_v2Parser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_literal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Literal2Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Characterliteral(self):
            return self.getToken(CPP14_v2Parser.Characterliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral2" ):
                listener.enterLiteral2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral2" ):
                listener.exitLiteral2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral2" ):
                return visitor.visitLiteral2(self)
            else:
                return visitor.visitChildren(self)


    class Literal1Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Integerliteral(self):
            return self.getToken(CPP14_v2Parser.Integerliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral1" ):
                listener.enterLiteral1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral1" ):
                listener.exitLiteral1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral1" ):
                return visitor.visitLiteral1(self)
            else:
                return visitor.visitChildren(self)


    class Literal6Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pointerliteral(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PointerliteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral6" ):
                listener.enterLiteral6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral6" ):
                listener.exitLiteral6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral6" ):
                return visitor.visitLiteral6(self)
            else:
                return visitor.visitChildren(self)


    class Literal5Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanliteral(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BooleanliteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral5" ):
                listener.enterLiteral5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral5" ):
                listener.exitLiteral5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral5" ):
                return visitor.visitLiteral5(self)
            else:
                return visitor.visitChildren(self)


    class Literal4Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Stringliteral(self):
            return self.getToken(CPP14_v2Parser.Stringliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral4" ):
                listener.enterLiteral4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral4" ):
                listener.exitLiteral4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral4" ):
                return visitor.visitLiteral4(self)
            else:
                return visitor.visitChildren(self)


    class Literal3Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Floatingliteral(self):
            return self.getToken(CPP14_v2Parser.Floatingliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral3" ):
                listener.enterLiteral3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral3" ):
                listener.exitLiteral3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral3" ):
                return visitor.visitLiteral3(self)
            else:
                return visitor.visitChildren(self)


    class Literal7Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userdefinedliteral(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UserdefinedliteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral7" ):
                listener.enterLiteral7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral7" ):
                listener.exitLiteral7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral7" ):
                return visitor.visitLiteral7(self)
            else:
                return visitor.visitChildren(self)



    def literal(self):

        localctx = CPP14_v2Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_literal)
        try:
            self.state = 2502
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Integerliteral]:
                localctx = CPP14_v2Parser.Literal1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2495
                self.match(CPP14_v2Parser.Integerliteral)
                pass
            elif token in [CPP14_v2Parser.Characterliteral]:
                localctx = CPP14_v2Parser.Literal2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2496
                self.match(CPP14_v2Parser.Characterliteral)
                pass
            elif token in [CPP14_v2Parser.Floatingliteral]:
                localctx = CPP14_v2Parser.Literal3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2497
                self.match(CPP14_v2Parser.Floatingliteral)
                pass
            elif token in [CPP14_v2Parser.Stringliteral]:
                localctx = CPP14_v2Parser.Literal4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2498
                self.match(CPP14_v2Parser.Stringliteral)
                pass
            elif token in [CPP14_v2Parser.False1, CPP14_v2Parser.True1]:
                localctx = CPP14_v2Parser.Literal5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2499
                self.booleanliteral()
                pass
            elif token in [CPP14_v2Parser.Nullptr]:
                localctx = CPP14_v2Parser.Literal6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2500
                self.pointerliteral()
                pass
            elif token in [CPP14_v2Parser.Userdefinedintegerliteral, CPP14_v2Parser.Userdefinedfloatingliteral, CPP14_v2Parser.Userdefinedstringliteral, CPP14_v2Parser.Userdefinedcharacterliteral]:
                localctx = CPP14_v2Parser.Literal7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2501
                self.userdefinedliteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanliteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_booleanliteral

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Booleanliteral1Context(BooleanliteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BooleanliteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def False1(self):
            return self.getToken(CPP14_v2Parser.False1, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanliteral1" ):
                listener.enterBooleanliteral1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanliteral1" ):
                listener.exitBooleanliteral1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanliteral1" ):
                return visitor.visitBooleanliteral1(self)
            else:
                return visitor.visitChildren(self)


    class Booleanliteral2Context(BooleanliteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BooleanliteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def True1(self):
            return self.getToken(CPP14_v2Parser.True1, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanliteral2" ):
                listener.enterBooleanliteral2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanliteral2" ):
                listener.exitBooleanliteral2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanliteral2" ):
                return visitor.visitBooleanliteral2(self)
            else:
                return visitor.visitChildren(self)



    def booleanliteral(self):

        localctx = CPP14_v2Parser.BooleanliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_booleanliteral)
        try:
            self.state = 2506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.False1]:
                localctx = CPP14_v2Parser.Booleanliteral1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2504
                self.match(CPP14_v2Parser.False1)
                pass
            elif token in [CPP14_v2Parser.True1]:
                localctx = CPP14_v2Parser.Booleanliteral2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2505
                self.match(CPP14_v2Parser.True1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerliteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nullptr(self):
            return self.getToken(CPP14_v2Parser.Nullptr, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_pointerliteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerliteral" ):
                listener.enterPointerliteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerliteral" ):
                listener.exitPointerliteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerliteral" ):
                return visitor.visitPointerliteral(self)
            else:
                return visitor.visitChildren(self)




    def pointerliteral(self):

        localctx = CPP14_v2Parser.PointerliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_pointerliteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2508
            self.match(CPP14_v2Parser.Nullptr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserdefinedliteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_userdefinedliteral

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Userdefinedliteral2Context(UserdefinedliteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UserdefinedliteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Userdefinedfloatingliteral(self):
            return self.getToken(CPP14_v2Parser.Userdefinedfloatingliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserdefinedliteral2" ):
                listener.enterUserdefinedliteral2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserdefinedliteral2" ):
                listener.exitUserdefinedliteral2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserdefinedliteral2" ):
                return visitor.visitUserdefinedliteral2(self)
            else:
                return visitor.visitChildren(self)


    class Userdefinedliteral1Context(UserdefinedliteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UserdefinedliteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Userdefinedintegerliteral(self):
            return self.getToken(CPP14_v2Parser.Userdefinedintegerliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserdefinedliteral1" ):
                listener.enterUserdefinedliteral1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserdefinedliteral1" ):
                listener.exitUserdefinedliteral1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserdefinedliteral1" ):
                return visitor.visitUserdefinedliteral1(self)
            else:
                return visitor.visitChildren(self)


    class Userdefinedliteral4Context(UserdefinedliteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UserdefinedliteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Userdefinedcharacterliteral(self):
            return self.getToken(CPP14_v2Parser.Userdefinedcharacterliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserdefinedliteral4" ):
                listener.enterUserdefinedliteral4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserdefinedliteral4" ):
                listener.exitUserdefinedliteral4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserdefinedliteral4" ):
                return visitor.visitUserdefinedliteral4(self)
            else:
                return visitor.visitChildren(self)


    class Userdefinedliteral3Context(UserdefinedliteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UserdefinedliteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14_v2Parser.Userdefinedstringliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserdefinedliteral3" ):
                listener.enterUserdefinedliteral3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserdefinedliteral3" ):
                listener.exitUserdefinedliteral3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserdefinedliteral3" ):
                return visitor.visitUserdefinedliteral3(self)
            else:
                return visitor.visitChildren(self)



    def userdefinedliteral(self):

        localctx = CPP14_v2Parser.UserdefinedliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_userdefinedliteral)
        try:
            self.state = 2514
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Userdefinedintegerliteral]:
                localctx = CPP14_v2Parser.Userdefinedliteral1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2510
                self.match(CPP14_v2Parser.Userdefinedintegerliteral)
                pass
            elif token in [CPP14_v2Parser.Userdefinedfloatingliteral]:
                localctx = CPP14_v2Parser.Userdefinedliteral2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2511
                self.match(CPP14_v2Parser.Userdefinedfloatingliteral)
                pass
            elif token in [CPP14_v2Parser.Userdefinedstringliteral]:
                localctx = CPP14_v2Parser.Userdefinedliteral3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2512
                self.match(CPP14_v2Parser.Userdefinedstringliteral)
                pass
            elif token in [CPP14_v2Parser.Userdefinedcharacterliteral]:
                localctx = CPP14_v2Parser.Userdefinedliteral4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2513
                self.match(CPP14_v2Parser.Userdefinedcharacterliteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[5] = self.nestednamespecifier_sempred
        self._predicates[10] = self.capturelist_sempred
        self._predicates[15] = self.postfixexpression_sempred
        self._predicates[26] = self.noptrnewdeclarator_sempred
        self._predicates[31] = self.pmexpression_sempred
        self._predicates[32] = self.multiplicativeexpression_sempred
        self._predicates[33] = self.additiveexpression_sempred
        self._predicates[34] = self.shiftexpression_sempred
        self._predicates[36] = self.relationalexpression_sempred
        self._predicates[37] = self.equalityexpression_sempred
        self._predicates[38] = self.andexpression_sempred
        self._predicates[39] = self.exclusiveorexpression_sempred
        self._predicates[40] = self.inclusiveorexpression_sempred
        self._predicates[41] = self.logicalandexpression_sempred
        self._predicates[42] = self.logicalorexpression_sempred
        self._predicates[46] = self.expression_sempred
        self._predicates[52] = self.statementseq_sempred
        self._predicates[61] = self.declarationseq_sempred
        self._predicates[88] = self.enumeratorlist_sempred
        self._predicates[106] = self.attributespecifierseq_sempred
        self._predicates[109] = self.attributelist_sempred
        self._predicates[115] = self.balancedtokenseq_sempred
        self._predicates[117] = self.initdeclaratorlist_sempred
        self._predicates[121] = self.noptrdeclarator_sempred
        self._predicates[132] = self.noptrabstractdeclarator_sempred
        self._predicates[134] = self.noptrabstractpackdeclarator_sempred
        self._predicates[136] = self.parameterdeclarationlist_sempred
        self._predicates[143] = self.initializerlist_sempred
        self._predicates[153] = self.memberdeclaratorlist_sempred
        self._predicates[155] = self.virtspecifierseq_sempred
        self._predicates[159] = self.basespecifierlist_sempred
        self._predicates[174] = self.templateparameterlist_sempred
        self._predicates[180] = self.templateargumentlist_sempred
        self._predicates[193] = self.typeidlist_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def nestednamespecifier_sempred(self, localctx:NestednamespecifierContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def capturelist_sempred(self, localctx:CapturelistContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def postfixexpression_sempred(self, localctx:PostfixexpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 7)
         

    def noptrnewdeclarator_sempred(self, localctx:NoptrnewdeclaratorContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def pmexpression_sempred(self, localctx:PmexpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         

    def multiplicativeexpression_sempred(self, localctx:MultiplicativeexpressionContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

    def additiveexpression_sempred(self, localctx:AdditiveexpressionContext, predIndex:int):
            if predIndex == 18:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 1)
         

    def shiftexpression_sempred(self, localctx:ShiftexpressionContext, predIndex:int):
            if predIndex == 20:
                return self.precpred(self._ctx, 1)
         

    def relationalexpression_sempred(self, localctx:RelationalexpressionContext, predIndex:int):
            if predIndex == 21:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 1)
         

    def equalityexpression_sempred(self, localctx:EqualityexpressionContext, predIndex:int):
            if predIndex == 25:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 1)
         

    def andexpression_sempred(self, localctx:AndexpressionContext, predIndex:int):
            if predIndex == 27:
                return self.precpred(self._ctx, 1)
         

    def exclusiveorexpression_sempred(self, localctx:ExclusiveorexpressionContext, predIndex:int):
            if predIndex == 28:
                return self.precpred(self._ctx, 1)
         

    def inclusiveorexpression_sempred(self, localctx:InclusiveorexpressionContext, predIndex:int):
            if predIndex == 29:
                return self.precpred(self._ctx, 1)
         

    def logicalandexpression_sempred(self, localctx:LogicalandexpressionContext, predIndex:int):
            if predIndex == 30:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 1)
         

    def logicalorexpression_sempred(self, localctx:LogicalorexpressionContext, predIndex:int):
            if predIndex == 32:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 33:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 34:
                return self.precpred(self._ctx, 1)
         

    def statementseq_sempred(self, localctx:StatementseqContext, predIndex:int):
            if predIndex == 35:
                return self.precpred(self._ctx, 1)
         

    def declarationseq_sempred(self, localctx:DeclarationseqContext, predIndex:int):
            if predIndex == 36:
                return self.precpred(self._ctx, 1)
         

    def enumeratorlist_sempred(self, localctx:EnumeratorlistContext, predIndex:int):
            if predIndex == 37:
                return self.precpred(self._ctx, 1)
         

    def attributespecifierseq_sempred(self, localctx:AttributespecifierseqContext, predIndex:int):
            if predIndex == 38:
                return self.precpred(self._ctx, 1)
         

    def attributelist_sempred(self, localctx:AttributelistContext, predIndex:int):
            if predIndex == 39:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 40:
                return self.precpred(self._ctx, 1)
         

    def balancedtokenseq_sempred(self, localctx:BalancedtokenseqContext, predIndex:int):
            if predIndex == 41:
                return self.precpred(self._ctx, 1)
         

    def initdeclaratorlist_sempred(self, localctx:InitdeclaratorlistContext, predIndex:int):
            if predIndex == 42:
                return self.precpred(self._ctx, 1)
         

    def noptrdeclarator_sempred(self, localctx:NoptrdeclaratorContext, predIndex:int):
            if predIndex == 43:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 44:
                return self.precpred(self._ctx, 2)
         

    def noptrabstractdeclarator_sempred(self, localctx:NoptrabstractdeclaratorContext, predIndex:int):
            if predIndex == 45:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 46:
                return self.precpred(self._ctx, 3)
         

    def noptrabstractpackdeclarator_sempred(self, localctx:NoptrabstractpackdeclaratorContext, predIndex:int):
            if predIndex == 47:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 48:
                return self.precpred(self._ctx, 2)
         

    def parameterdeclarationlist_sempred(self, localctx:ParameterdeclarationlistContext, predIndex:int):
            if predIndex == 49:
                return self.precpred(self._ctx, 1)
         

    def initializerlist_sempred(self, localctx:InitializerlistContext, predIndex:int):
            if predIndex == 50:
                return self.precpred(self._ctx, 1)
         

    def memberdeclaratorlist_sempred(self, localctx:MemberdeclaratorlistContext, predIndex:int):
            if predIndex == 51:
                return self.precpred(self._ctx, 1)
         

    def virtspecifierseq_sempred(self, localctx:VirtspecifierseqContext, predIndex:int):
            if predIndex == 52:
                return self.precpred(self._ctx, 1)
         

    def basespecifierlist_sempred(self, localctx:BasespecifierlistContext, predIndex:int):
            if predIndex == 53:
                return self.precpred(self._ctx, 1)
         

    def templateparameterlist_sempred(self, localctx:TemplateparameterlistContext, predIndex:int):
            if predIndex == 54:
                return self.precpred(self._ctx, 1)
         

    def templateargumentlist_sempred(self, localctx:TemplateargumentlistContext, predIndex:int):
            if predIndex == 55:
                return self.precpred(self._ctx, 1)
         

    def typeidlist_sempred(self, localctx:TypeidlistContext, predIndex:int):
            if predIndex == 56:
                return self.precpred(self._ctx, 1)
         




